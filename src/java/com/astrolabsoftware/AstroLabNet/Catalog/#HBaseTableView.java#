package com.astrolabsoftware.AstroLabNet.Catalog;

import com.astrolabsoftware.AstroLabNet.Utils.Coding;

// JavaFX
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;

// org.json
import org.json.JSONObject;
import org.json.JSONArray;

// Java

// Log4J
import org.apache.log4j.Logger;

/** The <em>HBaseTableView</em> is a {@link TableView} for <em>HBase</em>.
  * @opt attributes
  * @opt operations
  * @opt types
  * @opt visibility
  * @author <a href="mailto:Julius.Hrivnac@cern.ch">J.Hrivnac</a> */
public class HBaseTableView extends TableView {

  /** Create and initialise structure.
    * @param entry The {@link TableEntry}. */
  public HBaseTableView(TableEntry entry) {
    super();
    TableColumn<String, TableEntry> column;
    for (String entryName : entry.names()) {
      column = new TableColumn<>(entryName);
      column.setCellValueFactory(new PropertyValueFactory<>(entryName));
      getColumns().add(column);
      }
    }
    
  /** Fill in {@link JSONObject}.
    * @param json The {@link JSONObject} to fill in. */
  public void addJSONEntry(JSONObject json) {
    if (json == null || json.equals("")) {
      return;
      }
    JSONArray rows = json.getJSONArray("Row");
    JSONArray cells;
    String key;
    String column;
    String value;
    TableEntry entry = null;
    for (int i = 0; i < rows.length(); i++) {
      entry = new CatalogEntry();
      entry.set("x:key", Coding.decode(rows.getJSONObject(i).getString("key")));
      cells = rows.getJSONObject(i).getJSONArray("Cell");
      for (int j = 0; j < cells.length(); j++) {
        column = Coding.decode(cells.getJSONObject(j).getString("column"));
        value  = Coding.decode(cells.getJSONObject(j).getString("$"));
        entry.set(column, value);
        }
      if (entry != null) {
        getItems().add(entry);
        }
      }
    }
      
  /** Logging . */
  private static Logger log = Logger.getLogger(HBaseTableView.class);
 
  }
