/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ztf.alert;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** avro alert schema */
@org.apache.avro.specific.AvroGenerated
public class candidate extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8620948752126032678L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"candidate\",\"namespace\":\"ztf.alert\",\"doc\":\"avro alert schema\",\"fields\":[{\"name\":\"jd\",\"type\":\"double\",\"doc\":\"Observation Julian date at start of exposure [days]\"},{\"name\":\"fid\",\"type\":\"int\",\"doc\":\"Filter ID (1=g; 2=R; 3=i)\"},{\"name\":\"pid\",\"type\":\"long\",\"doc\":\"Processing ID for science image to facilitate archive retrieval\"},{\"name\":\"diffmaglim\",\"type\":[\"float\",\"null\"],\"doc\":\"Expected 5-sigma mag limit in difference image based on global noise estimate [mag]\",\"default\":null},{\"name\":\"pdiffimfilename\",\"type\":[\"string\",\"null\"],\"doc\":\"filename of positive (sci minus ref) difference image\",\"default\":null},{\"name\":\"programpi\",\"type\":[\"string\",\"null\"],\"doc\":\"Principal investigator attached to program ID\",\"default\":null},{\"name\":\"programid\",\"type\":\"int\",\"doc\":\"Program ID: encodes either public, collab, or caltech mode\"},{\"name\":\"candid\",\"type\":\"long\",\"doc\":\"Candidate ID from operations DB\"},{\"name\":\"isdiffpos\",\"type\":\"string\",\"doc\":\"t or 1 => candidate is from positive (sci minus ref) subtraction; f or 0 => candidate is from negative (ref minus sci) subtraction\"},{\"name\":\"tblid\",\"type\":[\"long\",\"null\"],\"doc\":\"Internal pipeline table extraction ID\",\"default\":null},{\"name\":\"nid\",\"type\":[\"int\",\"null\"],\"doc\":\"Night ID\",\"default\":null},{\"name\":\"rcid\",\"type\":[\"int\",\"null\"],\"doc\":\"Readout channel ID [00 .. 63]\",\"default\":null},{\"name\":\"field\",\"type\":[\"int\",\"null\"],\"doc\":\"ZTF field ID\",\"default\":null},{\"name\":\"xpos\",\"type\":[\"float\",\"null\"],\"doc\":\"x-image position of candidate [pixels]\",\"default\":null},{\"name\":\"ypos\",\"type\":[\"float\",\"null\"],\"doc\":\"y-image position of candidate [pixels]\",\"default\":null},{\"name\":\"ra\",\"type\":\"double\",\"doc\":\"Right Ascension of candidate; J2000 [deg]\"},{\"name\":\"dec\",\"type\":\"double\",\"doc\":\"Declination of candidate; J2000 [deg]\"},{\"name\":\"magpsf\",\"type\":\"float\",\"doc\":\"Magnitude from PSF-fit photometry [mag]\"},{\"name\":\"sigmapsf\",\"type\":\"float\",\"doc\":\"1-sigma uncertainty in magpsf [mag]\"},{\"name\":\"chipsf\",\"type\":[\"float\",\"null\"],\"doc\":\"Reduced chi-square for PSF-fit\",\"default\":null},{\"name\":\"magap\",\"type\":[\"float\",\"null\"],\"doc\":\"Aperture mag using 14 pixel diameter aperture [mag]\",\"default\":null},{\"name\":\"sigmagap\",\"type\":[\"float\",\"null\"],\"doc\":\"1-sigma uncertainty in magap [mag]\",\"default\":null},{\"name\":\"distnr\",\"type\":[\"float\",\"null\"],\"doc\":\"distance to nearest source in reference image PSF-catalog [pixels]\",\"default\":null},{\"name\":\"magnr\",\"type\":[\"float\",\"null\"],\"doc\":\"magnitude of nearest source in reference image PSF-catalog [mag]\",\"default\":null},{\"name\":\"sigmagnr\",\"type\":[\"float\",\"null\"],\"doc\":\"1-sigma uncertainty in magnr [mag]\",\"default\":null},{\"name\":\"chinr\",\"type\":[\"float\",\"null\"],\"doc\":\"DAOPhot chi parameter of nearest source in reference image PSF-catalog\",\"default\":null},{\"name\":\"sharpnr\",\"type\":[\"float\",\"null\"],\"doc\":\"DAOPhot sharp parameter of nearest source in reference image PSF-catalog\",\"default\":null},{\"name\":\"sky\",\"type\":[\"float\",\"null\"],\"doc\":\"Local sky background estimate [DN]\",\"default\":null},{\"name\":\"magdiff\",\"type\":[\"float\",\"null\"],\"doc\":\"Difference: magap - magpsf [mag]\",\"default\":null},{\"name\":\"fwhm\",\"type\":[\"float\",\"null\"],\"doc\":\"Full Width Half Max assuming a Gaussian core, from SExtractor [pixels]\",\"default\":null},{\"name\":\"classtar\",\"type\":[\"float\",\"null\"],\"doc\":\"Star/Galaxy classification score from SExtractor\",\"default\":null},{\"name\":\"mindtoedge\",\"type\":[\"float\",\"null\"],\"doc\":\"Distance to nearest edge in image [pixels]\",\"default\":null},{\"name\":\"magfromlim\",\"type\":[\"float\",\"null\"],\"doc\":\"Difference: diffmaglim - magap [mag]\",\"default\":null},{\"name\":\"seeratio\",\"type\":[\"float\",\"null\"],\"doc\":\"Ratio: difffwhm / fwhm\",\"default\":null},{\"name\":\"aimage\",\"type\":[\"float\",\"null\"],\"doc\":\"Windowed profile RMS afloat major axis from SExtractor [pixels]\",\"default\":null},{\"name\":\"bimage\",\"type\":[\"float\",\"null\"],\"doc\":\"Windowed profile RMS afloat minor axis from SExtractor [pixels]\",\"default\":null},{\"name\":\"aimagerat\",\"type\":[\"float\",\"null\"],\"doc\":\"Ratio: aimage / fwhm\",\"default\":null},{\"name\":\"bimagerat\",\"type\":[\"float\",\"null\"],\"doc\":\"Ratio: bimage / fwhm\",\"default\":null},{\"name\":\"elong\",\"type\":[\"float\",\"null\"],\"doc\":\"Ratio: aimage / bimage\",\"default\":null},{\"name\":\"nneg\",\"type\":[\"int\",\"null\"],\"doc\":\"number of negative pixels in a 5 x 5 pixel stamp\",\"default\":null},{\"name\":\"nbad\",\"type\":[\"int\",\"null\"],\"doc\":\"number of prior-tagged bad pixels in a 5 x 5 pixel stamp\",\"default\":null},{\"name\":\"rb\",\"type\":[\"float\",\"null\"],\"doc\":\"RealBogus quality score; range is 0 to 1 where closer to 1 is more reliable\",\"default\":null},{\"name\":\"ssdistnr\",\"type\":[\"float\",\"null\"],\"doc\":\"distance to nearest known solar system object if exists within 30 arcsec [arcsec]\",\"default\":null},{\"name\":\"ssmagnr\",\"type\":[\"float\",\"null\"],\"doc\":\"magnitude of nearest known solar system object if exists within 30 arcsec (usually V-band from MPC archive) [mag]\",\"default\":null},{\"name\":\"ssnamenr\",\"type\":[\"string\",\"null\"],\"doc\":\"name of nearest known solar system object if exists within 30 arcsec (from MPC archive)\",\"default\":null},{\"name\":\"sumrat\",\"type\":[\"float\",\"null\"],\"doc\":\"Ratio: sum(pixels) / sum(|pixels|) in a 5 x 5 pixel stamp where stamp is first median-filtered to mitigate outliers\",\"default\":null},{\"name\":\"magapbig\",\"type\":[\"float\",\"null\"],\"doc\":\"Aperture mag using 18 pixel diameter aperture [mag]\",\"default\":null},{\"name\":\"sigmagapbig\",\"type\":[\"float\",\"null\"],\"doc\":\"1-sigma uncertainty in magapbig [mag]\",\"default\":null},{\"name\":\"ranr\",\"type\":\"double\",\"doc\":\"Right Ascension of nearest source in reference image PSF-catalog; J2000 [deg]\"},{\"name\":\"decnr\",\"type\":\"double\",\"doc\":\"Declination of nearest source in reference image PSF-catalog; J2000 [deg]\"},{\"name\":\"sgmag1\",\"type\":[\"float\",\"null\"],\"doc\":\"g-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"default\":null},{\"name\":\"srmag1\",\"type\":[\"float\",\"null\"],\"doc\":\"r-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"default\":null},{\"name\":\"simag1\",\"type\":[\"float\",\"null\"],\"doc\":\"i-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"default\":null},{\"name\":\"szmag1\",\"type\":[\"float\",\"null\"],\"doc\":\"z-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"default\":null},{\"name\":\"sgscore1\",\"type\":[\"float\",\"null\"],\"doc\":\"Star/Galaxy score of closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star\",\"default\":null},{\"name\":\"distpsnr1\",\"type\":[\"float\",\"null\"],\"doc\":\"Distance to closest source from PS1 catalog; if exists within 30 arcsec [arcsec]\",\"default\":null},{\"name\":\"ndethist\",\"type\":\"int\",\"doc\":\"Number of spatially-coincident detections falling within 1.5 arcsec going back to beginning of survey; only detections that fell on the same field and readout-channel ID where the input candidate was observed are counted\"},{\"name\":\"ncovhist\",\"type\":\"int\",\"doc\":\"Number of times input candidate position fell on any field and readout-channel going back to beginning of survey\"},{\"name\":\"jdstarthist\",\"type\":[\"double\",\"null\"],\"doc\":\"Earliest Julian date of epoch corresponding to ndethist [days]\",\"default\":null},{\"name\":\"jdendhist\",\"type\":[\"double\",\"null\"],\"doc\":\"Latest Julian date of epoch corresponding to ndethist [days]\",\"default\":null},{\"name\":\"scorr\",\"type\":[\"double\",\"null\"],\"doc\":\"Peak-pixel signal-to-noise ratio in point source matched-filtered detection image\",\"default\":null},{\"name\":\"tooflag\",\"type\":[\"int\",\"null\"],\"doc\":\"1 => candidate is from a Target-of-Opportunity (ToO) exposure; 0 => candidate is from a non-ToO exposure\",\"default\":0},{\"name\":\"objectidps1\",\"type\":[\"long\",\"null\"],\"doc\":\"Object ID of closest source from PS1 catalog; if exists within 30 arcsec\",\"default\":null},{\"name\":\"objectidps2\",\"type\":[\"long\",\"null\"],\"doc\":\"Object ID of second closest source from PS1 catalog; if exists within 30 arcsec\",\"default\":null},{\"name\":\"sgmag2\",\"type\":[\"float\",\"null\"],\"doc\":\"g-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"default\":null},{\"name\":\"srmag2\",\"type\":[\"float\",\"null\"],\"doc\":\"r-band PSF-","fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"default\":null},{\"name\":\"simag2\",\"type\":[\"float\",\"null\"],\"doc\":\"i-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"default\":null},{\"name\":\"szmag2\",\"type\":[\"float\",\"null\"],\"doc\":\"z-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"default\":null},{\"name\":\"sgscore2\",\"type\":[\"float\",\"null\"],\"doc\":\"Star/Galaxy score of second closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star\",\"default\":null},{\"name\":\"distpsnr2\",\"type\":[\"float\",\"null\"],\"doc\":\"Distance to second closest source from PS1 catalog; if exists within 30 arcsec [arcsec]\",\"default\":null},{\"name\":\"objectidps3\",\"type\":[\"long\",\"null\"],\"doc\":\"Object ID of third closest source from PS1 catalog; if exists within 30 arcsec\",\"default\":null},{\"name\":\"sgmag3\",\"type\":[\"float\",\"null\"],\"doc\":\"g-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"default\":null},{\"name\":\"srmag3\",\"type\":[\"float\",\"null\"],\"doc\":\"r-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"default\":null},{\"name\":\"simag3\",\"type\":[\"float\",\"null\"],\"doc\":\"i-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"default\":null},{\"name\":\"szmag3\",\"type\":[\"float\",\"null\"],\"doc\":\"z-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]\",\"default\":null},{\"name\":\"sgscore3\",\"type\":[\"float\",\"null\"],\"doc\":\"Star/Galaxy score of third closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star\",\"default\":null},{\"name\":\"distpsnr3\",\"type\":[\"float\",\"null\"],\"doc\":\"Distance to third closest source from PS1 catalog; if exists within 30 arcsec [arcsec]\",\"default\":null},{\"name\":\"nmtchps\",\"type\":\"int\",\"doc\":\"Number of source matches from PS1 catalog falling within 30 arcsec\"},{\"name\":\"rfid\",\"type\":\"long\",\"doc\":\"Processing ID for reference image to facilitate archive retrieval\"},{\"name\":\"jdstartref\",\"type\":\"double\",\"doc\":\"Observation Julian date of earliest exposure used to generate reference image [days]\"},{\"name\":\"jdendref\",\"type\":\"double\",\"doc\":\"Observation Julian date of latest exposure used to generate reference image [days]\"},{\"name\":\"nframesref\",\"type\":\"int\",\"doc\":\"Number of frames (epochal images) used to generate reference image\"},{\"name\":\"rbversion\",\"type\":\"string\",\"doc\":\"version of RealBogus model/classifier used to assign rb quality score\"},{\"name\":\"dsnrms\",\"type\":[\"float\",\"null\"],\"doc\":\"Ratio: D/stddev(D) on event position where D = difference image\",\"default\":null},{\"name\":\"ssnrms\",\"type\":[\"float\",\"null\"],\"doc\":\"Ratio: S/stddev(S) on event position where S = image of convolution: D (x) PSF(D)\",\"default\":null},{\"name\":\"dsdiff\",\"type\":[\"float\",\"null\"],\"doc\":\"Difference of statistics: dsnrms - ssnrms\",\"default\":null},{\"name\":\"magzpsci\",\"type\":[\"float\",\"null\"],\"doc\":\"Magnitude zero point for photometry estimates [mag]\",\"default\":null},{\"name\":\"magzpsciunc\",\"type\":[\"float\",\"null\"],\"doc\":\"Magnitude zero point uncertainty (in magzpsci) [mag]\",\"default\":null},{\"name\":\"magzpscirms\",\"type\":[\"float\",\"null\"],\"doc\":\"RMS (deviation from average) in all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]\",\"default\":null},{\"name\":\"nmatches\",\"type\":\"int\",\"doc\":\"Number of PS1 photometric calibrators used to calibrate science image from science image processing\"},{\"name\":\"clrcoeff\",\"type\":[\"float\",\"null\"],\"doc\":\"Color coefficient from linear fit from photometric calibration of science image\",\"default\":null},{\"name\":\"clrcounc\",\"type\":[\"float\",\"null\"],\"doc\":\"Color coefficient uncertainty from linear fit (corresponding to clrcoeff)\",\"default\":null},{\"name\":\"zpclrcov\",\"type\":[\"float\",\"null\"],\"doc\":\"Covariance in magzpsci and clrcoeff from science image processing [mag^2]\",\"default\":null},{\"name\":\"zpmed\",\"type\":[\"float\",\"null\"],\"doc\":\"Magnitude zero point from median of all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]\",\"default\":null},{\"name\":\"clrmed\",\"type\":[\"float\",\"null\"],\"doc\":\"Median color of all PS1 photometric calibrators used from science image processing [mag]: for filter (fid) = 1, 2, 3, PS1 color used = g-r, g-r, r-i respectively\",\"default\":null},{\"name\":\"clrrms\",\"type\":[\"float\",\"null\"],\"doc\":\"RMS color (deviation from average) of all PS1 photometric calibrators used from science image processing [mag]\",\"default\":null},{\"name\":\"neargaia\",\"type\":[\"float\",\"null\"],\"doc\":\"Distance to closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [arcsec]\",\"default\":null},{\"name\":\"neargaiabright\",\"type\":[\"float\",\"null\"],\"doc\":\"Distance to closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [arcsec]\",\"default\":null},{\"name\":\"maggaia\",\"type\":[\"float\",\"null\"],\"doc\":\"Gaia (G-band) magnitude of closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [mag]\",\"default\":null},{\"name\":\"maggaiabright\",\"type\":[\"float\",\"null\"],\"doc\":\"Gaia (G-band) magnitude of closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [mag]\",\"default\":null},{\"name\":\"exptime\",\"type\":[\"float\",\"null\"],\"doc\":\"Integration time of camera exposure [sec]\",\"default\":null}],\"version\":\"3.2\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<candidate> ENCODER =
      new BinaryMessageEncoder<candidate>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<candidate> DECODER =
      new BinaryMessageDecoder<candidate>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<candidate> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<candidate> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<candidate>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this candidate to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a candidate from a ByteBuffer. */
  public static candidate fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Observation Julian date at start of exposure [days] */
  @Deprecated public double jd;
  /** Filter ID (1=g; 2=R; 3=i) */
  @Deprecated public int fid;
  /** Processing ID for science image to facilitate archive retrieval */
  @Deprecated public long pid;
  /** Expected 5-sigma mag limit in difference image based on global noise estimate [mag] */
  @Deprecated public java.lang.Float diffmaglim;
  /** filename of positive (sci minus ref) difference image */
  @Deprecated public java.lang.CharSequence pdiffimfilename;
  /** Principal investigator attached to program ID */
  @Deprecated public java.lang.CharSequence programpi;
  /** Program ID: encodes either public, collab, or caltech mode */
  @Deprecated public int programid;
  /** Candidate ID from operations DB */
  @Deprecated public long candid;
  /** t or 1 => candidate is from positive (sci minus ref) subtraction; f or 0 => candidate is from negative (ref minus sci) subtraction */
  @Deprecated public java.lang.CharSequence isdiffpos;
  /** Internal pipeline table extraction ID */
  @Deprecated public java.lang.Long tblid;
  /** Night ID */
  @Deprecated public java.lang.Integer nid;
  /** Readout channel ID [00 .. 63] */
  @Deprecated public java.lang.Integer rcid;
  /** ZTF field ID */
  @Deprecated public java.lang.Integer field;
  /** x-image position of candidate [pixels] */
  @Deprecated public java.lang.Float xpos;
  /** y-image position of candidate [pixels] */
  @Deprecated public java.lang.Float ypos;
  /** Right Ascension of candidate; J2000 [deg] */
  @Deprecated public double ra;
  /** Declination of candidate; J2000 [deg] */
  @Deprecated public double dec;
  /** Magnitude from PSF-fit photometry [mag] */
  @Deprecated public float magpsf;
  /** 1-sigma uncertainty in magpsf [mag] */
  @Deprecated public float sigmapsf;
  /** Reduced chi-square for PSF-fit */
  @Deprecated public java.lang.Float chipsf;
  /** Aperture mag using 14 pixel diameter aperture [mag] */
  @Deprecated public java.lang.Float magap;
  /** 1-sigma uncertainty in magap [mag] */
  @Deprecated public java.lang.Float sigmagap;
  /** distance to nearest source in reference image PSF-catalog [pixels] */
  @Deprecated public java.lang.Float distnr;
  /** magnitude of nearest source in reference image PSF-catalog [mag] */
  @Deprecated public java.lang.Float magnr;
  /** 1-sigma uncertainty in magnr [mag] */
  @Deprecated public java.lang.Float sigmagnr;
  /** DAOPhot chi parameter of nearest source in reference image PSF-catalog */
  @Deprecated public java.lang.Float chinr;
  /** DAOPhot sharp parameter of nearest source in reference image PSF-catalog */
  @Deprecated public java.lang.Float sharpnr;
  /** Local sky background estimate [DN] */
  @Deprecated public java.lang.Float sky;
  /** Difference: magap - magpsf [mag] */
  @Deprecated public java.lang.Float magdiff;
  /** Full Width Half Max assuming a Gaussian core, from SExtractor [pixels] */
  @Deprecated public java.lang.Float fwhm;
  /** Star/Galaxy classification score from SExtractor */
  @Deprecated public java.lang.Float classtar;
  /** Distance to nearest edge in image [pixels] */
  @Deprecated public java.lang.Float mindtoedge;
  /** Difference: diffmaglim - magap [mag] */
  @Deprecated public java.lang.Float magfromlim;
  /** Ratio: difffwhm / fwhm */
  @Deprecated public java.lang.Float seeratio;
  /** Windowed profile RMS afloat major axis from SExtractor [pixels] */
  @Deprecated public java.lang.Float aimage;
  /** Windowed profile RMS afloat minor axis from SExtractor [pixels] */
  @Deprecated public java.lang.Float bimage;
  /** Ratio: aimage / fwhm */
  @Deprecated public java.lang.Float aimagerat;
  /** Ratio: bimage / fwhm */
  @Deprecated public java.lang.Float bimagerat;
  /** Ratio: aimage / bimage */
  @Deprecated public java.lang.Float elong;
  /** number of negative pixels in a 5 x 5 pixel stamp */
  @Deprecated public java.lang.Integer nneg;
  /** number of prior-tagged bad pixels in a 5 x 5 pixel stamp */
  @Deprecated public java.lang.Integer nbad;
  /** RealBogus quality score; range is 0 to 1 where closer to 1 is more reliable */
  @Deprecated public java.lang.Float rb;
  /** distance to nearest known solar system object if exists within 30 arcsec [arcsec] */
  @Deprecated public java.lang.Float ssdistnr;
  /** magnitude of nearest known solar system object if exists within 30 arcsec (usually V-band from MPC archive) [mag] */
  @Deprecated public java.lang.Float ssmagnr;
  /** name of nearest known solar system object if exists within 30 arcsec (from MPC archive) */
  @Deprecated public java.lang.CharSequence ssnamenr;
  /** Ratio: sum(pixels) / sum(|pixels|) in a 5 x 5 pixel stamp where stamp is first median-filtered to mitigate outliers */
  @Deprecated public java.lang.Float sumrat;
  /** Aperture mag using 18 pixel diameter aperture [mag] */
  @Deprecated public java.lang.Float magapbig;
  /** 1-sigma uncertainty in magapbig [mag] */
  @Deprecated public java.lang.Float sigmagapbig;
  /** Right Ascension of nearest source in reference image PSF-catalog; J2000 [deg] */
  @Deprecated public double ranr;
  /** Declination of nearest source in reference image PSF-catalog; J2000 [deg] */
  @Deprecated public double decnr;
  /** g-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag] */
  @Deprecated public java.lang.Float sgmag1;
  /** r-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag] */
  @Deprecated public java.lang.Float srmag1;
  /** i-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag] */
  @Deprecated public java.lang.Float simag1;
  /** z-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag] */
  @Deprecated public java.lang.Float szmag1;
  /** Star/Galaxy score of closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star */
  @Deprecated public java.lang.Float sgscore1;
  /** Distance to closest source from PS1 catalog; if exists within 30 arcsec [arcsec] */
  @Deprecated public java.lang.Float distpsnr1;
  /** Number of spatially-coincident detections falling within 1.5 arcsec going back to beginning of survey; only detections that fell on the same field and readout-channel ID where the input candidate was observed are counted */
  @Deprecated public int ndethist;
  /** Number of times input candidate position fell on any field and readout-channel going back to beginning of survey */
  @Deprecated public int ncovhist;
  /** Earliest Julian date of epoch corresponding to ndethist [days] */
  @Deprecated public java.lang.Double jdstarthist;
  /** Latest Julian date of epoch corresponding to ndethist [days] */
  @Deprecated public java.lang.Double jdendhist;
  /** Peak-pixel signal-to-noise ratio in point source matched-filtered detection image */
  @Deprecated public java.lang.Double scorr;
  /** 1 => candidate is from a Target-of-Opportunity (ToO) exposure; 0 => candidate is from a non-ToO exposure */
  @Deprecated public java.lang.Integer tooflag;
  /** Object ID of closest source from PS1 catalog; if exists within 30 arcsec */
  @Deprecated public java.lang.Long objectidps1;
  /** Object ID of second closest source from PS1 catalog; if exists within 30 arcsec */
  @Deprecated public java.lang.Long objectidps2;
  /** g-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag] */
  @Deprecated public java.lang.Float sgmag2;
  /** r-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag] */
  @Deprecated public java.lang.Float srmag2;
  /** i-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag] */
  @Deprecated public java.lang.Float simag2;
  /** z-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag] */
  @Deprecated public java.lang.Float szmag2;
  /** Star/Galaxy score of second closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star */
  @Deprecated public java.lang.Float sgscore2;
  /** Distance to second closest source from PS1 catalog; if exists within 30 arcsec [arcsec] */
  @Deprecated public java.lang.Float distpsnr2;
  /** Object ID of third closest source from PS1 catalog; if exists within 30 arcsec */
  @Deprecated public java.lang.Long objectidps3;
  /** g-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag] */
  @Deprecated public java.lang.Float sgmag3;
  /** r-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag] */
  @Deprecated public java.lang.Float srmag3;
  /** i-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag] */
  @Deprecated public java.lang.Float simag3;
  /** z-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag] */
  @Deprecated public java.lang.Float szmag3;
  /** Star/Galaxy score of third closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star */
  @Deprecated public java.lang.Float sgscore3;
  /** Distance to third closest source from PS1 catalog; if exists within 30 arcsec [arcsec] */
  @Deprecated public java.lang.Float distpsnr3;
  /** Number of source matches from PS1 catalog falling within 30 arcsec */
  @Deprecated public int nmtchps;
  /** Processing ID for reference image to facilitate archive retrieval */
  @Deprecated public long rfid;
  /** Observation Julian date of earliest exposure used to generate reference image [days] */
  @Deprecated public double jdstartref;
  /** Observation Julian date of latest exposure used to generate reference image [days] */
  @Deprecated public double jdendref;
  /** Number of frames (epochal images) used to generate reference image */
  @Deprecated public int nframesref;
  /** version of RealBogus model/classifier used to assign rb quality score */
  @Deprecated public java.lang.CharSequence rbversion;
  /** Ratio: D/stddev(D) on event position where D = difference image */
  @Deprecated public java.lang.Float dsnrms;
  /** Ratio: S/stddev(S) on event position where S = image of convolution: D (x) PSF(D) */
  @Deprecated public java.lang.Float ssnrms;
  /** Difference of statistics: dsnrms - ssnrms */
  @Deprecated public java.lang.Float dsdiff;
  /** Magnitude zero point for photometry estimates [mag] */
  @Deprecated public java.lang.Float magzpsci;
  /** Magnitude zero point uncertainty (in magzpsci) [mag] */
  @Deprecated public java.lang.Float magzpsciunc;
  /** RMS (deviation from average) in all differences between instrumental photometry and matched photometric calibrators from science image processing [mag] */
  @Deprecated public java.lang.Float magzpscirms;
  /** Number of PS1 photometric calibrators used to calibrate science image from science image processing */
  @Deprecated public int nmatches;
  /** Color coefficient from linear fit from photometric calibration of science image */
  @Deprecated public java.lang.Float clrcoeff;
  /** Color coefficient uncertainty from linear fit (corresponding to clrcoeff) */
  @Deprecated public java.lang.Float clrcounc;
  /** Covariance in magzpsci and clrcoeff from science image processing [mag^2] */
  @Deprecated public java.lang.Float zpclrcov;
  /** Magnitude zero point from median of all differences between instrumental photometry and matched photometric calibrators from science image processing [mag] */
  @Deprecated public java.lang.Float zpmed;
  /** Median color of all PS1 photometric calibrators used from science image processing [mag]: for filter (fid) = 1, 2, 3, PS1 color used = g-r, g-r, r-i respectively */
  @Deprecated public java.lang.Float clrmed;
  /** RMS color (deviation from average) of all PS1 photometric calibrators used from science image processing [mag] */
  @Deprecated public java.lang.Float clrrms;
  /** Distance to closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [arcsec] */
  @Deprecated public java.lang.Float neargaia;
  /** Distance to closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [arcsec] */
  @Deprecated public java.lang.Float neargaiabright;
  /** Gaia (G-band) magnitude of closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [mag] */
  @Deprecated public java.lang.Float maggaia;
  /** Gaia (G-band) magnitude of closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [mag] */
  @Deprecated public java.lang.Float maggaiabright;
  /** Integration time of camera exposure [sec] */
  @Deprecated public java.lang.Float exptime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public candidate() {}

  /**
   * All-args constructor.
   * @param jd Observation Julian date at start of exposure [days]
   * @param fid Filter ID (1=g; 2=R; 3=i)
   * @param pid Processing ID for science image to facilitate archive retrieval
   * @param diffmaglim Expected 5-sigma mag limit in difference image based on global noise estimate [mag]
   * @param pdiffimfilename filename of positive (sci minus ref) difference image
   * @param programpi Principal investigator attached to program ID
   * @param programid Program ID: encodes either public, collab, or caltech mode
   * @param candid Candidate ID from operations DB
   * @param isdiffpos t or 1 => candidate is from positive (sci minus ref) subtraction; f or 0 => candidate is from negative (ref minus sci) subtraction
   * @param tblid Internal pipeline table extraction ID
   * @param nid Night ID
   * @param rcid Readout channel ID [00 .. 63]
   * @param field ZTF field ID
   * @param xpos x-image position of candidate [pixels]
   * @param ypos y-image position of candidate [pixels]
   * @param ra Right Ascension of candidate; J2000 [deg]
   * @param dec Declination of candidate; J2000 [deg]
   * @param magpsf Magnitude from PSF-fit photometry [mag]
   * @param sigmapsf 1-sigma uncertainty in magpsf [mag]
   * @param chipsf Reduced chi-square for PSF-fit
   * @param magap Aperture mag using 14 pixel diameter aperture [mag]
   * @param sigmagap 1-sigma uncertainty in magap [mag]
   * @param distnr distance to nearest source in reference image PSF-catalog [pixels]
   * @param magnr magnitude of nearest source in reference image PSF-catalog [mag]
   * @param sigmagnr 1-sigma uncertainty in magnr [mag]
   * @param chinr DAOPhot chi parameter of nearest source in reference image PSF-catalog
   * @param sharpnr DAOPhot sharp parameter of nearest source in reference image PSF-catalog
   * @param sky Local sky background estimate [DN]
   * @param magdiff Difference: magap - magpsf [mag]
   * @param fwhm Full Width Half Max assuming a Gaussian core, from SExtractor [pixels]
   * @param classtar Star/Galaxy classification score from SExtractor
   * @param mindtoedge Distance to nearest edge in image [pixels]
   * @param magfromlim Difference: diffmaglim - magap [mag]
   * @param seeratio Ratio: difffwhm / fwhm
   * @param aimage Windowed profile RMS afloat major axis from SExtractor [pixels]
   * @param bimage Windowed profile RMS afloat minor axis from SExtractor [pixels]
   * @param aimagerat Ratio: aimage / fwhm
   * @param bimagerat Ratio: bimage / fwhm
   * @param elong Ratio: aimage / bimage
   * @param nneg number of negative pixels in a 5 x 5 pixel stamp
   * @param nbad number of prior-tagged bad pixels in a 5 x 5 pixel stamp
   * @param rb RealBogus quality score; range is 0 to 1 where closer to 1 is more reliable
   * @param ssdistnr distance to nearest known solar system object if exists within 30 arcsec [arcsec]
   * @param ssmagnr magnitude of nearest known solar system object if exists within 30 arcsec (usually V-band from MPC archive) [mag]
   * @param ssnamenr name of nearest known solar system object if exists within 30 arcsec (from MPC archive)
   * @param sumrat Ratio: sum(pixels) / sum(|pixels|) in a 5 x 5 pixel stamp where stamp is first median-filtered to mitigate outliers
   * @param magapbig Aperture mag using 18 pixel diameter aperture [mag]
   * @param sigmagapbig 1-sigma uncertainty in magapbig [mag]
   * @param ranr Right Ascension of nearest source in reference image PSF-catalog; J2000 [deg]
   * @param decnr Declination of nearest source in reference image PSF-catalog; J2000 [deg]
   * @param sgmag1 g-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param srmag1 r-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param simag1 i-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param szmag1 z-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param sgscore1 Star/Galaxy score of closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
   * @param distpsnr1 Distance to closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
   * @param ndethist Number of spatially-coincident detections falling within 1.5 arcsec going back to beginning of survey; only detections that fell on the same field and readout-channel ID where the input candidate was observed are counted
   * @param ncovhist Number of times input candidate position fell on any field and readout-channel going back to beginning of survey
   * @param jdstarthist Earliest Julian date of epoch corresponding to ndethist [days]
   * @param jdendhist Latest Julian date of epoch corresponding to ndethist [days]
   * @param scorr Peak-pixel signal-to-noise ratio in point source matched-filtered detection image
   * @param tooflag 1 => candidate is from a Target-of-Opportunity (ToO) exposure; 0 => candidate is from a non-ToO exposure
   * @param objectidps1 Object ID of closest source from PS1 catalog; if exists within 30 arcsec
   * @param objectidps2 Object ID of second closest source from PS1 catalog; if exists within 30 arcsec
   * @param sgmag2 g-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param srmag2 r-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param simag2 i-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param szmag2 z-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param sgscore2 Star/Galaxy score of second closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
   * @param distpsnr2 Distance to second closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
   * @param objectidps3 Object ID of third closest source from PS1 catalog; if exists within 30 arcsec
   * @param sgmag3 g-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param srmag3 r-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param simag3 i-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param szmag3 z-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param sgscore3 Star/Galaxy score of third closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
   * @param distpsnr3 Distance to third closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
   * @param nmtchps Number of source matches from PS1 catalog falling within 30 arcsec
   * @param rfid Processing ID for reference image to facilitate archive retrieval
   * @param jdstartref Observation Julian date of earliest exposure used to generate reference image [days]
   * @param jdendref Observation Julian date of latest exposure used to generate reference image [days]
   * @param nframesref Number of frames (epochal images) used to generate reference image
   * @param rbversion version of RealBogus model/classifier used to assign rb quality score
   * @param dsnrms Ratio: D/stddev(D) on event position where D = difference image
   * @param ssnrms Ratio: S/stddev(S) on event position where S = image of convolution: D (x) PSF(D)
   * @param dsdiff Difference of statistics: dsnrms - ssnrms
   * @param magzpsci Magnitude zero point for photometry estimates [mag]
   * @param magzpsciunc Magnitude zero point uncertainty (in magzpsci) [mag]
   * @param magzpscirms RMS (deviation from average) in all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]
   * @param nmatches Number of PS1 photometric calibrators used to calibrate science image from science image processing
   * @param clrcoeff Color coefficient from linear fit from photometric calibration of science image
   * @param clrcounc Color coefficient uncertainty from linear fit (corresponding to clrcoeff)
   * @param zpclrcov Covariance in magzpsci and clrcoeff from science image processing [mag^2]
   * @param zpmed Magnitude zero point from median of all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]
   * @param clrmed Median color of all PS1 photometric calibrators used from science image processing [mag]: for filter (fid) = 1, 2, 3, PS1 color used = g-r, g-r, r-i respectively
   * @param clrrms RMS color (deviation from average) of all PS1 photometric calibrators used from science image processing [mag]
   * @param neargaia Distance to closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [arcsec]
   * @param neargaiabright Distance to closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [arcsec]
   * @param maggaia Gaia (G-band) magnitude of closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [mag]
   * @param maggaiabright Gaia (G-band) magnitude of closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [mag]
   * @param exptime Integration time of camera exposure [sec]
   */
  public candidate(java.lang.Double jd, java.lang.Integer fid, java.lang.Long pid, java.lang.Float diffmaglim, java.lang.CharSequence pdiffimfilename, java.lang.CharSequence programpi, java.lang.Integer programid, java.lang.Long candid, java.lang.CharSequence isdiffpos, java.lang.Long tblid, java.lang.Integer nid, java.lang.Integer rcid, java.lang.Integer field, java.lang.Float xpos, java.lang.Float ypos, java.lang.Double ra, java.lang.Double dec, java.lang.Float magpsf, java.lang.Float sigmapsf, java.lang.Float chipsf, java.lang.Float magap, java.lang.Float sigmagap, java.lang.Float distnr, java.lang.Float magnr, java.lang.Float sigmagnr, java.lang.Float chinr, java.lang.Float sharpnr, java.lang.Float sky, java.lang.Float magdiff, java.lang.Float fwhm, java.lang.Float classtar, java.lang.Float mindtoedge, java.lang.Float magfromlim, java.lang.Float seeratio, java.lang.Float aimage, java.lang.Float bimage, java.lang.Float aimagerat, java.lang.Float bimagerat, java.lang.Float elong, java.lang.Integer nneg, java.lang.Integer nbad, java.lang.Float rb, java.lang.Float ssdistnr, java.lang.Float ssmagnr, java.lang.CharSequence ssnamenr, java.lang.Float sumrat, java.lang.Float magapbig, java.lang.Float sigmagapbig, java.lang.Double ranr, java.lang.Double decnr, java.lang.Float sgmag1, java.lang.Float srmag1, java.lang.Float simag1, java.lang.Float szmag1, java.lang.Float sgscore1, java.lang.Float distpsnr1, java.lang.Integer ndethist, java.lang.Integer ncovhist, java.lang.Double jdstarthist, java.lang.Double jdendhist, java.lang.Double scorr, java.lang.Integer tooflag, java.lang.Long objectidps1, java.lang.Long objectidps2, java.lang.Float sgmag2, java.lang.Float srmag2, java.lang.Float simag2, java.lang.Float szmag2, java.lang.Float sgscore2, java.lang.Float distpsnr2, java.lang.Long objectidps3, java.lang.Float sgmag3, java.lang.Float srmag3, java.lang.Float simag3, java.lang.Float szmag3, java.lang.Float sgscore3, java.lang.Float distpsnr3, java.lang.Integer nmtchps, java.lang.Long rfid, java.lang.Double jdstartref, java.lang.Double jdendref, java.lang.Integer nframesref, java.lang.CharSequence rbversion, java.lang.Float dsnrms, java.lang.Float ssnrms, java.lang.Float dsdiff, java.lang.Float magzpsci, java.lang.Float magzpsciunc, java.lang.Float magzpscirms, java.lang.Integer nmatches, java.lang.Float clrcoeff, java.lang.Float clrcounc, java.lang.Float zpclrcov, java.lang.Float zpmed, java.lang.Float clrmed, java.lang.Float clrrms, java.lang.Float neargaia, java.lang.Float neargaiabright, java.lang.Float maggaia, java.lang.Float maggaiabright, java.lang.Float exptime) {
    this.jd = jd;
    this.fid = fid;
    this.pid = pid;
    this.diffmaglim = diffmaglim;
    this.pdiffimfilename = pdiffimfilename;
    this.programpi = programpi;
    this.programid = programid;
    this.candid = candid;
    this.isdiffpos = isdiffpos;
    this.tblid = tblid;
    this.nid = nid;
    this.rcid = rcid;
    this.field = field;
    this.xpos = xpos;
    this.ypos = ypos;
    this.ra = ra;
    this.dec = dec;
    this.magpsf = magpsf;
    this.sigmapsf = sigmapsf;
    this.chipsf = chipsf;
    this.magap = magap;
    this.sigmagap = sigmagap;
    this.distnr = distnr;
    this.magnr = magnr;
    this.sigmagnr = sigmagnr;
    this.chinr = chinr;
    this.sharpnr = sharpnr;
    this.sky = sky;
    this.magdiff = magdiff;
    this.fwhm = fwhm;
    this.classtar = classtar;
    this.mindtoedge = mindtoedge;
    this.magfromlim = magfromlim;
    this.seeratio = seeratio;
    this.aimage = aimage;
    this.bimage = bimage;
    this.aimagerat = aimagerat;
    this.bimagerat = bimagerat;
    this.elong = elong;
    this.nneg = nneg;
    this.nbad = nbad;
    this.rb = rb;
    this.ssdistnr = ssdistnr;
    this.ssmagnr = ssmagnr;
    this.ssnamenr = ssnamenr;
    this.sumrat = sumrat;
    this.magapbig = magapbig;
    this.sigmagapbig = sigmagapbig;
    this.ranr = ranr;
    this.decnr = decnr;
    this.sgmag1 = sgmag1;
    this.srmag1 = srmag1;
    this.simag1 = simag1;
    this.szmag1 = szmag1;
    this.sgscore1 = sgscore1;
    this.distpsnr1 = distpsnr1;
    this.ndethist = ndethist;
    this.ncovhist = ncovhist;
    this.jdstarthist = jdstarthist;
    this.jdendhist = jdendhist;
    this.scorr = scorr;
    this.tooflag = tooflag;
    this.objectidps1 = objectidps1;
    this.objectidps2 = objectidps2;
    this.sgmag2 = sgmag2;
    this.srmag2 = srmag2;
    this.simag2 = simag2;
    this.szmag2 = szmag2;
    this.sgscore2 = sgscore2;
    this.distpsnr2 = distpsnr2;
    this.objectidps3 = objectidps3;
    this.sgmag3 = sgmag3;
    this.srmag3 = srmag3;
    this.simag3 = simag3;
    this.szmag3 = szmag3;
    this.sgscore3 = sgscore3;
    this.distpsnr3 = distpsnr3;
    this.nmtchps = nmtchps;
    this.rfid = rfid;
    this.jdstartref = jdstartref;
    this.jdendref = jdendref;
    this.nframesref = nframesref;
    this.rbversion = rbversion;
    this.dsnrms = dsnrms;
    this.ssnrms = ssnrms;
    this.dsdiff = dsdiff;
    this.magzpsci = magzpsci;
    this.magzpsciunc = magzpsciunc;
    this.magzpscirms = magzpscirms;
    this.nmatches = nmatches;
    this.clrcoeff = clrcoeff;
    this.clrcounc = clrcounc;
    this.zpclrcov = zpclrcov;
    this.zpmed = zpmed;
    this.clrmed = clrmed;
    this.clrrms = clrrms;
    this.neargaia = neargaia;
    this.neargaiabright = neargaiabright;
    this.maggaia = maggaia;
    this.maggaiabright = maggaiabright;
    this.exptime = exptime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return jd;
    case 1: return fid;
    case 2: return pid;
    case 3: return diffmaglim;
    case 4: return pdiffimfilename;
    case 5: return programpi;
    case 6: return programid;
    case 7: return candid;
    case 8: return isdiffpos;
    case 9: return tblid;
    case 10: return nid;
    case 11: return rcid;
    case 12: return field;
    case 13: return xpos;
    case 14: return ypos;
    case 15: return ra;
    case 16: return dec;
    case 17: return magpsf;
    case 18: return sigmapsf;
    case 19: return chipsf;
    case 20: return magap;
    case 21: return sigmagap;
    case 22: return distnr;
    case 23: return magnr;
    case 24: return sigmagnr;
    case 25: return chinr;
    case 26: return sharpnr;
    case 27: return sky;
    case 28: return magdiff;
    case 29: return fwhm;
    case 30: return classtar;
    case 31: return mindtoedge;
    case 32: return magfromlim;
    case 33: return seeratio;
    case 34: return aimage;
    case 35: return bimage;
    case 36: return aimagerat;
    case 37: return bimagerat;
    case 38: return elong;
    case 39: return nneg;
    case 40: return nbad;
    case 41: return rb;
    case 42: return ssdistnr;
    case 43: return ssmagnr;
    case 44: return ssnamenr;
    case 45: return sumrat;
    case 46: return magapbig;
    case 47: return sigmagapbig;
    case 48: return ranr;
    case 49: return decnr;
    case 50: return sgmag1;
    case 51: return srmag1;
    case 52: return simag1;
    case 53: return szmag1;
    case 54: return sgscore1;
    case 55: return distpsnr1;
    case 56: return ndethist;
    case 57: return ncovhist;
    case 58: return jdstarthist;
    case 59: return jdendhist;
    case 60: return scorr;
    case 61: return tooflag;
    case 62: return objectidps1;
    case 63: return objectidps2;
    case 64: return sgmag2;
    case 65: return srmag2;
    case 66: return simag2;
    case 67: return szmag2;
    case 68: return sgscore2;
    case 69: return distpsnr2;
    case 70: return objectidps3;
    case 71: return sgmag3;
    case 72: return srmag3;
    case 73: return simag3;
    case 74: return szmag3;
    case 75: return sgscore3;
    case 76: return distpsnr3;
    case 77: return nmtchps;
    case 78: return rfid;
    case 79: return jdstartref;
    case 80: return jdendref;
    case 81: return nframesref;
    case 82: return rbversion;
    case 83: return dsnrms;
    case 84: return ssnrms;
    case 85: return dsdiff;
    case 86: return magzpsci;
    case 87: return magzpsciunc;
    case 88: return magzpscirms;
    case 89: return nmatches;
    case 90: return clrcoeff;
    case 91: return clrcounc;
    case 92: return zpclrcov;
    case 93: return zpmed;
    case 94: return clrmed;
    case 95: return clrrms;
    case 96: return neargaia;
    case 97: return neargaiabright;
    case 98: return maggaia;
    case 99: return maggaiabright;
    case 100: return exptime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: jd = (java.lang.Double)value$; break;
    case 1: fid = (java.lang.Integer)value$; break;
    case 2: pid = (java.lang.Long)value$; break;
    case 3: diffmaglim = (java.lang.Float)value$; break;
    case 4: pdiffimfilename = (java.lang.CharSequence)value$; break;
    case 5: programpi = (java.lang.CharSequence)value$; break;
    case 6: programid = (java.lang.Integer)value$; break;
    case 7: candid = (java.lang.Long)value$; break;
    case 8: isdiffpos = (java.lang.CharSequence)value$; break;
    case 9: tblid = (java.lang.Long)value$; break;
    case 10: nid = (java.lang.Integer)value$; break;
    case 11: rcid = (java.lang.Integer)value$; break;
    case 12: field = (java.lang.Integer)value$; break;
    case 13: xpos = (java.lang.Float)value$; break;
    case 14: ypos = (java.lang.Float)value$; break;
    case 15: ra = (java.lang.Double)value$; break;
    case 16: dec = (java.lang.Double)value$; break;
    case 17: magpsf = (java.lang.Float)value$; break;
    case 18: sigmapsf = (java.lang.Float)value$; break;
    case 19: chipsf = (java.lang.Float)value$; break;
    case 20: magap = (java.lang.Float)value$; break;
    case 21: sigmagap = (java.lang.Float)value$; break;
    case 22: distnr = (java.lang.Float)value$; break;
    case 23: magnr = (java.lang.Float)value$; break;
    case 24: sigmagnr = (java.lang.Float)value$; break;
    case 25: chinr = (java.lang.Float)value$; break;
    case 26: sharpnr = (java.lang.Float)value$; break;
    case 27: sky = (java.lang.Float)value$; break;
    case 28: magdiff = (java.lang.Float)value$; break;
    case 29: fwhm = (java.lang.Float)value$; break;
    case 30: classtar = (java.lang.Float)value$; break;
    case 31: mindtoedge = (java.lang.Float)value$; break;
    case 32: magfromlim = (java.lang.Float)value$; break;
    case 33: seeratio = (java.lang.Float)value$; break;
    case 34: aimage = (java.lang.Float)value$; break;
    case 35: bimage = (java.lang.Float)value$; break;
    case 36: aimagerat = (java.lang.Float)value$; break;
    case 37: bimagerat = (java.lang.Float)value$; break;
    case 38: elong = (java.lang.Float)value$; break;
    case 39: nneg = (java.lang.Integer)value$; break;
    case 40: nbad = (java.lang.Integer)value$; break;
    case 41: rb = (java.lang.Float)value$; break;
    case 42: ssdistnr = (java.lang.Float)value$; break;
    case 43: ssmagnr = (java.lang.Float)value$; break;
    case 44: ssnamenr = (java.lang.CharSequence)value$; break;
    case 45: sumrat = (java.lang.Float)value$; break;
    case 46: magapbig = (java.lang.Float)value$; break;
    case 47: sigmagapbig = (java.lang.Float)value$; break;
    case 48: ranr = (java.lang.Double)value$; break;
    case 49: decnr = (java.lang.Double)value$; break;
    case 50: sgmag1 = (java.lang.Float)value$; break;
    case 51: srmag1 = (java.lang.Float)value$; break;
    case 52: simag1 = (java.lang.Float)value$; break;
    case 53: szmag1 = (java.lang.Float)value$; break;
    case 54: sgscore1 = (java.lang.Float)value$; break;
    case 55: distpsnr1 = (java.lang.Float)value$; break;
    case 56: ndethist = (java.lang.Integer)value$; break;
    case 57: ncovhist = (java.lang.Integer)value$; break;
    case 58: jdstarthist = (java.lang.Double)value$; break;
    case 59: jdendhist = (java.lang.Double)value$; break;
    case 60: scorr = (java.lang.Double)value$; break;
    case 61: tooflag = (java.lang.Integer)value$; break;
    case 62: objectidps1 = (java.lang.Long)value$; break;
    case 63: objectidps2 = (java.lang.Long)value$; break;
    case 64: sgmag2 = (java.lang.Float)value$; break;
    case 65: srmag2 = (java.lang.Float)value$; break;
    case 66: simag2 = (java.lang.Float)value$; break;
    case 67: szmag2 = (java.lang.Float)value$; break;
    case 68: sgscore2 = (java.lang.Float)value$; break;
    case 69: distpsnr2 = (java.lang.Float)value$; break;
    case 70: objectidps3 = (java.lang.Long)value$; break;
    case 71: sgmag3 = (java.lang.Float)value$; break;
    case 72: srmag3 = (java.lang.Float)value$; break;
    case 73: simag3 = (java.lang.Float)value$; break;
    case 74: szmag3 = (java.lang.Float)value$; break;
    case 75: sgscore3 = (java.lang.Float)value$; break;
    case 76: distpsnr3 = (java.lang.Float)value$; break;
    case 77: nmtchps = (java.lang.Integer)value$; break;
    case 78: rfid = (java.lang.Long)value$; break;
    case 79: jdstartref = (java.lang.Double)value$; break;
    case 80: jdendref = (java.lang.Double)value$; break;
    case 81: nframesref = (java.lang.Integer)value$; break;
    case 82: rbversion = (java.lang.CharSequence)value$; break;
    case 83: dsnrms = (java.lang.Float)value$; break;
    case 84: ssnrms = (java.lang.Float)value$; break;
    case 85: dsdiff = (java.lang.Float)value$; break;
    case 86: magzpsci = (java.lang.Float)value$; break;
    case 87: magzpsciunc = (java.lang.Float)value$; break;
    case 88: magzpscirms = (java.lang.Float)value$; break;
    case 89: nmatches = (java.lang.Integer)value$; break;
    case 90: clrcoeff = (java.lang.Float)value$; break;
    case 91: clrcounc = (java.lang.Float)value$; break;
    case 92: zpclrcov = (java.lang.Float)value$; break;
    case 93: zpmed = (java.lang.Float)value$; break;
    case 94: clrmed = (java.lang.Float)value$; break;
    case 95: clrrms = (java.lang.Float)value$; break;
    case 96: neargaia = (java.lang.Float)value$; break;
    case 97: neargaiabright = (java.lang.Float)value$; break;
    case 98: maggaia = (java.lang.Float)value$; break;
    case 99: maggaiabright = (java.lang.Float)value$; break;
    case 100: exptime = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'jd' field.
   * @return Observation Julian date at start of exposure [days]
   */
  public java.lang.Double getJd() {
    return jd;
  }

  /**
   * Sets the value of the 'jd' field.
   * Observation Julian date at start of exposure [days]
   * @param value the value to set.
   */
  public void setJd(java.lang.Double value) {
    this.jd = value;
  }

  /**
   * Gets the value of the 'fid' field.
   * @return Filter ID (1=g; 2=R; 3=i)
   */
  public java.lang.Integer getFid() {
    return fid;
  }

  /**
   * Sets the value of the 'fid' field.
   * Filter ID (1=g; 2=R; 3=i)
   * @param value the value to set.
   */
  public void setFid(java.lang.Integer value) {
    this.fid = value;
  }

  /**
   * Gets the value of the 'pid' field.
   * @return Processing ID for science image to facilitate archive retrieval
   */
  public java.lang.Long getPid() {
    return pid;
  }

  /**
   * Sets the value of the 'pid' field.
   * Processing ID for science image to facilitate archive retrieval
   * @param value the value to set.
   */
  public void setPid(java.lang.Long value) {
    this.pid = value;
  }

  /**
   * Gets the value of the 'diffmaglim' field.
   * @return Expected 5-sigma mag limit in difference image based on global noise estimate [mag]
   */
  public java.lang.Float getDiffmaglim() {
    return diffmaglim;
  }

  /**
   * Sets the value of the 'diffmaglim' field.
   * Expected 5-sigma mag limit in difference image based on global noise estimate [mag]
   * @param value the value to set.
   */
  public void setDiffmaglim(java.lang.Float value) {
    this.diffmaglim = value;
  }

  /**
   * Gets the value of the 'pdiffimfilename' field.
   * @return filename of positive (sci minus ref) difference image
   */
  public java.lang.CharSequence getPdiffimfilename() {
    return pdiffimfilename;
  }

  /**
   * Sets the value of the 'pdiffimfilename' field.
   * filename of positive (sci minus ref) difference image
   * @param value the value to set.
   */
  public void setPdiffimfilename(java.lang.CharSequence value) {
    this.pdiffimfilename = value;
  }

  /**
   * Gets the value of the 'programpi' field.
   * @return Principal investigator attached to program ID
   */
  public java.lang.CharSequence getProgrampi() {
    return programpi;
  }

  /**
   * Sets the value of the 'programpi' field.
   * Principal investigator attached to program ID
   * @param value the value to set.
   */
  public void setProgrampi(java.lang.CharSequence value) {
    this.programpi = value;
  }

  /**
   * Gets the value of the 'programid' field.
   * @return Program ID: encodes either public, collab, or caltech mode
   */
  public java.lang.Integer getProgramid() {
    return programid;
  }

  /**
   * Sets the value of the 'programid' field.
   * Program ID: encodes either public, collab, or caltech mode
   * @param value the value to set.
   */
  public void setProgramid(java.lang.Integer value) {
    this.programid = value;
  }

  /**
   * Gets the value of the 'candid' field.
   * @return Candidate ID from operations DB
   */
  public java.lang.Long getCandid() {
    return candid;
  }

  /**
   * Sets the value of the 'candid' field.
   * Candidate ID from operations DB
   * @param value the value to set.
   */
  public void setCandid(java.lang.Long value) {
    this.candid = value;
  }

  /**
   * Gets the value of the 'isdiffpos' field.
   * @return t or 1 => candidate is from positive (sci minus ref) subtraction; f or 0 => candidate is from negative (ref minus sci) subtraction
   */
  public java.lang.CharSequence getIsdiffpos() {
    return isdiffpos;
  }

  /**
   * Sets the value of the 'isdiffpos' field.
   * t or 1 => candidate is from positive (sci minus ref) subtraction; f or 0 => candidate is from negative (ref minus sci) subtraction
   * @param value the value to set.
   */
  public void setIsdiffpos(java.lang.CharSequence value) {
    this.isdiffpos = value;
  }

  /**
   * Gets the value of the 'tblid' field.
   * @return Internal pipeline table extraction ID
   */
  public java.lang.Long getTblid() {
    return tblid;
  }

  /**
   * Sets the value of the 'tblid' field.
   * Internal pipeline table extraction ID
   * @param value the value to set.
   */
  public void setTblid(java.lang.Long value) {
    this.tblid = value;
  }

  /**
   * Gets the value of the 'nid' field.
   * @return Night ID
   */
  public java.lang.Integer getNid() {
    return nid;
  }

  /**
   * Sets the value of the 'nid' field.
   * Night ID
   * @param value the value to set.
   */
  public void setNid(java.lang.Integer value) {
    this.nid = value;
  }

  /**
   * Gets the value of the 'rcid' field.
   * @return Readout channel ID [00 .. 63]
   */
  public java.lang.Integer getRcid() {
    return rcid;
  }

  /**
   * Sets the value of the 'rcid' field.
   * Readout channel ID [00 .. 63]
   * @param value the value to set.
   */
  public void setRcid(java.lang.Integer value) {
    this.rcid = value;
  }

  /**
   * Gets the value of the 'field' field.
   * @return ZTF field ID
   */
  public java.lang.Integer getField() {
    return field;
  }

  /**
   * Sets the value of the 'field' field.
   * ZTF field ID
   * @param value the value to set.
   */
  public void setField(java.lang.Integer value) {
    this.field = value;
  }

  /**
   * Gets the value of the 'xpos' field.
   * @return x-image position of candidate [pixels]
   */
  public java.lang.Float getXpos() {
    return xpos;
  }

  /**
   * Sets the value of the 'xpos' field.
   * x-image position of candidate [pixels]
   * @param value the value to set.
   */
  public void setXpos(java.lang.Float value) {
    this.xpos = value;
  }

  /**
   * Gets the value of the 'ypos' field.
   * @return y-image position of candidate [pixels]
   */
  public java.lang.Float getYpos() {
    return ypos;
  }

  /**
   * Sets the value of the 'ypos' field.
   * y-image position of candidate [pixels]
   * @param value the value to set.
   */
  public void setYpos(java.lang.Float value) {
    this.ypos = value;
  }

  /**
   * Gets the value of the 'ra' field.
   * @return Right Ascension of candidate; J2000 [deg]
   */
  public java.lang.Double getRa() {
    return ra;
  }

  /**
   * Sets the value of the 'ra' field.
   * Right Ascension of candidate; J2000 [deg]
   * @param value the value to set.
   */
  public void setRa(java.lang.Double value) {
    this.ra = value;
  }

  /**
   * Gets the value of the 'dec' field.
   * @return Declination of candidate; J2000 [deg]
   */
  public java.lang.Double getDec() {
    return dec;
  }

  /**
   * Sets the value of the 'dec' field.
   * Declination of candidate; J2000 [deg]
   * @param value the value to set.
   */
  public void setDec(java.lang.Double value) {
    this.dec = value;
  }

  /**
   * Gets the value of the 'magpsf' field.
   * @return Magnitude from PSF-fit photometry [mag]
   */
  public java.lang.Float getMagpsf() {
    return magpsf;
  }

  /**
   * Sets the value of the 'magpsf' field.
   * Magnitude from PSF-fit photometry [mag]
   * @param value the value to set.
   */
  public void setMagpsf(java.lang.Float value) {
    this.magpsf = value;
  }

  /**
   * Gets the value of the 'sigmapsf' field.
   * @return 1-sigma uncertainty in magpsf [mag]
   */
  public java.lang.Float getSigmapsf() {
    return sigmapsf;
  }

  /**
   * Sets the value of the 'sigmapsf' field.
   * 1-sigma uncertainty in magpsf [mag]
   * @param value the value to set.
   */
  public void setSigmapsf(java.lang.Float value) {
    this.sigmapsf = value;
  }

  /**
   * Gets the value of the 'chipsf' field.
   * @return Reduced chi-square for PSF-fit
   */
  public java.lang.Float getChipsf() {
    return chipsf;
  }

  /**
   * Sets the value of the 'chipsf' field.
   * Reduced chi-square for PSF-fit
   * @param value the value to set.
   */
  public void setChipsf(java.lang.Float value) {
    this.chipsf = value;
  }

  /**
   * Gets the value of the 'magap' field.
   * @return Aperture mag using 14 pixel diameter aperture [mag]
   */
  public java.lang.Float getMagap() {
    return magap;
  }

  /**
   * Sets the value of the 'magap' field.
   * Aperture mag using 14 pixel diameter aperture [mag]
   * @param value the value to set.
   */
  public void setMagap(java.lang.Float value) {
    this.magap = value;
  }

  /**
   * Gets the value of the 'sigmagap' field.
   * @return 1-sigma uncertainty in magap [mag]
   */
  public java.lang.Float getSigmagap() {
    return sigmagap;
  }

  /**
   * Sets the value of the 'sigmagap' field.
   * 1-sigma uncertainty in magap [mag]
   * @param value the value to set.
   */
  public void setSigmagap(java.lang.Float value) {
    this.sigmagap = value;
  }

  /**
   * Gets the value of the 'distnr' field.
   * @return distance to nearest source in reference image PSF-catalog [pixels]
   */
  public java.lang.Float getDistnr() {
    return distnr;
  }

  /**
   * Sets the value of the 'distnr' field.
   * distance to nearest source in reference image PSF-catalog [pixels]
   * @param value the value to set.
   */
  public void setDistnr(java.lang.Float value) {
    this.distnr = value;
  }

  /**
   * Gets the value of the 'magnr' field.
   * @return magnitude of nearest source in reference image PSF-catalog [mag]
   */
  public java.lang.Float getMagnr() {
    return magnr;
  }

  /**
   * Sets the value of the 'magnr' field.
   * magnitude of nearest source in reference image PSF-catalog [mag]
   * @param value the value to set.
   */
  public void setMagnr(java.lang.Float value) {
    this.magnr = value;
  }

  /**
   * Gets the value of the 'sigmagnr' field.
   * @return 1-sigma uncertainty in magnr [mag]
   */
  public java.lang.Float getSigmagnr() {
    return sigmagnr;
  }

  /**
   * Sets the value of the 'sigmagnr' field.
   * 1-sigma uncertainty in magnr [mag]
   * @param value the value to set.
   */
  public void setSigmagnr(java.lang.Float value) {
    this.sigmagnr = value;
  }

  /**
   * Gets the value of the 'chinr' field.
   * @return DAOPhot chi parameter of nearest source in reference image PSF-catalog
   */
  public java.lang.Float getChinr() {
    return chinr;
  }

  /**
   * Sets the value of the 'chinr' field.
   * DAOPhot chi parameter of nearest source in reference image PSF-catalog
   * @param value the value to set.
   */
  public void setChinr(java.lang.Float value) {
    this.chinr = value;
  }

  /**
   * Gets the value of the 'sharpnr' field.
   * @return DAOPhot sharp parameter of nearest source in reference image PSF-catalog
   */
  public java.lang.Float getSharpnr() {
    return sharpnr;
  }

  /**
   * Sets the value of the 'sharpnr' field.
   * DAOPhot sharp parameter of nearest source in reference image PSF-catalog
   * @param value the value to set.
   */
  public void setSharpnr(java.lang.Float value) {
    this.sharpnr = value;
  }

  /**
   * Gets the value of the 'sky' field.
   * @return Local sky background estimate [DN]
   */
  public java.lang.Float getSky() {
    return sky;
  }

  /**
   * Sets the value of the 'sky' field.
   * Local sky background estimate [DN]
   * @param value the value to set.
   */
  public void setSky(java.lang.Float value) {
    this.sky = value;
  }

  /**
   * Gets the value of the 'magdiff' field.
   * @return Difference: magap - magpsf [mag]
   */
  public java.lang.Float getMagdiff() {
    return magdiff;
  }

  /**
   * Sets the value of the 'magdiff' field.
   * Difference: magap - magpsf [mag]
   * @param value the value to set.
   */
  public void setMagdiff(java.lang.Float value) {
    this.magdiff = value;
  }

  /**
   * Gets the value of the 'fwhm' field.
   * @return Full Width Half Max assuming a Gaussian core, from SExtractor [pixels]
   */
  public java.lang.Float getFwhm() {
    return fwhm;
  }

  /**
   * Sets the value of the 'fwhm' field.
   * Full Width Half Max assuming a Gaussian core, from SExtractor [pixels]
   * @param value the value to set.
   */
  public void setFwhm(java.lang.Float value) {
    this.fwhm = value;
  }

  /**
   * Gets the value of the 'classtar' field.
   * @return Star/Galaxy classification score from SExtractor
   */
  public java.lang.Float getClasstar() {
    return classtar;
  }

  /**
   * Sets the value of the 'classtar' field.
   * Star/Galaxy classification score from SExtractor
   * @param value the value to set.
   */
  public void setClasstar(java.lang.Float value) {
    this.classtar = value;
  }

  /**
   * Gets the value of the 'mindtoedge' field.
   * @return Distance to nearest edge in image [pixels]
   */
  public java.lang.Float getMindtoedge() {
    return mindtoedge;
  }

  /**
   * Sets the value of the 'mindtoedge' field.
   * Distance to nearest edge in image [pixels]
   * @param value the value to set.
   */
  public void setMindtoedge(java.lang.Float value) {
    this.mindtoedge = value;
  }

  /**
   * Gets the value of the 'magfromlim' field.
   * @return Difference: diffmaglim - magap [mag]
   */
  public java.lang.Float getMagfromlim() {
    return magfromlim;
  }

  /**
   * Sets the value of the 'magfromlim' field.
   * Difference: diffmaglim - magap [mag]
   * @param value the value to set.
   */
  public void setMagfromlim(java.lang.Float value) {
    this.magfromlim = value;
  }

  /**
   * Gets the value of the 'seeratio' field.
   * @return Ratio: difffwhm / fwhm
   */
  public java.lang.Float getSeeratio() {
    return seeratio;
  }

  /**
   * Sets the value of the 'seeratio' field.
   * Ratio: difffwhm / fwhm
   * @param value the value to set.
   */
  public void setSeeratio(java.lang.Float value) {
    this.seeratio = value;
  }

  /**
   * Gets the value of the 'aimage' field.
   * @return Windowed profile RMS afloat major axis from SExtractor [pixels]
   */
  public java.lang.Float getAimage() {
    return aimage;
  }

  /**
   * Sets the value of the 'aimage' field.
   * Windowed profile RMS afloat major axis from SExtractor [pixels]
   * @param value the value to set.
   */
  public void setAimage(java.lang.Float value) {
    this.aimage = value;
  }

  /**
   * Gets the value of the 'bimage' field.
   * @return Windowed profile RMS afloat minor axis from SExtractor [pixels]
   */
  public java.lang.Float getBimage() {
    return bimage;
  }

  /**
   * Sets the value of the 'bimage' field.
   * Windowed profile RMS afloat minor axis from SExtractor [pixels]
   * @param value the value to set.
   */
  public void setBimage(java.lang.Float value) {
    this.bimage = value;
  }

  /**
   * Gets the value of the 'aimagerat' field.
   * @return Ratio: aimage / fwhm
   */
  public java.lang.Float getAimagerat() {
    return aimagerat;
  }

  /**
   * Sets the value of the 'aimagerat' field.
   * Ratio: aimage / fwhm
   * @param value the value to set.
   */
  public void setAimagerat(java.lang.Float value) {
    this.aimagerat = value;
  }

  /**
   * Gets the value of the 'bimagerat' field.
   * @return Ratio: bimage / fwhm
   */
  public java.lang.Float getBimagerat() {
    return bimagerat;
  }

  /**
   * Sets the value of the 'bimagerat' field.
   * Ratio: bimage / fwhm
   * @param value the value to set.
   */
  public void setBimagerat(java.lang.Float value) {
    this.bimagerat = value;
  }

  /**
   * Gets the value of the 'elong' field.
   * @return Ratio: aimage / bimage
   */
  public java.lang.Float getElong() {
    return elong;
  }

  /**
   * Sets the value of the 'elong' field.
   * Ratio: aimage / bimage
   * @param value the value to set.
   */
  public void setElong(java.lang.Float value) {
    this.elong = value;
  }

  /**
   * Gets the value of the 'nneg' field.
   * @return number of negative pixels in a 5 x 5 pixel stamp
   */
  public java.lang.Integer getNneg() {
    return nneg;
  }

  /**
   * Sets the value of the 'nneg' field.
   * number of negative pixels in a 5 x 5 pixel stamp
   * @param value the value to set.
   */
  public void setNneg(java.lang.Integer value) {
    this.nneg = value;
  }

  /**
   * Gets the value of the 'nbad' field.
   * @return number of prior-tagged bad pixels in a 5 x 5 pixel stamp
   */
  public java.lang.Integer getNbad() {
    return nbad;
  }

  /**
   * Sets the value of the 'nbad' field.
   * number of prior-tagged bad pixels in a 5 x 5 pixel stamp
   * @param value the value to set.
   */
  public void setNbad(java.lang.Integer value) {
    this.nbad = value;
  }

  /**
   * Gets the value of the 'rb' field.
   * @return RealBogus quality score; range is 0 to 1 where closer to 1 is more reliable
   */
  public java.lang.Float getRb() {
    return rb;
  }

  /**
   * Sets the value of the 'rb' field.
   * RealBogus quality score; range is 0 to 1 where closer to 1 is more reliable
   * @param value the value to set.
   */
  public void setRb(java.lang.Float value) {
    this.rb = value;
  }

  /**
   * Gets the value of the 'ssdistnr' field.
   * @return distance to nearest known solar system object if exists within 30 arcsec [arcsec]
   */
  public java.lang.Float getSsdistnr() {
    return ssdistnr;
  }

  /**
   * Sets the value of the 'ssdistnr' field.
   * distance to nearest known solar system object if exists within 30 arcsec [arcsec]
   * @param value the value to set.
   */
  public void setSsdistnr(java.lang.Float value) {
    this.ssdistnr = value;
  }

  /**
   * Gets the value of the 'ssmagnr' field.
   * @return magnitude of nearest known solar system object if exists within 30 arcsec (usually V-band from MPC archive) [mag]
   */
  public java.lang.Float getSsmagnr() {
    return ssmagnr;
  }

  /**
   * Sets the value of the 'ssmagnr' field.
   * magnitude of nearest known solar system object if exists within 30 arcsec (usually V-band from MPC archive) [mag]
   * @param value the value to set.
   */
  public void setSsmagnr(java.lang.Float value) {
    this.ssmagnr = value;
  }

  /**
   * Gets the value of the 'ssnamenr' field.
   * @return name of nearest known solar system object if exists within 30 arcsec (from MPC archive)
   */
  public java.lang.CharSequence getSsnamenr() {
    return ssnamenr;
  }

  /**
   * Sets the value of the 'ssnamenr' field.
   * name of nearest known solar system object if exists within 30 arcsec (from MPC archive)
   * @param value the value to set.
   */
  public void setSsnamenr(java.lang.CharSequence value) {
    this.ssnamenr = value;
  }

  /**
   * Gets the value of the 'sumrat' field.
   * @return Ratio: sum(pixels) / sum(|pixels|) in a 5 x 5 pixel stamp where stamp is first median-filtered to mitigate outliers
   */
  public java.lang.Float getSumrat() {
    return sumrat;
  }

  /**
   * Sets the value of the 'sumrat' field.
   * Ratio: sum(pixels) / sum(|pixels|) in a 5 x 5 pixel stamp where stamp is first median-filtered to mitigate outliers
   * @param value the value to set.
   */
  public void setSumrat(java.lang.Float value) {
    this.sumrat = value;
  }

  /**
   * Gets the value of the 'magapbig' field.
   * @return Aperture mag using 18 pixel diameter aperture [mag]
   */
  public java.lang.Float getMagapbig() {
    return magapbig;
  }

  /**
   * Sets the value of the 'magapbig' field.
   * Aperture mag using 18 pixel diameter aperture [mag]
   * @param value the value to set.
   */
  public void setMagapbig(java.lang.Float value) {
    this.magapbig = value;
  }

  /**
   * Gets the value of the 'sigmagapbig' field.
   * @return 1-sigma uncertainty in magapbig [mag]
   */
  public java.lang.Float getSigmagapbig() {
    return sigmagapbig;
  }

  /**
   * Sets the value of the 'sigmagapbig' field.
   * 1-sigma uncertainty in magapbig [mag]
   * @param value the value to set.
   */
  public void setSigmagapbig(java.lang.Float value) {
    this.sigmagapbig = value;
  }

  /**
   * Gets the value of the 'ranr' field.
   * @return Right Ascension of nearest source in reference image PSF-catalog; J2000 [deg]
   */
  public java.lang.Double getRanr() {
    return ranr;
  }

  /**
   * Sets the value of the 'ranr' field.
   * Right Ascension of nearest source in reference image PSF-catalog; J2000 [deg]
   * @param value the value to set.
   */
  public void setRanr(java.lang.Double value) {
    this.ranr = value;
  }

  /**
   * Gets the value of the 'decnr' field.
   * @return Declination of nearest source in reference image PSF-catalog; J2000 [deg]
   */
  public java.lang.Double getDecnr() {
    return decnr;
  }

  /**
   * Sets the value of the 'decnr' field.
   * Declination of nearest source in reference image PSF-catalog; J2000 [deg]
   * @param value the value to set.
   */
  public void setDecnr(java.lang.Double value) {
    this.decnr = value;
  }

  /**
   * Gets the value of the 'sgmag1' field.
   * @return g-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
   */
  public java.lang.Float getSgmag1() {
    return sgmag1;
  }

  /**
   * Sets the value of the 'sgmag1' field.
   * g-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param value the value to set.
   */
  public void setSgmag1(java.lang.Float value) {
    this.sgmag1 = value;
  }

  /**
   * Gets the value of the 'srmag1' field.
   * @return r-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
   */
  public java.lang.Float getSrmag1() {
    return srmag1;
  }

  /**
   * Sets the value of the 'srmag1' field.
   * r-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param value the value to set.
   */
  public void setSrmag1(java.lang.Float value) {
    this.srmag1 = value;
  }

  /**
   * Gets the value of the 'simag1' field.
   * @return i-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
   */
  public java.lang.Float getSimag1() {
    return simag1;
  }

  /**
   * Sets the value of the 'simag1' field.
   * i-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param value the value to set.
   */
  public void setSimag1(java.lang.Float value) {
    this.simag1 = value;
  }

  /**
   * Gets the value of the 'szmag1' field.
   * @return z-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
   */
  public java.lang.Float getSzmag1() {
    return szmag1;
  }

  /**
   * Sets the value of the 'szmag1' field.
   * z-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param value the value to set.
   */
  public void setSzmag1(java.lang.Float value) {
    this.szmag1 = value;
  }

  /**
   * Gets the value of the 'sgscore1' field.
   * @return Star/Galaxy score of closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
   */
  public java.lang.Float getSgscore1() {
    return sgscore1;
  }

  /**
   * Sets the value of the 'sgscore1' field.
   * Star/Galaxy score of closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
   * @param value the value to set.
   */
  public void setSgscore1(java.lang.Float value) {
    this.sgscore1 = value;
  }

  /**
   * Gets the value of the 'distpsnr1' field.
   * @return Distance to closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
   */
  public java.lang.Float getDistpsnr1() {
    return distpsnr1;
  }

  /**
   * Sets the value of the 'distpsnr1' field.
   * Distance to closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
   * @param value the value to set.
   */
  public void setDistpsnr1(java.lang.Float value) {
    this.distpsnr1 = value;
  }

  /**
   * Gets the value of the 'ndethist' field.
   * @return Number of spatially-coincident detections falling within 1.5 arcsec going back to beginning of survey; only detections that fell on the same field and readout-channel ID where the input candidate was observed are counted
   */
  public java.lang.Integer getNdethist() {
    return ndethist;
  }

  /**
   * Sets the value of the 'ndethist' field.
   * Number of spatially-coincident detections falling within 1.5 arcsec going back to beginning of survey; only detections that fell on the same field and readout-channel ID where the input candidate was observed are counted
   * @param value the value to set.
   */
  public void setNdethist(java.lang.Integer value) {
    this.ndethist = value;
  }

  /**
   * Gets the value of the 'ncovhist' field.
   * @return Number of times input candidate position fell on any field and readout-channel going back to beginning of survey
   */
  public java.lang.Integer getNcovhist() {
    return ncovhist;
  }

  /**
   * Sets the value of the 'ncovhist' field.
   * Number of times input candidate position fell on any field and readout-channel going back to beginning of survey
   * @param value the value to set.
   */
  public void setNcovhist(java.lang.Integer value) {
    this.ncovhist = value;
  }

  /**
   * Gets the value of the 'jdstarthist' field.
   * @return Earliest Julian date of epoch corresponding to ndethist [days]
   */
  public java.lang.Double getJdstarthist() {
    return jdstarthist;
  }

  /**
   * Sets the value of the 'jdstarthist' field.
   * Earliest Julian date of epoch corresponding to ndethist [days]
   * @param value the value to set.
   */
  public void setJdstarthist(java.lang.Double value) {
    this.jdstarthist = value;
  }

  /**
   * Gets the value of the 'jdendhist' field.
   * @return Latest Julian date of epoch corresponding to ndethist [days]
   */
  public java.lang.Double getJdendhist() {
    return jdendhist;
  }

  /**
   * Sets the value of the 'jdendhist' field.
   * Latest Julian date of epoch corresponding to ndethist [days]
   * @param value the value to set.
   */
  public void setJdendhist(java.lang.Double value) {
    this.jdendhist = value;
  }

  /**
   * Gets the value of the 'scorr' field.
   * @return Peak-pixel signal-to-noise ratio in point source matched-filtered detection image
   */
  public java.lang.Double getScorr() {
    return scorr;
  }

  /**
   * Sets the value of the 'scorr' field.
   * Peak-pixel signal-to-noise ratio in point source matched-filtered detection image
   * @param value the value to set.
   */
  public void setScorr(java.lang.Double value) {
    this.scorr = value;
  }

  /**
   * Gets the value of the 'tooflag' field.
   * @return 1 => candidate is from a Target-of-Opportunity (ToO) exposure; 0 => candidate is from a non-ToO exposure
   */
  public java.lang.Integer getTooflag() {
    return tooflag;
  }

  /**
   * Sets the value of the 'tooflag' field.
   * 1 => candidate is from a Target-of-Opportunity (ToO) exposure; 0 => candidate is from a non-ToO exposure
   * @param value the value to set.
   */
  public void setTooflag(java.lang.Integer value) {
    this.tooflag = value;
  }

  /**
   * Gets the value of the 'objectidps1' field.
   * @return Object ID of closest source from PS1 catalog; if exists within 30 arcsec
   */
  public java.lang.Long getObjectidps1() {
    return objectidps1;
  }

  /**
   * Sets the value of the 'objectidps1' field.
   * Object ID of closest source from PS1 catalog; if exists within 30 arcsec
   * @param value the value to set.
   */
  public void setObjectidps1(java.lang.Long value) {
    this.objectidps1 = value;
  }

  /**
   * Gets the value of the 'objectidps2' field.
   * @return Object ID of second closest source from PS1 catalog; if exists within 30 arcsec
   */
  public java.lang.Long getObjectidps2() {
    return objectidps2;
  }

  /**
   * Sets the value of the 'objectidps2' field.
   * Object ID of second closest source from PS1 catalog; if exists within 30 arcsec
   * @param value the value to set.
   */
  public void setObjectidps2(java.lang.Long value) {
    this.objectidps2 = value;
  }

  /**
   * Gets the value of the 'sgmag2' field.
   * @return g-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
   */
  public java.lang.Float getSgmag2() {
    return sgmag2;
  }

  /**
   * Sets the value of the 'sgmag2' field.
   * g-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param value the value to set.
   */
  public void setSgmag2(java.lang.Float value) {
    this.sgmag2 = value;
  }

  /**
   * Gets the value of the 'srmag2' field.
   * @return r-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
   */
  public java.lang.Float getSrmag2() {
    return srmag2;
  }

  /**
   * Sets the value of the 'srmag2' field.
   * r-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param value the value to set.
   */
  public void setSrmag2(java.lang.Float value) {
    this.srmag2 = value;
  }

  /**
   * Gets the value of the 'simag2' field.
   * @return i-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
   */
  public java.lang.Float getSimag2() {
    return simag2;
  }

  /**
   * Sets the value of the 'simag2' field.
   * i-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param value the value to set.
   */
  public void setSimag2(java.lang.Float value) {
    this.simag2 = value;
  }

  /**
   * Gets the value of the 'szmag2' field.
   * @return z-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
   */
  public java.lang.Float getSzmag2() {
    return szmag2;
  }

  /**
   * Sets the value of the 'szmag2' field.
   * z-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param value the value to set.
   */
  public void setSzmag2(java.lang.Float value) {
    this.szmag2 = value;
  }

  /**
   * Gets the value of the 'sgscore2' field.
   * @return Star/Galaxy score of second closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
   */
  public java.lang.Float getSgscore2() {
    return sgscore2;
  }

  /**
   * Sets the value of the 'sgscore2' field.
   * Star/Galaxy score of second closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
   * @param value the value to set.
   */
  public void setSgscore2(java.lang.Float value) {
    this.sgscore2 = value;
  }

  /**
   * Gets the value of the 'distpsnr2' field.
   * @return Distance to second closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
   */
  public java.lang.Float getDistpsnr2() {
    return distpsnr2;
  }

  /**
   * Sets the value of the 'distpsnr2' field.
   * Distance to second closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
   * @param value the value to set.
   */
  public void setDistpsnr2(java.lang.Float value) {
    this.distpsnr2 = value;
  }

  /**
   * Gets the value of the 'objectidps3' field.
   * @return Object ID of third closest source from PS1 catalog; if exists within 30 arcsec
   */
  public java.lang.Long getObjectidps3() {
    return objectidps3;
  }

  /**
   * Sets the value of the 'objectidps3' field.
   * Object ID of third closest source from PS1 catalog; if exists within 30 arcsec
   * @param value the value to set.
   */
  public void setObjectidps3(java.lang.Long value) {
    this.objectidps3 = value;
  }

  /**
   * Gets the value of the 'sgmag3' field.
   * @return g-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
   */
  public java.lang.Float getSgmag3() {
    return sgmag3;
  }

  /**
   * Sets the value of the 'sgmag3' field.
   * g-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param value the value to set.
   */
  public void setSgmag3(java.lang.Float value) {
    this.sgmag3 = value;
  }

  /**
   * Gets the value of the 'srmag3' field.
   * @return r-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
   */
  public java.lang.Float getSrmag3() {
    return srmag3;
  }

  /**
   * Sets the value of the 'srmag3' field.
   * r-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param value the value to set.
   */
  public void setSrmag3(java.lang.Float value) {
    this.srmag3 = value;
  }

  /**
   * Gets the value of the 'simag3' field.
   * @return i-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
   */
  public java.lang.Float getSimag3() {
    return simag3;
  }

  /**
   * Sets the value of the 'simag3' field.
   * i-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param value the value to set.
   */
  public void setSimag3(java.lang.Float value) {
    this.simag3 = value;
  }

  /**
   * Gets the value of the 'szmag3' field.
   * @return z-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
   */
  public java.lang.Float getSzmag3() {
    return szmag3;
  }

  /**
   * Sets the value of the 'szmag3' field.
   * z-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
   * @param value the value to set.
   */
  public void setSzmag3(java.lang.Float value) {
    this.szmag3 = value;
  }

  /**
   * Gets the value of the 'sgscore3' field.
   * @return Star/Galaxy score of third closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
   */
  public java.lang.Float getSgscore3() {
    return sgscore3;
  }

  /**
   * Sets the value of the 'sgscore3' field.
   * Star/Galaxy score of third closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
   * @param value the value to set.
   */
  public void setSgscore3(java.lang.Float value) {
    this.sgscore3 = value;
  }

  /**
   * Gets the value of the 'distpsnr3' field.
   * @return Distance to third closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
   */
  public java.lang.Float getDistpsnr3() {
    return distpsnr3;
  }

  /**
   * Sets the value of the 'distpsnr3' field.
   * Distance to third closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
   * @param value the value to set.
   */
  public void setDistpsnr3(java.lang.Float value) {
    this.distpsnr3 = value;
  }

  /**
   * Gets the value of the 'nmtchps' field.
   * @return Number of source matches from PS1 catalog falling within 30 arcsec
   */
  public java.lang.Integer getNmtchps() {
    return nmtchps;
  }

  /**
   * Sets the value of the 'nmtchps' field.
   * Number of source matches from PS1 catalog falling within 30 arcsec
   * @param value the value to set.
   */
  public void setNmtchps(java.lang.Integer value) {
    this.nmtchps = value;
  }

  /**
   * Gets the value of the 'rfid' field.
   * @return Processing ID for reference image to facilitate archive retrieval
   */
  public java.lang.Long getRfid() {
    return rfid;
  }

  /**
   * Sets the value of the 'rfid' field.
   * Processing ID for reference image to facilitate archive retrieval
   * @param value the value to set.
   */
  public void setRfid(java.lang.Long value) {
    this.rfid = value;
  }

  /**
   * Gets the value of the 'jdstartref' field.
   * @return Observation Julian date of earliest exposure used to generate reference image [days]
   */
  public java.lang.Double getJdstartref() {
    return jdstartref;
  }

  /**
   * Sets the value of the 'jdstartref' field.
   * Observation Julian date of earliest exposure used to generate reference image [days]
   * @param value the value to set.
   */
  public void setJdstartref(java.lang.Double value) {
    this.jdstartref = value;
  }

  /**
   * Gets the value of the 'jdendref' field.
   * @return Observation Julian date of latest exposure used to generate reference image [days]
   */
  public java.lang.Double getJdendref() {
    return jdendref;
  }

  /**
   * Sets the value of the 'jdendref' field.
   * Observation Julian date of latest exposure used to generate reference image [days]
   * @param value the value to set.
   */
  public void setJdendref(java.lang.Double value) {
    this.jdendref = value;
  }

  /**
   * Gets the value of the 'nframesref' field.
   * @return Number of frames (epochal images) used to generate reference image
   */
  public java.lang.Integer getNframesref() {
    return nframesref;
  }

  /**
   * Sets the value of the 'nframesref' field.
   * Number of frames (epochal images) used to generate reference image
   * @param value the value to set.
   */
  public void setNframesref(java.lang.Integer value) {
    this.nframesref = value;
  }

  /**
   * Gets the value of the 'rbversion' field.
   * @return version of RealBogus model/classifier used to assign rb quality score
   */
  public java.lang.CharSequence getRbversion() {
    return rbversion;
  }

  /**
   * Sets the value of the 'rbversion' field.
   * version of RealBogus model/classifier used to assign rb quality score
   * @param value the value to set.
   */
  public void setRbversion(java.lang.CharSequence value) {
    this.rbversion = value;
  }

  /**
   * Gets the value of the 'dsnrms' field.
   * @return Ratio: D/stddev(D) on event position where D = difference image
   */
  public java.lang.Float getDsnrms() {
    return dsnrms;
  }

  /**
   * Sets the value of the 'dsnrms' field.
   * Ratio: D/stddev(D) on event position where D = difference image
   * @param value the value to set.
   */
  public void setDsnrms(java.lang.Float value) {
    this.dsnrms = value;
  }

  /**
   * Gets the value of the 'ssnrms' field.
   * @return Ratio: S/stddev(S) on event position where S = image of convolution: D (x) PSF(D)
   */
  public java.lang.Float getSsnrms() {
    return ssnrms;
  }

  /**
   * Sets the value of the 'ssnrms' field.
   * Ratio: S/stddev(S) on event position where S = image of convolution: D (x) PSF(D)
   * @param value the value to set.
   */
  public void setSsnrms(java.lang.Float value) {
    this.ssnrms = value;
  }

  /**
   * Gets the value of the 'dsdiff' field.
   * @return Difference of statistics: dsnrms - ssnrms
   */
  public java.lang.Float getDsdiff() {
    return dsdiff;
  }

  /**
   * Sets the value of the 'dsdiff' field.
   * Difference of statistics: dsnrms - ssnrms
   * @param value the value to set.
   */
  public void setDsdiff(java.lang.Float value) {
    this.dsdiff = value;
  }

  /**
   * Gets the value of the 'magzpsci' field.
   * @return Magnitude zero point for photometry estimates [mag]
   */
  public java.lang.Float getMagzpsci() {
    return magzpsci;
  }

  /**
   * Sets the value of the 'magzpsci' field.
   * Magnitude zero point for photometry estimates [mag]
   * @param value the value to set.
   */
  public void setMagzpsci(java.lang.Float value) {
    this.magzpsci = value;
  }

  /**
   * Gets the value of the 'magzpsciunc' field.
   * @return Magnitude zero point uncertainty (in magzpsci) [mag]
   */
  public java.lang.Float getMagzpsciunc() {
    return magzpsciunc;
  }

  /**
   * Sets the value of the 'magzpsciunc' field.
   * Magnitude zero point uncertainty (in magzpsci) [mag]
   * @param value the value to set.
   */
  public void setMagzpsciunc(java.lang.Float value) {
    this.magzpsciunc = value;
  }

  /**
   * Gets the value of the 'magzpscirms' field.
   * @return RMS (deviation from average) in all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]
   */
  public java.lang.Float getMagzpscirms() {
    return magzpscirms;
  }

  /**
   * Sets the value of the 'magzpscirms' field.
   * RMS (deviation from average) in all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]
   * @param value the value to set.
   */
  public void setMagzpscirms(java.lang.Float value) {
    this.magzpscirms = value;
  }

  /**
   * Gets the value of the 'nmatches' field.
   * @return Number of PS1 photometric calibrators used to calibrate science image from science image processing
   */
  public java.lang.Integer getNmatches() {
    return nmatches;
  }

  /**
   * Sets the value of the 'nmatches' field.
   * Number of PS1 photometric calibrators used to calibrate science image from science image processing
   * @param value the value to set.
   */
  public void setNmatches(java.lang.Integer value) {
    this.nmatches = value;
  }

  /**
   * Gets the value of the 'clrcoeff' field.
   * @return Color coefficient from linear fit from photometric calibration of science image
   */
  public java.lang.Float getClrcoeff() {
    return clrcoeff;
  }

  /**
   * Sets the value of the 'clrcoeff' field.
   * Color coefficient from linear fit from photometric calibration of science image
   * @param value the value to set.
   */
  public void setClrcoeff(java.lang.Float value) {
    this.clrcoeff = value;
  }

  /**
   * Gets the value of the 'clrcounc' field.
   * @return Color coefficient uncertainty from linear fit (corresponding to clrcoeff)
   */
  public java.lang.Float getClrcounc() {
    return clrcounc;
  }

  /**
   * Sets the value of the 'clrcounc' field.
   * Color coefficient uncertainty from linear fit (corresponding to clrcoeff)
   * @param value the value to set.
   */
  public void setClrcounc(java.lang.Float value) {
    this.clrcounc = value;
  }

  /**
   * Gets the value of the 'zpclrcov' field.
   * @return Covariance in magzpsci and clrcoeff from science image processing [mag^2]
   */
  public java.lang.Float getZpclrcov() {
    return zpclrcov;
  }

  /**
   * Sets the value of the 'zpclrcov' field.
   * Covariance in magzpsci and clrcoeff from science image processing [mag^2]
   * @param value the value to set.
   */
  public void setZpclrcov(java.lang.Float value) {
    this.zpclrcov = value;
  }

  /**
   * Gets the value of the 'zpmed' field.
   * @return Magnitude zero point from median of all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]
   */
  public java.lang.Float getZpmed() {
    return zpmed;
  }

  /**
   * Sets the value of the 'zpmed' field.
   * Magnitude zero point from median of all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]
   * @param value the value to set.
   */
  public void setZpmed(java.lang.Float value) {
    this.zpmed = value;
  }

  /**
   * Gets the value of the 'clrmed' field.
   * @return Median color of all PS1 photometric calibrators used from science image processing [mag]: for filter (fid) = 1, 2, 3, PS1 color used = g-r, g-r, r-i respectively
   */
  public java.lang.Float getClrmed() {
    return clrmed;
  }

  /**
   * Sets the value of the 'clrmed' field.
   * Median color of all PS1 photometric calibrators used from science image processing [mag]: for filter (fid) = 1, 2, 3, PS1 color used = g-r, g-r, r-i respectively
   * @param value the value to set.
   */
  public void setClrmed(java.lang.Float value) {
    this.clrmed = value;
  }

  /**
   * Gets the value of the 'clrrms' field.
   * @return RMS color (deviation from average) of all PS1 photometric calibrators used from science image processing [mag]
   */
  public java.lang.Float getClrrms() {
    return clrrms;
  }

  /**
   * Sets the value of the 'clrrms' field.
   * RMS color (deviation from average) of all PS1 photometric calibrators used from science image processing [mag]
   * @param value the value to set.
   */
  public void setClrrms(java.lang.Float value) {
    this.clrrms = value;
  }

  /**
   * Gets the value of the 'neargaia' field.
   * @return Distance to closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [arcsec]
   */
  public java.lang.Float getNeargaia() {
    return neargaia;
  }

  /**
   * Sets the value of the 'neargaia' field.
   * Distance to closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [arcsec]
   * @param value the value to set.
   */
  public void setNeargaia(java.lang.Float value) {
    this.neargaia = value;
  }

  /**
   * Gets the value of the 'neargaiabright' field.
   * @return Distance to closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [arcsec]
   */
  public java.lang.Float getNeargaiabright() {
    return neargaiabright;
  }

  /**
   * Sets the value of the 'neargaiabright' field.
   * Distance to closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [arcsec]
   * @param value the value to set.
   */
  public void setNeargaiabright(java.lang.Float value) {
    this.neargaiabright = value;
  }

  /**
   * Gets the value of the 'maggaia' field.
   * @return Gaia (G-band) magnitude of closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [mag]
   */
  public java.lang.Float getMaggaia() {
    return maggaia;
  }

  /**
   * Sets the value of the 'maggaia' field.
   * Gaia (G-band) magnitude of closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [mag]
   * @param value the value to set.
   */
  public void setMaggaia(java.lang.Float value) {
    this.maggaia = value;
  }

  /**
   * Gets the value of the 'maggaiabright' field.
   * @return Gaia (G-band) magnitude of closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [mag]
   */
  public java.lang.Float getMaggaiabright() {
    return maggaiabright;
  }

  /**
   * Sets the value of the 'maggaiabright' field.
   * Gaia (G-band) magnitude of closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [mag]
   * @param value the value to set.
   */
  public void setMaggaiabright(java.lang.Float value) {
    this.maggaiabright = value;
  }

  /**
   * Gets the value of the 'exptime' field.
   * @return Integration time of camera exposure [sec]
   */
  public java.lang.Float getExptime() {
    return exptime;
  }

  /**
   * Sets the value of the 'exptime' field.
   * Integration time of camera exposure [sec]
   * @param value the value to set.
   */
  public void setExptime(java.lang.Float value) {
    this.exptime = value;
  }

  /**
   * Creates a new candidate RecordBuilder.
   * @return A new candidate RecordBuilder
   */
  public static ztf.alert.candidate.Builder newBuilder() {
    return new ztf.alert.candidate.Builder();
  }

  /**
   * Creates a new candidate RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new candidate RecordBuilder
   */
  public static ztf.alert.candidate.Builder newBuilder(ztf.alert.candidate.Builder other) {
    return new ztf.alert.candidate.Builder(other);
  }

  /**
   * Creates a new candidate RecordBuilder by copying an existing candidate instance.
   * @param other The existing instance to copy.
   * @return A new candidate RecordBuilder
   */
  public static ztf.alert.candidate.Builder newBuilder(ztf.alert.candidate other) {
    return new ztf.alert.candidate.Builder(other);
  }

  /**
   * RecordBuilder for candidate instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<candidate>
    implements org.apache.avro.data.RecordBuilder<candidate> {

    /** Observation Julian date at start of exposure [days] */
    private double jd;
    /** Filter ID (1=g; 2=R; 3=i) */
    private int fid;
    /** Processing ID for science image to facilitate archive retrieval */
    private long pid;
    /** Expected 5-sigma mag limit in difference image based on global noise estimate [mag] */
    private java.lang.Float diffmaglim;
    /** filename of positive (sci minus ref) difference image */
    private java.lang.CharSequence pdiffimfilename;
    /** Principal investigator attached to program ID */
    private java.lang.CharSequence programpi;
    /** Program ID: encodes either public, collab, or caltech mode */
    private int programid;
    /** Candidate ID from operations DB */
    private long candid;
    /** t or 1 => candidate is from positive (sci minus ref) subtraction; f or 0 => candidate is from negative (ref minus sci) subtraction */
    private java.lang.CharSequence isdiffpos;
    /** Internal pipeline table extraction ID */
    private java.lang.Long tblid;
    /** Night ID */
    private java.lang.Integer nid;
    /** Readout channel ID [00 .. 63] */
    private java.lang.Integer rcid;
    /** ZTF field ID */
    private java.lang.Integer field;
    /** x-image position of candidate [pixels] */
    private java.lang.Float xpos;
    /** y-image position of candidate [pixels] */
    private java.lang.Float ypos;
    /** Right Ascension of candidate; J2000 [deg] */
    private double ra;
    /** Declination of candidate; J2000 [deg] */
    private double dec;
    /** Magnitude from PSF-fit photometry [mag] */
    private float magpsf;
    /** 1-sigma uncertainty in magpsf [mag] */
    private float sigmapsf;
    /** Reduced chi-square for PSF-fit */
    private java.lang.Float chipsf;
    /** Aperture mag using 14 pixel diameter aperture [mag] */
    private java.lang.Float magap;
    /** 1-sigma uncertainty in magap [mag] */
    private java.lang.Float sigmagap;
    /** distance to nearest source in reference image PSF-catalog [pixels] */
    private java.lang.Float distnr;
    /** magnitude of nearest source in reference image PSF-catalog [mag] */
    private java.lang.Float magnr;
    /** 1-sigma uncertainty in magnr [mag] */
    private java.lang.Float sigmagnr;
    /** DAOPhot chi parameter of nearest source in reference image PSF-catalog */
    private java.lang.Float chinr;
    /** DAOPhot sharp parameter of nearest source in reference image PSF-catalog */
    private java.lang.Float sharpnr;
    /** Local sky background estimate [DN] */
    private java.lang.Float sky;
    /** Difference: magap - magpsf [mag] */
    private java.lang.Float magdiff;
    /** Full Width Half Max assuming a Gaussian core, from SExtractor [pixels] */
    private java.lang.Float fwhm;
    /** Star/Galaxy classification score from SExtractor */
    private java.lang.Float classtar;
    /** Distance to nearest edge in image [pixels] */
    private java.lang.Float mindtoedge;
    /** Difference: diffmaglim - magap [mag] */
    private java.lang.Float magfromlim;
    /** Ratio: difffwhm / fwhm */
    private java.lang.Float seeratio;
    /** Windowed profile RMS afloat major axis from SExtractor [pixels] */
    private java.lang.Float aimage;
    /** Windowed profile RMS afloat minor axis from SExtractor [pixels] */
    private java.lang.Float bimage;
    /** Ratio: aimage / fwhm */
    private java.lang.Float aimagerat;
    /** Ratio: bimage / fwhm */
    private java.lang.Float bimagerat;
    /** Ratio: aimage / bimage */
    private java.lang.Float elong;
    /** number of negative pixels in a 5 x 5 pixel stamp */
    private java.lang.Integer nneg;
    /** number of prior-tagged bad pixels in a 5 x 5 pixel stamp */
    private java.lang.Integer nbad;
    /** RealBogus quality score; range is 0 to 1 where closer to 1 is more reliable */
    private java.lang.Float rb;
    /** distance to nearest known solar system object if exists within 30 arcsec [arcsec] */
    private java.lang.Float ssdistnr;
    /** magnitude of nearest known solar system object if exists within 30 arcsec (usually V-band from MPC archive) [mag] */
    private java.lang.Float ssmagnr;
    /** name of nearest known solar system object if exists within 30 arcsec (from MPC archive) */
    private java.lang.CharSequence ssnamenr;
    /** Ratio: sum(pixels) / sum(|pixels|) in a 5 x 5 pixel stamp where stamp is first median-filtered to mitigate outliers */
    private java.lang.Float sumrat;
    /** Aperture mag using 18 pixel diameter aperture [mag] */
    private java.lang.Float magapbig;
    /** 1-sigma uncertainty in magapbig [mag] */
    private java.lang.Float sigmagapbig;
    /** Right Ascension of nearest source in reference image PSF-catalog; J2000 [deg] */
    private double ranr;
    /** Declination of nearest source in reference image PSF-catalog; J2000 [deg] */
    private double decnr;
    /** g-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag] */
    private java.lang.Float sgmag1;
    /** r-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag] */
    private java.lang.Float srmag1;
    /** i-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag] */
    private java.lang.Float simag1;
    /** z-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag] */
    private java.lang.Float szmag1;
    /** Star/Galaxy score of closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star */
    private java.lang.Float sgscore1;
    /** Distance to closest source from PS1 catalog; if exists within 30 arcsec [arcsec] */
    private java.lang.Float distpsnr1;
    /** Number of spatially-coincident detections falling within 1.5 arcsec going back to beginning of survey; only detections that fell on the same field and readout-channel ID where the input candidate was observed are counted */
    private int ndethist;
    /** Number of times input candidate position fell on any field and readout-channel going back to beginning of survey */
    private int ncovhist;
    /** Earliest Julian date of epoch corresponding to ndethist [days] */
    private java.lang.Double jdstarthist;
    /** Latest Julian date of epoch corresponding to ndethist [days] */
    private java.lang.Double jdendhist;
    /** Peak-pixel signal-to-noise ratio in point source matched-filtered detection image */
    private java.lang.Double scorr;
    /** 1 => candidate is from a Target-of-Opportunity (ToO) exposure; 0 => candidate is from a non-ToO exposure */
    private java.lang.Integer tooflag;
    /** Object ID of closest source from PS1 catalog; if exists within 30 arcsec */
    private java.lang.Long objectidps1;
    /** Object ID of second closest source from PS1 catalog; if exists within 30 arcsec */
    private java.lang.Long objectidps2;
    /** g-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag] */
    private java.lang.Float sgmag2;
    /** r-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag] */
    private java.lang.Float srmag2;
    /** i-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag] */
    private java.lang.Float simag2;
    /** z-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag] */
    private java.lang.Float szmag2;
    /** Star/Galaxy score of second closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star */
    private java.lang.Float sgscore2;
    /** Distance to second closest source from PS1 catalog; if exists within 30 arcsec [arcsec] */
    private java.lang.Float distpsnr2;
    /** Object ID of third closest source from PS1 catalog; if exists within 30 arcsec */
    private java.lang.Long objectidps3;
    /** g-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag] */
    private java.lang.Float sgmag3;
    /** r-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag] */
    private java.lang.Float srmag3;
    /** i-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag] */
    private java.lang.Float simag3;
    /** z-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag] */
    private java.lang.Float szmag3;
    /** Star/Galaxy score of third closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star */
    private java.lang.Float sgscore3;
    /** Distance to third closest source from PS1 catalog; if exists within 30 arcsec [arcsec] */
    private java.lang.Float distpsnr3;
    /** Number of source matches from PS1 catalog falling within 30 arcsec */
    private int nmtchps;
    /** Processing ID for reference image to facilitate archive retrieval */
    private long rfid;
    /** Observation Julian date of earliest exposure used to generate reference image [days] */
    private double jdstartref;
    /** Observation Julian date of latest exposure used to generate reference image [days] */
    private double jdendref;
    /** Number of frames (epochal images) used to generate reference image */
    private int nframesref;
    /** version of RealBogus model/classifier used to assign rb quality score */
    private java.lang.CharSequence rbversion;
    /** Ratio: D/stddev(D) on event position where D = difference image */
    private java.lang.Float dsnrms;
    /** Ratio: S/stddev(S) on event position where S = image of convolution: D (x) PSF(D) */
    private java.lang.Float ssnrms;
    /** Difference of statistics: dsnrms - ssnrms */
    private java.lang.Float dsdiff;
    /** Magnitude zero point for photometry estimates [mag] */
    private java.lang.Float magzpsci;
    /** Magnitude zero point uncertainty (in magzpsci) [mag] */
    private java.lang.Float magzpsciunc;
    /** RMS (deviation from average) in all differences between instrumental photometry and matched photometric calibrators from science image processing [mag] */
    private java.lang.Float magzpscirms;
    /** Number of PS1 photometric calibrators used to calibrate science image from science image processing */
    private int nmatches;
    /** Color coefficient from linear fit from photometric calibration of science image */
    private java.lang.Float clrcoeff;
    /** Color coefficient uncertainty from linear fit (corresponding to clrcoeff) */
    private java.lang.Float clrcounc;
    /** Covariance in magzpsci and clrcoeff from science image processing [mag^2] */
    private java.lang.Float zpclrcov;
    /** Magnitude zero point from median of all differences between instrumental photometry and matched photometric calibrators from science image processing [mag] */
    private java.lang.Float zpmed;
    /** Median color of all PS1 photometric calibrators used from science image processing [mag]: for filter (fid) = 1, 2, 3, PS1 color used = g-r, g-r, r-i respectively */
    private java.lang.Float clrmed;
    /** RMS color (deviation from average) of all PS1 photometric calibrators used from science image processing [mag] */
    private java.lang.Float clrrms;
    /** Distance to closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [arcsec] */
    private java.lang.Float neargaia;
    /** Distance to closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [arcsec] */
    private java.lang.Float neargaiabright;
    /** Gaia (G-band) magnitude of closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [mag] */
    private java.lang.Float maggaia;
    /** Gaia (G-band) magnitude of closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [mag] */
    private java.lang.Float maggaiabright;
    /** Integration time of camera exposure [sec] */
    private java.lang.Float exptime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ztf.alert.candidate.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.jd)) {
        this.jd = data().deepCopy(fields()[0].schema(), other.jd);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fid)) {
        this.fid = data().deepCopy(fields()[1].schema(), other.fid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pid)) {
        this.pid = data().deepCopy(fields()[2].schema(), other.pid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.diffmaglim)) {
        this.diffmaglim = data().deepCopy(fields()[3].schema(), other.diffmaglim);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.pdiffimfilename)) {
        this.pdiffimfilename = data().deepCopy(fields()[4].schema(), other.pdiffimfilename);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.programpi)) {
        this.programpi = data().deepCopy(fields()[5].schema(), other.programpi);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.programid)) {
        this.programid = data().deepCopy(fields()[6].schema(), other.programid);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.candid)) {
        this.candid = data().deepCopy(fields()[7].schema(), other.candid);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.isdiffpos)) {
        this.isdiffpos = data().deepCopy(fields()[8].schema(), other.isdiffpos);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.tblid)) {
        this.tblid = data().deepCopy(fields()[9].schema(), other.tblid);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.nid)) {
        this.nid = data().deepCopy(fields()[10].schema(), other.nid);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.rcid)) {
        this.rcid = data().deepCopy(fields()[11].schema(), other.rcid);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.field)) {
        this.field = data().deepCopy(fields()[12].schema(), other.field);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.xpos)) {
        this.xpos = data().deepCopy(fields()[13].schema(), other.xpos);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.ypos)) {
        this.ypos = data().deepCopy(fields()[14].schema(), other.ypos);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.ra)) {
        this.ra = data().deepCopy(fields()[15].schema(), other.ra);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.dec)) {
        this.dec = data().deepCopy(fields()[16].schema(), other.dec);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.magpsf)) {
        this.magpsf = data().deepCopy(fields()[17].schema(), other.magpsf);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.sigmapsf)) {
        this.sigmapsf = data().deepCopy(fields()[18].schema(), other.sigmapsf);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.chipsf)) {
        this.chipsf = data().deepCopy(fields()[19].schema(), other.chipsf);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.magap)) {
        this.magap = data().deepCopy(fields()[20].schema(), other.magap);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.sigmagap)) {
        this.sigmagap = data().deepCopy(fields()[21].schema(), other.sigmagap);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.distnr)) {
        this.distnr = data().deepCopy(fields()[22].schema(), other.distnr);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.magnr)) {
        this.magnr = data().deepCopy(fields()[23].schema(), other.magnr);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.sigmagnr)) {
        this.sigmagnr = data().deepCopy(fields()[24].schema(), other.sigmagnr);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.chinr)) {
        this.chinr = data().deepCopy(fields()[25].schema(), other.chinr);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.sharpnr)) {
        this.sharpnr = data().deepCopy(fields()[26].schema(), other.sharpnr);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.sky)) {
        this.sky = data().deepCopy(fields()[27].schema(), other.sky);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.magdiff)) {
        this.magdiff = data().deepCopy(fields()[28].schema(), other.magdiff);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.fwhm)) {
        this.fwhm = data().deepCopy(fields()[29].schema(), other.fwhm);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.classtar)) {
        this.classtar = data().deepCopy(fields()[30].schema(), other.classtar);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.mindtoedge)) {
        this.mindtoedge = data().deepCopy(fields()[31].schema(), other.mindtoedge);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.magfromlim)) {
        this.magfromlim = data().deepCopy(fields()[32].schema(), other.magfromlim);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.seeratio)) {
        this.seeratio = data().deepCopy(fields()[33].schema(), other.seeratio);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.aimage)) {
        this.aimage = data().deepCopy(fields()[34].schema(), other.aimage);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.bimage)) {
        this.bimage = data().deepCopy(fields()[35].schema(), other.bimage);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.aimagerat)) {
        this.aimagerat = data().deepCopy(fields()[36].schema(), other.aimagerat);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.bimagerat)) {
        this.bimagerat = data().deepCopy(fields()[37].schema(), other.bimagerat);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.elong)) {
        this.elong = data().deepCopy(fields()[38].schema(), other.elong);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.nneg)) {
        this.nneg = data().deepCopy(fields()[39].schema(), other.nneg);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.nbad)) {
        this.nbad = data().deepCopy(fields()[40].schema(), other.nbad);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.rb)) {
        this.rb = data().deepCopy(fields()[41].schema(), other.rb);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.ssdistnr)) {
        this.ssdistnr = data().deepCopy(fields()[42].schema(), other.ssdistnr);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.ssmagnr)) {
        this.ssmagnr = data().deepCopy(fields()[43].schema(), other.ssmagnr);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.ssnamenr)) {
        this.ssnamenr = data().deepCopy(fields()[44].schema(), other.ssnamenr);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.sumrat)) {
        this.sumrat = data().deepCopy(fields()[45].schema(), other.sumrat);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.magapbig)) {
        this.magapbig = data().deepCopy(fields()[46].schema(), other.magapbig);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.sigmagapbig)) {
        this.sigmagapbig = data().deepCopy(fields()[47].schema(), other.sigmagapbig);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.ranr)) {
        this.ranr = data().deepCopy(fields()[48].schema(), other.ranr);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.decnr)) {
        this.decnr = data().deepCopy(fields()[49].schema(), other.decnr);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.sgmag1)) {
        this.sgmag1 = data().deepCopy(fields()[50].schema(), other.sgmag1);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.srmag1)) {
        this.srmag1 = data().deepCopy(fields()[51].schema(), other.srmag1);
        fieldSetFlags()[51] = true;
      }
      if (isValidValue(fields()[52], other.simag1)) {
        this.simag1 = data().deepCopy(fields()[52].schema(), other.simag1);
        fieldSetFlags()[52] = true;
      }
      if (isValidValue(fields()[53], other.szmag1)) {
        this.szmag1 = data().deepCopy(fields()[53].schema(), other.szmag1);
        fieldSetFlags()[53] = true;
      }
      if (isValidValue(fields()[54], other.sgscore1)) {
        this.sgscore1 = data().deepCopy(fields()[54].schema(), other.sgscore1);
        fieldSetFlags()[54] = true;
      }
      if (isValidValue(fields()[55], other.distpsnr1)) {
        this.distpsnr1 = data().deepCopy(fields()[55].schema(), other.distpsnr1);
        fieldSetFlags()[55] = true;
      }
      if (isValidValue(fields()[56], other.ndethist)) {
        this.ndethist = data().deepCopy(fields()[56].schema(), other.ndethist);
        fieldSetFlags()[56] = true;
      }
      if (isValidValue(fields()[57], other.ncovhist)) {
        this.ncovhist = data().deepCopy(fields()[57].schema(), other.ncovhist);
        fieldSetFlags()[57] = true;
      }
      if (isValidValue(fields()[58], other.jdstarthist)) {
        this.jdstarthist = data().deepCopy(fields()[58].schema(), other.jdstarthist);
        fieldSetFlags()[58] = true;
      }
      if (isValidValue(fields()[59], other.jdendhist)) {
        this.jdendhist = data().deepCopy(fields()[59].schema(), other.jdendhist);
        fieldSetFlags()[59] = true;
      }
      if (isValidValue(fields()[60], other.scorr)) {
        this.scorr = data().deepCopy(fields()[60].schema(), other.scorr);
        fieldSetFlags()[60] = true;
      }
      if (isValidValue(fields()[61], other.tooflag)) {
        this.tooflag = data().deepCopy(fields()[61].schema(), other.tooflag);
        fieldSetFlags()[61] = true;
      }
      if (isValidValue(fields()[62], other.objectidps1)) {
        this.objectidps1 = data().deepCopy(fields()[62].schema(), other.objectidps1);
        fieldSetFlags()[62] = true;
      }
      if (isValidValue(fields()[63], other.objectidps2)) {
        this.objectidps2 = data().deepCopy(fields()[63].schema(), other.objectidps2);
        fieldSetFlags()[63] = true;
      }
      if (isValidValue(fields()[64], other.sgmag2)) {
        this.sgmag2 = data().deepCopy(fields()[64].schema(), other.sgmag2);
        fieldSetFlags()[64] = true;
      }
      if (isValidValue(fields()[65], other.srmag2)) {
        this.srmag2 = data().deepCopy(fields()[65].schema(), other.srmag2);
        fieldSetFlags()[65] = true;
      }
      if (isValidValue(fields()[66], other.simag2)) {
        this.simag2 = data().deepCopy(fields()[66].schema(), other.simag2);
        fieldSetFlags()[66] = true;
      }
      if (isValidValue(fields()[67], other.szmag2)) {
        this.szmag2 = data().deepCopy(fields()[67].schema(), other.szmag2);
        fieldSetFlags()[67] = true;
      }
      if (isValidValue(fields()[68], other.sgscore2)) {
        this.sgscore2 = data().deepCopy(fields()[68].schema(), other.sgscore2);
        fieldSetFlags()[68] = true;
      }
      if (isValidValue(fields()[69], other.distpsnr2)) {
        this.distpsnr2 = data().deepCopy(fields()[69].schema(), other.distpsnr2);
        fieldSetFlags()[69] = true;
      }
      if (isValidValue(fields()[70], other.objectidps3)) {
        this.objectidps3 = data().deepCopy(fields()[70].schema(), other.objectidps3);
        fieldSetFlags()[70] = true;
      }
      if (isValidValue(fields()[71], other.sgmag3)) {
        this.sgmag3 = data().deepCopy(fields()[71].schema(), other.sgmag3);
        fieldSetFlags()[71] = true;
      }
      if (isValidValue(fields()[72], other.srmag3)) {
        this.srmag3 = data().deepCopy(fields()[72].schema(), other.srmag3);
        fieldSetFlags()[72] = true;
      }
      if (isValidValue(fields()[73], other.simag3)) {
        this.simag3 = data().deepCopy(fields()[73].schema(), other.simag3);
        fieldSetFlags()[73] = true;
      }
      if (isValidValue(fields()[74], other.szmag3)) {
        this.szmag3 = data().deepCopy(fields()[74].schema(), other.szmag3);
        fieldSetFlags()[74] = true;
      }
      if (isValidValue(fields()[75], other.sgscore3)) {
        this.sgscore3 = data().deepCopy(fields()[75].schema(), other.sgscore3);
        fieldSetFlags()[75] = true;
      }
      if (isValidValue(fields()[76], other.distpsnr3)) {
        this.distpsnr3 = data().deepCopy(fields()[76].schema(), other.distpsnr3);
        fieldSetFlags()[76] = true;
      }
      if (isValidValue(fields()[77], other.nmtchps)) {
        this.nmtchps = data().deepCopy(fields()[77].schema(), other.nmtchps);
        fieldSetFlags()[77] = true;
      }
      if (isValidValue(fields()[78], other.rfid)) {
        this.rfid = data().deepCopy(fields()[78].schema(), other.rfid);
        fieldSetFlags()[78] = true;
      }
      if (isValidValue(fields()[79], other.jdstartref)) {
        this.jdstartref = data().deepCopy(fields()[79].schema(), other.jdstartref);
        fieldSetFlags()[79] = true;
      }
      if (isValidValue(fields()[80], other.jdendref)) {
        this.jdendref = data().deepCopy(fields()[80].schema(), other.jdendref);
        fieldSetFlags()[80] = true;
      }
      if (isValidValue(fields()[81], other.nframesref)) {
        this.nframesref = data().deepCopy(fields()[81].schema(), other.nframesref);
        fieldSetFlags()[81] = true;
      }
      if (isValidValue(fields()[82], other.rbversion)) {
        this.rbversion = data().deepCopy(fields()[82].schema(), other.rbversion);
        fieldSetFlags()[82] = true;
      }
      if (isValidValue(fields()[83], other.dsnrms)) {
        this.dsnrms = data().deepCopy(fields()[83].schema(), other.dsnrms);
        fieldSetFlags()[83] = true;
      }
      if (isValidValue(fields()[84], other.ssnrms)) {
        this.ssnrms = data().deepCopy(fields()[84].schema(), other.ssnrms);
        fieldSetFlags()[84] = true;
      }
      if (isValidValue(fields()[85], other.dsdiff)) {
        this.dsdiff = data().deepCopy(fields()[85].schema(), other.dsdiff);
        fieldSetFlags()[85] = true;
      }
      if (isValidValue(fields()[86], other.magzpsci)) {
        this.magzpsci = data().deepCopy(fields()[86].schema(), other.magzpsci);
        fieldSetFlags()[86] = true;
      }
      if (isValidValue(fields()[87], other.magzpsciunc)) {
        this.magzpsciunc = data().deepCopy(fields()[87].schema(), other.magzpsciunc);
        fieldSetFlags()[87] = true;
      }
      if (isValidValue(fields()[88], other.magzpscirms)) {
        this.magzpscirms = data().deepCopy(fields()[88].schema(), other.magzpscirms);
        fieldSetFlags()[88] = true;
      }
      if (isValidValue(fields()[89], other.nmatches)) {
        this.nmatches = data().deepCopy(fields()[89].schema(), other.nmatches);
        fieldSetFlags()[89] = true;
      }
      if (isValidValue(fields()[90], other.clrcoeff)) {
        this.clrcoeff = data().deepCopy(fields()[90].schema(), other.clrcoeff);
        fieldSetFlags()[90] = true;
      }
      if (isValidValue(fields()[91], other.clrcounc)) {
        this.clrcounc = data().deepCopy(fields()[91].schema(), other.clrcounc);
        fieldSetFlags()[91] = true;
      }
      if (isValidValue(fields()[92], other.zpclrcov)) {
        this.zpclrcov = data().deepCopy(fields()[92].schema(), other.zpclrcov);
        fieldSetFlags()[92] = true;
      }
      if (isValidValue(fields()[93], other.zpmed)) {
        this.zpmed = data().deepCopy(fields()[93].schema(), other.zpmed);
        fieldSetFlags()[93] = true;
      }
      if (isValidValue(fields()[94], other.clrmed)) {
        this.clrmed = data().deepCopy(fields()[94].schema(), other.clrmed);
        fieldSetFlags()[94] = true;
      }
      if (isValidValue(fields()[95], other.clrrms)) {
        this.clrrms = data().deepCopy(fields()[95].schema(), other.clrrms);
        fieldSetFlags()[95] = true;
      }
      if (isValidValue(fields()[96], other.neargaia)) {
        this.neargaia = data().deepCopy(fields()[96].schema(), other.neargaia);
        fieldSetFlags()[96] = true;
      }
      if (isValidValue(fields()[97], other.neargaiabright)) {
        this.neargaiabright = data().deepCopy(fields()[97].schema(), other.neargaiabright);
        fieldSetFlags()[97] = true;
      }
      if (isValidValue(fields()[98], other.maggaia)) {
        this.maggaia = data().deepCopy(fields()[98].schema(), other.maggaia);
        fieldSetFlags()[98] = true;
      }
      if (isValidValue(fields()[99], other.maggaiabright)) {
        this.maggaiabright = data().deepCopy(fields()[99].schema(), other.maggaiabright);
        fieldSetFlags()[99] = true;
      }
      if (isValidValue(fields()[100], other.exptime)) {
        this.exptime = data().deepCopy(fields()[100].schema(), other.exptime);
        fieldSetFlags()[100] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing candidate instance
     * @param other The existing instance to copy.
     */
    private Builder(ztf.alert.candidate other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.jd)) {
        this.jd = data().deepCopy(fields()[0].schema(), other.jd);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fid)) {
        this.fid = data().deepCopy(fields()[1].schema(), other.fid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pid)) {
        this.pid = data().deepCopy(fields()[2].schema(), other.pid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.diffmaglim)) {
        this.diffmaglim = data().deepCopy(fields()[3].schema(), other.diffmaglim);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.pdiffimfilename)) {
        this.pdiffimfilename = data().deepCopy(fields()[4].schema(), other.pdiffimfilename);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.programpi)) {
        this.programpi = data().deepCopy(fields()[5].schema(), other.programpi);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.programid)) {
        this.programid = data().deepCopy(fields()[6].schema(), other.programid);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.candid)) {
        this.candid = data().deepCopy(fields()[7].schema(), other.candid);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.isdiffpos)) {
        this.isdiffpos = data().deepCopy(fields()[8].schema(), other.isdiffpos);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.tblid)) {
        this.tblid = data().deepCopy(fields()[9].schema(), other.tblid);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.nid)) {
        this.nid = data().deepCopy(fields()[10].schema(), other.nid);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.rcid)) {
        this.rcid = data().deepCopy(fields()[11].schema(), other.rcid);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.field)) {
        this.field = data().deepCopy(fields()[12].schema(), other.field);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.xpos)) {
        this.xpos = data().deepCopy(fields()[13].schema(), other.xpos);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.ypos)) {
        this.ypos = data().deepCopy(fields()[14].schema(), other.ypos);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.ra)) {
        this.ra = data().deepCopy(fields()[15].schema(), other.ra);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.dec)) {
        this.dec = data().deepCopy(fields()[16].schema(), other.dec);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.magpsf)) {
        this.magpsf = data().deepCopy(fields()[17].schema(), other.magpsf);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.sigmapsf)) {
        this.sigmapsf = data().deepCopy(fields()[18].schema(), other.sigmapsf);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.chipsf)) {
        this.chipsf = data().deepCopy(fields()[19].schema(), other.chipsf);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.magap)) {
        this.magap = data().deepCopy(fields()[20].schema(), other.magap);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.sigmagap)) {
        this.sigmagap = data().deepCopy(fields()[21].schema(), other.sigmagap);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.distnr)) {
        this.distnr = data().deepCopy(fields()[22].schema(), other.distnr);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.magnr)) {
        this.magnr = data().deepCopy(fields()[23].schema(), other.magnr);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.sigmagnr)) {
        this.sigmagnr = data().deepCopy(fields()[24].schema(), other.sigmagnr);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.chinr)) {
        this.chinr = data().deepCopy(fields()[25].schema(), other.chinr);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.sharpnr)) {
        this.sharpnr = data().deepCopy(fields()[26].schema(), other.sharpnr);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.sky)) {
        this.sky = data().deepCopy(fields()[27].schema(), other.sky);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.magdiff)) {
        this.magdiff = data().deepCopy(fields()[28].schema(), other.magdiff);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.fwhm)) {
        this.fwhm = data().deepCopy(fields()[29].schema(), other.fwhm);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.classtar)) {
        this.classtar = data().deepCopy(fields()[30].schema(), other.classtar);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.mindtoedge)) {
        this.mindtoedge = data().deepCopy(fields()[31].schema(), other.mindtoedge);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.magfromlim)) {
        this.magfromlim = data().deepCopy(fields()[32].schema(), other.magfromlim);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.seeratio)) {
        this.seeratio = data().deepCopy(fields()[33].schema(), other.seeratio);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.aimage)) {
        this.aimage = data().deepCopy(fields()[34].schema(), other.aimage);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.bimage)) {
        this.bimage = data().deepCopy(fields()[35].schema(), other.bimage);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.aimagerat)) {
        this.aimagerat = data().deepCopy(fields()[36].schema(), other.aimagerat);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.bimagerat)) {
        this.bimagerat = data().deepCopy(fields()[37].schema(), other.bimagerat);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.elong)) {
        this.elong = data().deepCopy(fields()[38].schema(), other.elong);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.nneg)) {
        this.nneg = data().deepCopy(fields()[39].schema(), other.nneg);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.nbad)) {
        this.nbad = data().deepCopy(fields()[40].schema(), other.nbad);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.rb)) {
        this.rb = data().deepCopy(fields()[41].schema(), other.rb);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.ssdistnr)) {
        this.ssdistnr = data().deepCopy(fields()[42].schema(), other.ssdistnr);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.ssmagnr)) {
        this.ssmagnr = data().deepCopy(fields()[43].schema(), other.ssmagnr);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.ssnamenr)) {
        this.ssnamenr = data().deepCopy(fields()[44].schema(), other.ssnamenr);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.sumrat)) {
        this.sumrat = data().deepCopy(fields()[45].schema(), other.sumrat);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.magapbig)) {
        this.magapbig = data().deepCopy(fields()[46].schema(), other.magapbig);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.sigmagapbig)) {
        this.sigmagapbig = data().deepCopy(fields()[47].schema(), other.sigmagapbig);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.ranr)) {
        this.ranr = data().deepCopy(fields()[48].schema(), other.ranr);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.decnr)) {
        this.decnr = data().deepCopy(fields()[49].schema(), other.decnr);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.sgmag1)) {
        this.sgmag1 = data().deepCopy(fields()[50].schema(), other.sgmag1);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.srmag1)) {
        this.srmag1 = data().deepCopy(fields()[51].schema(), other.srmag1);
        fieldSetFlags()[51] = true;
      }
      if (isValidValue(fields()[52], other.simag1)) {
        this.simag1 = data().deepCopy(fields()[52].schema(), other.simag1);
        fieldSetFlags()[52] = true;
      }
      if (isValidValue(fields()[53], other.szmag1)) {
        this.szmag1 = data().deepCopy(fields()[53].schema(), other.szmag1);
        fieldSetFlags()[53] = true;
      }
      if (isValidValue(fields()[54], other.sgscore1)) {
        this.sgscore1 = data().deepCopy(fields()[54].schema(), other.sgscore1);
        fieldSetFlags()[54] = true;
      }
      if (isValidValue(fields()[55], other.distpsnr1)) {
        this.distpsnr1 = data().deepCopy(fields()[55].schema(), other.distpsnr1);
        fieldSetFlags()[55] = true;
      }
      if (isValidValue(fields()[56], other.ndethist)) {
        this.ndethist = data().deepCopy(fields()[56].schema(), other.ndethist);
        fieldSetFlags()[56] = true;
      }
      if (isValidValue(fields()[57], other.ncovhist)) {
        this.ncovhist = data().deepCopy(fields()[57].schema(), other.ncovhist);
        fieldSetFlags()[57] = true;
      }
      if (isValidValue(fields()[58], other.jdstarthist)) {
        this.jdstarthist = data().deepCopy(fields()[58].schema(), other.jdstarthist);
        fieldSetFlags()[58] = true;
      }
      if (isValidValue(fields()[59], other.jdendhist)) {
        this.jdendhist = data().deepCopy(fields()[59].schema(), other.jdendhist);
        fieldSetFlags()[59] = true;
      }
      if (isValidValue(fields()[60], other.scorr)) {
        this.scorr = data().deepCopy(fields()[60].schema(), other.scorr);
        fieldSetFlags()[60] = true;
      }
      if (isValidValue(fields()[61], other.tooflag)) {
        this.tooflag = data().deepCopy(fields()[61].schema(), other.tooflag);
        fieldSetFlags()[61] = true;
      }
      if (isValidValue(fields()[62], other.objectidps1)) {
        this.objectidps1 = data().deepCopy(fields()[62].schema(), other.objectidps1);
        fieldSetFlags()[62] = true;
      }
      if (isValidValue(fields()[63], other.objectidps2)) {
        this.objectidps2 = data().deepCopy(fields()[63].schema(), other.objectidps2);
        fieldSetFlags()[63] = true;
      }
      if (isValidValue(fields()[64], other.sgmag2)) {
        this.sgmag2 = data().deepCopy(fields()[64].schema(), other.sgmag2);
        fieldSetFlags()[64] = true;
      }
      if (isValidValue(fields()[65], other.srmag2)) {
        this.srmag2 = data().deepCopy(fields()[65].schema(), other.srmag2);
        fieldSetFlags()[65] = true;
      }
      if (isValidValue(fields()[66], other.simag2)) {
        this.simag2 = data().deepCopy(fields()[66].schema(), other.simag2);
        fieldSetFlags()[66] = true;
      }
      if (isValidValue(fields()[67], other.szmag2)) {
        this.szmag2 = data().deepCopy(fields()[67].schema(), other.szmag2);
        fieldSetFlags()[67] = true;
      }
      if (isValidValue(fields()[68], other.sgscore2)) {
        this.sgscore2 = data().deepCopy(fields()[68].schema(), other.sgscore2);
        fieldSetFlags()[68] = true;
      }
      if (isValidValue(fields()[69], other.distpsnr2)) {
        this.distpsnr2 = data().deepCopy(fields()[69].schema(), other.distpsnr2);
        fieldSetFlags()[69] = true;
      }
      if (isValidValue(fields()[70], other.objectidps3)) {
        this.objectidps3 = data().deepCopy(fields()[70].schema(), other.objectidps3);
        fieldSetFlags()[70] = true;
      }
      if (isValidValue(fields()[71], other.sgmag3)) {
        this.sgmag3 = data().deepCopy(fields()[71].schema(), other.sgmag3);
        fieldSetFlags()[71] = true;
      }
      if (isValidValue(fields()[72], other.srmag3)) {
        this.srmag3 = data().deepCopy(fields()[72].schema(), other.srmag3);
        fieldSetFlags()[72] = true;
      }
      if (isValidValue(fields()[73], other.simag3)) {
        this.simag3 = data().deepCopy(fields()[73].schema(), other.simag3);
        fieldSetFlags()[73] = true;
      }
      if (isValidValue(fields()[74], other.szmag3)) {
        this.szmag3 = data().deepCopy(fields()[74].schema(), other.szmag3);
        fieldSetFlags()[74] = true;
      }
      if (isValidValue(fields()[75], other.sgscore3)) {
        this.sgscore3 = data().deepCopy(fields()[75].schema(), other.sgscore3);
        fieldSetFlags()[75] = true;
      }
      if (isValidValue(fields()[76], other.distpsnr3)) {
        this.distpsnr3 = data().deepCopy(fields()[76].schema(), other.distpsnr3);
        fieldSetFlags()[76] = true;
      }
      if (isValidValue(fields()[77], other.nmtchps)) {
        this.nmtchps = data().deepCopy(fields()[77].schema(), other.nmtchps);
        fieldSetFlags()[77] = true;
      }
      if (isValidValue(fields()[78], other.rfid)) {
        this.rfid = data().deepCopy(fields()[78].schema(), other.rfid);
        fieldSetFlags()[78] = true;
      }
      if (isValidValue(fields()[79], other.jdstartref)) {
        this.jdstartref = data().deepCopy(fields()[79].schema(), other.jdstartref);
        fieldSetFlags()[79] = true;
      }
      if (isValidValue(fields()[80], other.jdendref)) {
        this.jdendref = data().deepCopy(fields()[80].schema(), other.jdendref);
        fieldSetFlags()[80] = true;
      }
      if (isValidValue(fields()[81], other.nframesref)) {
        this.nframesref = data().deepCopy(fields()[81].schema(), other.nframesref);
        fieldSetFlags()[81] = true;
      }
      if (isValidValue(fields()[82], other.rbversion)) {
        this.rbversion = data().deepCopy(fields()[82].schema(), other.rbversion);
        fieldSetFlags()[82] = true;
      }
      if (isValidValue(fields()[83], other.dsnrms)) {
        this.dsnrms = data().deepCopy(fields()[83].schema(), other.dsnrms);
        fieldSetFlags()[83] = true;
      }
      if (isValidValue(fields()[84], other.ssnrms)) {
        this.ssnrms = data().deepCopy(fields()[84].schema(), other.ssnrms);
        fieldSetFlags()[84] = true;
      }
      if (isValidValue(fields()[85], other.dsdiff)) {
        this.dsdiff = data().deepCopy(fields()[85].schema(), other.dsdiff);
        fieldSetFlags()[85] = true;
      }
      if (isValidValue(fields()[86], other.magzpsci)) {
        this.magzpsci = data().deepCopy(fields()[86].schema(), other.magzpsci);
        fieldSetFlags()[86] = true;
      }
      if (isValidValue(fields()[87], other.magzpsciunc)) {
        this.magzpsciunc = data().deepCopy(fields()[87].schema(), other.magzpsciunc);
        fieldSetFlags()[87] = true;
      }
      if (isValidValue(fields()[88], other.magzpscirms)) {
        this.magzpscirms = data().deepCopy(fields()[88].schema(), other.magzpscirms);
        fieldSetFlags()[88] = true;
      }
      if (isValidValue(fields()[89], other.nmatches)) {
        this.nmatches = data().deepCopy(fields()[89].schema(), other.nmatches);
        fieldSetFlags()[89] = true;
      }
      if (isValidValue(fields()[90], other.clrcoeff)) {
        this.clrcoeff = data().deepCopy(fields()[90].schema(), other.clrcoeff);
        fieldSetFlags()[90] = true;
      }
      if (isValidValue(fields()[91], other.clrcounc)) {
        this.clrcounc = data().deepCopy(fields()[91].schema(), other.clrcounc);
        fieldSetFlags()[91] = true;
      }
      if (isValidValue(fields()[92], other.zpclrcov)) {
        this.zpclrcov = data().deepCopy(fields()[92].schema(), other.zpclrcov);
        fieldSetFlags()[92] = true;
      }
      if (isValidValue(fields()[93], other.zpmed)) {
        this.zpmed = data().deepCopy(fields()[93].schema(), other.zpmed);
        fieldSetFlags()[93] = true;
      }
      if (isValidValue(fields()[94], other.clrmed)) {
        this.clrmed = data().deepCopy(fields()[94].schema(), other.clrmed);
        fieldSetFlags()[94] = true;
      }
      if (isValidValue(fields()[95], other.clrrms)) {
        this.clrrms = data().deepCopy(fields()[95].schema(), other.clrrms);
        fieldSetFlags()[95] = true;
      }
      if (isValidValue(fields()[96], other.neargaia)) {
        this.neargaia = data().deepCopy(fields()[96].schema(), other.neargaia);
        fieldSetFlags()[96] = true;
      }
      if (isValidValue(fields()[97], other.neargaiabright)) {
        this.neargaiabright = data().deepCopy(fields()[97].schema(), other.neargaiabright);
        fieldSetFlags()[97] = true;
      }
      if (isValidValue(fields()[98], other.maggaia)) {
        this.maggaia = data().deepCopy(fields()[98].schema(), other.maggaia);
        fieldSetFlags()[98] = true;
      }
      if (isValidValue(fields()[99], other.maggaiabright)) {
        this.maggaiabright = data().deepCopy(fields()[99].schema(), other.maggaiabright);
        fieldSetFlags()[99] = true;
      }
      if (isValidValue(fields()[100], other.exptime)) {
        this.exptime = data().deepCopy(fields()[100].schema(), other.exptime);
        fieldSetFlags()[100] = true;
      }
    }

    /**
      * Gets the value of the 'jd' field.
      * Observation Julian date at start of exposure [days]
      * @return The value.
      */
    public java.lang.Double getJd() {
      return jd;
    }

    /**
      * Sets the value of the 'jd' field.
      * Observation Julian date at start of exposure [days]
      * @param value The value of 'jd'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setJd(double value) {
      validate(fields()[0], value);
      this.jd = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'jd' field has been set.
      * Observation Julian date at start of exposure [days]
      * @return True if the 'jd' field has been set, false otherwise.
      */
    public boolean hasJd() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'jd' field.
      * Observation Julian date at start of exposure [days]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearJd() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fid' field.
      * Filter ID (1=g; 2=R; 3=i)
      * @return The value.
      */
    public java.lang.Integer getFid() {
      return fid;
    }

    /**
      * Sets the value of the 'fid' field.
      * Filter ID (1=g; 2=R; 3=i)
      * @param value The value of 'fid'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setFid(int value) {
      validate(fields()[1], value);
      this.fid = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fid' field has been set.
      * Filter ID (1=g; 2=R; 3=i)
      * @return True if the 'fid' field has been set, false otherwise.
      */
    public boolean hasFid() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fid' field.
      * Filter ID (1=g; 2=R; 3=i)
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearFid() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'pid' field.
      * Processing ID for science image to facilitate archive retrieval
      * @return The value.
      */
    public java.lang.Long getPid() {
      return pid;
    }

    /**
      * Sets the value of the 'pid' field.
      * Processing ID for science image to facilitate archive retrieval
      * @param value The value of 'pid'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setPid(long value) {
      validate(fields()[2], value);
      this.pid = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'pid' field has been set.
      * Processing ID for science image to facilitate archive retrieval
      * @return True if the 'pid' field has been set, false otherwise.
      */
    public boolean hasPid() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'pid' field.
      * Processing ID for science image to facilitate archive retrieval
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearPid() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'diffmaglim' field.
      * Expected 5-sigma mag limit in difference image based on global noise estimate [mag]
      * @return The value.
      */
    public java.lang.Float getDiffmaglim() {
      return diffmaglim;
    }

    /**
      * Sets the value of the 'diffmaglim' field.
      * Expected 5-sigma mag limit in difference image based on global noise estimate [mag]
      * @param value The value of 'diffmaglim'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setDiffmaglim(java.lang.Float value) {
      validate(fields()[3], value);
      this.diffmaglim = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'diffmaglim' field has been set.
      * Expected 5-sigma mag limit in difference image based on global noise estimate [mag]
      * @return True if the 'diffmaglim' field has been set, false otherwise.
      */
    public boolean hasDiffmaglim() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'diffmaglim' field.
      * Expected 5-sigma mag limit in difference image based on global noise estimate [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearDiffmaglim() {
      diffmaglim = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'pdiffimfilename' field.
      * filename of positive (sci minus ref) difference image
      * @return The value.
      */
    public java.lang.CharSequence getPdiffimfilename() {
      return pdiffimfilename;
    }

    /**
      * Sets the value of the 'pdiffimfilename' field.
      * filename of positive (sci minus ref) difference image
      * @param value The value of 'pdiffimfilename'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setPdiffimfilename(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.pdiffimfilename = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'pdiffimfilename' field has been set.
      * filename of positive (sci minus ref) difference image
      * @return True if the 'pdiffimfilename' field has been set, false otherwise.
      */
    public boolean hasPdiffimfilename() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'pdiffimfilename' field.
      * filename of positive (sci minus ref) difference image
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearPdiffimfilename() {
      pdiffimfilename = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'programpi' field.
      * Principal investigator attached to program ID
      * @return The value.
      */
    public java.lang.CharSequence getProgrampi() {
      return programpi;
    }

    /**
      * Sets the value of the 'programpi' field.
      * Principal investigator attached to program ID
      * @param value The value of 'programpi'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setProgrampi(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.programpi = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'programpi' field has been set.
      * Principal investigator attached to program ID
      * @return True if the 'programpi' field has been set, false otherwise.
      */
    public boolean hasProgrampi() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'programpi' field.
      * Principal investigator attached to program ID
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearProgrampi() {
      programpi = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'programid' field.
      * Program ID: encodes either public, collab, or caltech mode
      * @return The value.
      */
    public java.lang.Integer getProgramid() {
      return programid;
    }

    /**
      * Sets the value of the 'programid' field.
      * Program ID: encodes either public, collab, or caltech mode
      * @param value The value of 'programid'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setProgramid(int value) {
      validate(fields()[6], value);
      this.programid = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'programid' field has been set.
      * Program ID: encodes either public, collab, or caltech mode
      * @return True if the 'programid' field has been set, false otherwise.
      */
    public boolean hasProgramid() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'programid' field.
      * Program ID: encodes either public, collab, or caltech mode
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearProgramid() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'candid' field.
      * Candidate ID from operations DB
      * @return The value.
      */
    public java.lang.Long getCandid() {
      return candid;
    }

    /**
      * Sets the value of the 'candid' field.
      * Candidate ID from operations DB
      * @param value The value of 'candid'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setCandid(long value) {
      validate(fields()[7], value);
      this.candid = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'candid' field has been set.
      * Candidate ID from operations DB
      * @return True if the 'candid' field has been set, false otherwise.
      */
    public boolean hasCandid() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'candid' field.
      * Candidate ID from operations DB
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearCandid() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'isdiffpos' field.
      * t or 1 => candidate is from positive (sci minus ref) subtraction; f or 0 => candidate is from negative (ref minus sci) subtraction
      * @return The value.
      */
    public java.lang.CharSequence getIsdiffpos() {
      return isdiffpos;
    }

    /**
      * Sets the value of the 'isdiffpos' field.
      * t or 1 => candidate is from positive (sci minus ref) subtraction; f or 0 => candidate is from negative (ref minus sci) subtraction
      * @param value The value of 'isdiffpos'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setIsdiffpos(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.isdiffpos = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'isdiffpos' field has been set.
      * t or 1 => candidate is from positive (sci minus ref) subtraction; f or 0 => candidate is from negative (ref minus sci) subtraction
      * @return True if the 'isdiffpos' field has been set, false otherwise.
      */
    public boolean hasIsdiffpos() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'isdiffpos' field.
      * t or 1 => candidate is from positive (sci minus ref) subtraction; f or 0 => candidate is from negative (ref minus sci) subtraction
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearIsdiffpos() {
      isdiffpos = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'tblid' field.
      * Internal pipeline table extraction ID
      * @return The value.
      */
    public java.lang.Long getTblid() {
      return tblid;
    }

    /**
      * Sets the value of the 'tblid' field.
      * Internal pipeline table extraction ID
      * @param value The value of 'tblid'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setTblid(java.lang.Long value) {
      validate(fields()[9], value);
      this.tblid = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'tblid' field has been set.
      * Internal pipeline table extraction ID
      * @return True if the 'tblid' field has been set, false otherwise.
      */
    public boolean hasTblid() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'tblid' field.
      * Internal pipeline table extraction ID
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearTblid() {
      tblid = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'nid' field.
      * Night ID
      * @return The value.
      */
    public java.lang.Integer getNid() {
      return nid;
    }

    /**
      * Sets the value of the 'nid' field.
      * Night ID
      * @param value The value of 'nid'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setNid(java.lang.Integer value) {
      validate(fields()[10], value);
      this.nid = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'nid' field has been set.
      * Night ID
      * @return True if the 'nid' field has been set, false otherwise.
      */
    public boolean hasNid() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'nid' field.
      * Night ID
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearNid() {
      nid = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'rcid' field.
      * Readout channel ID [00 .. 63]
      * @return The value.
      */
    public java.lang.Integer getRcid() {
      return rcid;
    }

    /**
      * Sets the value of the 'rcid' field.
      * Readout channel ID [00 .. 63]
      * @param value The value of 'rcid'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setRcid(java.lang.Integer value) {
      validate(fields()[11], value);
      this.rcid = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'rcid' field has been set.
      * Readout channel ID [00 .. 63]
      * @return True if the 'rcid' field has been set, false otherwise.
      */
    public boolean hasRcid() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'rcid' field.
      * Readout channel ID [00 .. 63]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearRcid() {
      rcid = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'field' field.
      * ZTF field ID
      * @return The value.
      */
    public java.lang.Integer getField() {
      return field;
    }

    /**
      * Sets the value of the 'field' field.
      * ZTF field ID
      * @param value The value of 'field'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setField(java.lang.Integer value) {
      validate(fields()[12], value);
      this.field = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'field' field has been set.
      * ZTF field ID
      * @return True if the 'field' field has been set, false otherwise.
      */
    public boolean hasField() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'field' field.
      * ZTF field ID
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearField() {
      field = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'xpos' field.
      * x-image position of candidate [pixels]
      * @return The value.
      */
    public java.lang.Float getXpos() {
      return xpos;
    }

    /**
      * Sets the value of the 'xpos' field.
      * x-image position of candidate [pixels]
      * @param value The value of 'xpos'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setXpos(java.lang.Float value) {
      validate(fields()[13], value);
      this.xpos = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'xpos' field has been set.
      * x-image position of candidate [pixels]
      * @return True if the 'xpos' field has been set, false otherwise.
      */
    public boolean hasXpos() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'xpos' field.
      * x-image position of candidate [pixels]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearXpos() {
      xpos = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'ypos' field.
      * y-image position of candidate [pixels]
      * @return The value.
      */
    public java.lang.Float getYpos() {
      return ypos;
    }

    /**
      * Sets the value of the 'ypos' field.
      * y-image position of candidate [pixels]
      * @param value The value of 'ypos'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setYpos(java.lang.Float value) {
      validate(fields()[14], value);
      this.ypos = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'ypos' field has been set.
      * y-image position of candidate [pixels]
      * @return True if the 'ypos' field has been set, false otherwise.
      */
    public boolean hasYpos() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'ypos' field.
      * y-image position of candidate [pixels]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearYpos() {
      ypos = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'ra' field.
      * Right Ascension of candidate; J2000 [deg]
      * @return The value.
      */
    public java.lang.Double getRa() {
      return ra;
    }

    /**
      * Sets the value of the 'ra' field.
      * Right Ascension of candidate; J2000 [deg]
      * @param value The value of 'ra'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setRa(double value) {
      validate(fields()[15], value);
      this.ra = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'ra' field has been set.
      * Right Ascension of candidate; J2000 [deg]
      * @return True if the 'ra' field has been set, false otherwise.
      */
    public boolean hasRa() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'ra' field.
      * Right Ascension of candidate; J2000 [deg]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearRa() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'dec' field.
      * Declination of candidate; J2000 [deg]
      * @return The value.
      */
    public java.lang.Double getDec() {
      return dec;
    }

    /**
      * Sets the value of the 'dec' field.
      * Declination of candidate; J2000 [deg]
      * @param value The value of 'dec'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setDec(double value) {
      validate(fields()[16], value);
      this.dec = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'dec' field has been set.
      * Declination of candidate; J2000 [deg]
      * @return True if the 'dec' field has been set, false otherwise.
      */
    public boolean hasDec() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'dec' field.
      * Declination of candidate; J2000 [deg]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearDec() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'magpsf' field.
      * Magnitude from PSF-fit photometry [mag]
      * @return The value.
      */
    public java.lang.Float getMagpsf() {
      return magpsf;
    }

    /**
      * Sets the value of the 'magpsf' field.
      * Magnitude from PSF-fit photometry [mag]
      * @param value The value of 'magpsf'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setMagpsf(float value) {
      validate(fields()[17], value);
      this.magpsf = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'magpsf' field has been set.
      * Magnitude from PSF-fit photometry [mag]
      * @return True if the 'magpsf' field has been set, false otherwise.
      */
    public boolean hasMagpsf() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'magpsf' field.
      * Magnitude from PSF-fit photometry [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearMagpsf() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'sigmapsf' field.
      * 1-sigma uncertainty in magpsf [mag]
      * @return The value.
      */
    public java.lang.Float getSigmapsf() {
      return sigmapsf;
    }

    /**
      * Sets the value of the 'sigmapsf' field.
      * 1-sigma uncertainty in magpsf [mag]
      * @param value The value of 'sigmapsf'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSigmapsf(float value) {
      validate(fields()[18], value);
      this.sigmapsf = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'sigmapsf' field has been set.
      * 1-sigma uncertainty in magpsf [mag]
      * @return True if the 'sigmapsf' field has been set, false otherwise.
      */
    public boolean hasSigmapsf() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'sigmapsf' field.
      * 1-sigma uncertainty in magpsf [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSigmapsf() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'chipsf' field.
      * Reduced chi-square for PSF-fit
      * @return The value.
      */
    public java.lang.Float getChipsf() {
      return chipsf;
    }

    /**
      * Sets the value of the 'chipsf' field.
      * Reduced chi-square for PSF-fit
      * @param value The value of 'chipsf'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setChipsf(java.lang.Float value) {
      validate(fields()[19], value);
      this.chipsf = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'chipsf' field has been set.
      * Reduced chi-square for PSF-fit
      * @return True if the 'chipsf' field has been set, false otherwise.
      */
    public boolean hasChipsf() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'chipsf' field.
      * Reduced chi-square for PSF-fit
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearChipsf() {
      chipsf = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'magap' field.
      * Aperture mag using 14 pixel diameter aperture [mag]
      * @return The value.
      */
    public java.lang.Float getMagap() {
      return magap;
    }

    /**
      * Sets the value of the 'magap' field.
      * Aperture mag using 14 pixel diameter aperture [mag]
      * @param value The value of 'magap'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setMagap(java.lang.Float value) {
      validate(fields()[20], value);
      this.magap = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'magap' field has been set.
      * Aperture mag using 14 pixel diameter aperture [mag]
      * @return True if the 'magap' field has been set, false otherwise.
      */
    public boolean hasMagap() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'magap' field.
      * Aperture mag using 14 pixel diameter aperture [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearMagap() {
      magap = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'sigmagap' field.
      * 1-sigma uncertainty in magap [mag]
      * @return The value.
      */
    public java.lang.Float getSigmagap() {
      return sigmagap;
    }

    /**
      * Sets the value of the 'sigmagap' field.
      * 1-sigma uncertainty in magap [mag]
      * @param value The value of 'sigmagap'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSigmagap(java.lang.Float value) {
      validate(fields()[21], value);
      this.sigmagap = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'sigmagap' field has been set.
      * 1-sigma uncertainty in magap [mag]
      * @return True if the 'sigmagap' field has been set, false otherwise.
      */
    public boolean hasSigmagap() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'sigmagap' field.
      * 1-sigma uncertainty in magap [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSigmagap() {
      sigmagap = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'distnr' field.
      * distance to nearest source in reference image PSF-catalog [pixels]
      * @return The value.
      */
    public java.lang.Float getDistnr() {
      return distnr;
    }

    /**
      * Sets the value of the 'distnr' field.
      * distance to nearest source in reference image PSF-catalog [pixels]
      * @param value The value of 'distnr'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setDistnr(java.lang.Float value) {
      validate(fields()[22], value);
      this.distnr = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'distnr' field has been set.
      * distance to nearest source in reference image PSF-catalog [pixels]
      * @return True if the 'distnr' field has been set, false otherwise.
      */
    public boolean hasDistnr() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'distnr' field.
      * distance to nearest source in reference image PSF-catalog [pixels]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearDistnr() {
      distnr = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'magnr' field.
      * magnitude of nearest source in reference image PSF-catalog [mag]
      * @return The value.
      */
    public java.lang.Float getMagnr() {
      return magnr;
    }

    /**
      * Sets the value of the 'magnr' field.
      * magnitude of nearest source in reference image PSF-catalog [mag]
      * @param value The value of 'magnr'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setMagnr(java.lang.Float value) {
      validate(fields()[23], value);
      this.magnr = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'magnr' field has been set.
      * magnitude of nearest source in reference image PSF-catalog [mag]
      * @return True if the 'magnr' field has been set, false otherwise.
      */
    public boolean hasMagnr() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'magnr' field.
      * magnitude of nearest source in reference image PSF-catalog [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearMagnr() {
      magnr = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'sigmagnr' field.
      * 1-sigma uncertainty in magnr [mag]
      * @return The value.
      */
    public java.lang.Float getSigmagnr() {
      return sigmagnr;
    }

    /**
      * Sets the value of the 'sigmagnr' field.
      * 1-sigma uncertainty in magnr [mag]
      * @param value The value of 'sigmagnr'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSigmagnr(java.lang.Float value) {
      validate(fields()[24], value);
      this.sigmagnr = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'sigmagnr' field has been set.
      * 1-sigma uncertainty in magnr [mag]
      * @return True if the 'sigmagnr' field has been set, false otherwise.
      */
    public boolean hasSigmagnr() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'sigmagnr' field.
      * 1-sigma uncertainty in magnr [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSigmagnr() {
      sigmagnr = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'chinr' field.
      * DAOPhot chi parameter of nearest source in reference image PSF-catalog
      * @return The value.
      */
    public java.lang.Float getChinr() {
      return chinr;
    }

    /**
      * Sets the value of the 'chinr' field.
      * DAOPhot chi parameter of nearest source in reference image PSF-catalog
      * @param value The value of 'chinr'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setChinr(java.lang.Float value) {
      validate(fields()[25], value);
      this.chinr = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'chinr' field has been set.
      * DAOPhot chi parameter of nearest source in reference image PSF-catalog
      * @return True if the 'chinr' field has been set, false otherwise.
      */
    public boolean hasChinr() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'chinr' field.
      * DAOPhot chi parameter of nearest source in reference image PSF-catalog
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearChinr() {
      chinr = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'sharpnr' field.
      * DAOPhot sharp parameter of nearest source in reference image PSF-catalog
      * @return The value.
      */
    public java.lang.Float getSharpnr() {
      return sharpnr;
    }

    /**
      * Sets the value of the 'sharpnr' field.
      * DAOPhot sharp parameter of nearest source in reference image PSF-catalog
      * @param value The value of 'sharpnr'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSharpnr(java.lang.Float value) {
      validate(fields()[26], value);
      this.sharpnr = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'sharpnr' field has been set.
      * DAOPhot sharp parameter of nearest source in reference image PSF-catalog
      * @return True if the 'sharpnr' field has been set, false otherwise.
      */
    public boolean hasSharpnr() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'sharpnr' field.
      * DAOPhot sharp parameter of nearest source in reference image PSF-catalog
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSharpnr() {
      sharpnr = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'sky' field.
      * Local sky background estimate [DN]
      * @return The value.
      */
    public java.lang.Float getSky() {
      return sky;
    }

    /**
      * Sets the value of the 'sky' field.
      * Local sky background estimate [DN]
      * @param value The value of 'sky'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSky(java.lang.Float value) {
      validate(fields()[27], value);
      this.sky = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'sky' field has been set.
      * Local sky background estimate [DN]
      * @return True if the 'sky' field has been set, false otherwise.
      */
    public boolean hasSky() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'sky' field.
      * Local sky background estimate [DN]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSky() {
      sky = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'magdiff' field.
      * Difference: magap - magpsf [mag]
      * @return The value.
      */
    public java.lang.Float getMagdiff() {
      return magdiff;
    }

    /**
      * Sets the value of the 'magdiff' field.
      * Difference: magap - magpsf [mag]
      * @param value The value of 'magdiff'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setMagdiff(java.lang.Float value) {
      validate(fields()[28], value);
      this.magdiff = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'magdiff' field has been set.
      * Difference: magap - magpsf [mag]
      * @return True if the 'magdiff' field has been set, false otherwise.
      */
    public boolean hasMagdiff() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'magdiff' field.
      * Difference: magap - magpsf [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearMagdiff() {
      magdiff = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'fwhm' field.
      * Full Width Half Max assuming a Gaussian core, from SExtractor [pixels]
      * @return The value.
      */
    public java.lang.Float getFwhm() {
      return fwhm;
    }

    /**
      * Sets the value of the 'fwhm' field.
      * Full Width Half Max assuming a Gaussian core, from SExtractor [pixels]
      * @param value The value of 'fwhm'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setFwhm(java.lang.Float value) {
      validate(fields()[29], value);
      this.fwhm = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'fwhm' field has been set.
      * Full Width Half Max assuming a Gaussian core, from SExtractor [pixels]
      * @return True if the 'fwhm' field has been set, false otherwise.
      */
    public boolean hasFwhm() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'fwhm' field.
      * Full Width Half Max assuming a Gaussian core, from SExtractor [pixels]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearFwhm() {
      fwhm = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'classtar' field.
      * Star/Galaxy classification score from SExtractor
      * @return The value.
      */
    public java.lang.Float getClasstar() {
      return classtar;
    }

    /**
      * Sets the value of the 'classtar' field.
      * Star/Galaxy classification score from SExtractor
      * @param value The value of 'classtar'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setClasstar(java.lang.Float value) {
      validate(fields()[30], value);
      this.classtar = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'classtar' field has been set.
      * Star/Galaxy classification score from SExtractor
      * @return True if the 'classtar' field has been set, false otherwise.
      */
    public boolean hasClasstar() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'classtar' field.
      * Star/Galaxy classification score from SExtractor
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearClasstar() {
      classtar = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'mindtoedge' field.
      * Distance to nearest edge in image [pixels]
      * @return The value.
      */
    public java.lang.Float getMindtoedge() {
      return mindtoedge;
    }

    /**
      * Sets the value of the 'mindtoedge' field.
      * Distance to nearest edge in image [pixels]
      * @param value The value of 'mindtoedge'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setMindtoedge(java.lang.Float value) {
      validate(fields()[31], value);
      this.mindtoedge = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'mindtoedge' field has been set.
      * Distance to nearest edge in image [pixels]
      * @return True if the 'mindtoedge' field has been set, false otherwise.
      */
    public boolean hasMindtoedge() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'mindtoedge' field.
      * Distance to nearest edge in image [pixels]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearMindtoedge() {
      mindtoedge = null;
      fieldSetFlags()[31] = false;
      return this;
    }

    /**
      * Gets the value of the 'magfromlim' field.
      * Difference: diffmaglim - magap [mag]
      * @return The value.
      */
    public java.lang.Float getMagfromlim() {
      return magfromlim;
    }

    /**
      * Sets the value of the 'magfromlim' field.
      * Difference: diffmaglim - magap [mag]
      * @param value The value of 'magfromlim'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setMagfromlim(java.lang.Float value) {
      validate(fields()[32], value);
      this.magfromlim = value;
      fieldSetFlags()[32] = true;
      return this;
    }

    /**
      * Checks whether the 'magfromlim' field has been set.
      * Difference: diffmaglim - magap [mag]
      * @return True if the 'magfromlim' field has been set, false otherwise.
      */
    public boolean hasMagfromlim() {
      return fieldSetFlags()[32];
    }


    /**
      * Clears the value of the 'magfromlim' field.
      * Difference: diffmaglim - magap [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearMagfromlim() {
      magfromlim = null;
      fieldSetFlags()[32] = false;
      return this;
    }

    /**
      * Gets the value of the 'seeratio' field.
      * Ratio: difffwhm / fwhm
      * @return The value.
      */
    public java.lang.Float getSeeratio() {
      return seeratio;
    }

    /**
      * Sets the value of the 'seeratio' field.
      * Ratio: difffwhm / fwhm
      * @param value The value of 'seeratio'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSeeratio(java.lang.Float value) {
      validate(fields()[33], value);
      this.seeratio = value;
      fieldSetFlags()[33] = true;
      return this;
    }

    /**
      * Checks whether the 'seeratio' field has been set.
      * Ratio: difffwhm / fwhm
      * @return True if the 'seeratio' field has been set, false otherwise.
      */
    public boolean hasSeeratio() {
      return fieldSetFlags()[33];
    }


    /**
      * Clears the value of the 'seeratio' field.
      * Ratio: difffwhm / fwhm
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSeeratio() {
      seeratio = null;
      fieldSetFlags()[33] = false;
      return this;
    }

    /**
      * Gets the value of the 'aimage' field.
      * Windowed profile RMS afloat major axis from SExtractor [pixels]
      * @return The value.
      */
    public java.lang.Float getAimage() {
      return aimage;
    }

    /**
      * Sets the value of the 'aimage' field.
      * Windowed profile RMS afloat major axis from SExtractor [pixels]
      * @param value The value of 'aimage'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setAimage(java.lang.Float value) {
      validate(fields()[34], value);
      this.aimage = value;
      fieldSetFlags()[34] = true;
      return this;
    }

    /**
      * Checks whether the 'aimage' field has been set.
      * Windowed profile RMS afloat major axis from SExtractor [pixels]
      * @return True if the 'aimage' field has been set, false otherwise.
      */
    public boolean hasAimage() {
      return fieldSetFlags()[34];
    }


    /**
      * Clears the value of the 'aimage' field.
      * Windowed profile RMS afloat major axis from SExtractor [pixels]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearAimage() {
      aimage = null;
      fieldSetFlags()[34] = false;
      return this;
    }

    /**
      * Gets the value of the 'bimage' field.
      * Windowed profile RMS afloat minor axis from SExtractor [pixels]
      * @return The value.
      */
    public java.lang.Float getBimage() {
      return bimage;
    }

    /**
      * Sets the value of the 'bimage' field.
      * Windowed profile RMS afloat minor axis from SExtractor [pixels]
      * @param value The value of 'bimage'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setBimage(java.lang.Float value) {
      validate(fields()[35], value);
      this.bimage = value;
      fieldSetFlags()[35] = true;
      return this;
    }

    /**
      * Checks whether the 'bimage' field has been set.
      * Windowed profile RMS afloat minor axis from SExtractor [pixels]
      * @return True if the 'bimage' field has been set, false otherwise.
      */
    public boolean hasBimage() {
      return fieldSetFlags()[35];
    }


    /**
      * Clears the value of the 'bimage' field.
      * Windowed profile RMS afloat minor axis from SExtractor [pixels]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearBimage() {
      bimage = null;
      fieldSetFlags()[35] = false;
      return this;
    }

    /**
      * Gets the value of the 'aimagerat' field.
      * Ratio: aimage / fwhm
      * @return The value.
      */
    public java.lang.Float getAimagerat() {
      return aimagerat;
    }

    /**
      * Sets the value of the 'aimagerat' field.
      * Ratio: aimage / fwhm
      * @param value The value of 'aimagerat'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setAimagerat(java.lang.Float value) {
      validate(fields()[36], value);
      this.aimagerat = value;
      fieldSetFlags()[36] = true;
      return this;
    }

    /**
      * Checks whether the 'aimagerat' field has been set.
      * Ratio: aimage / fwhm
      * @return True if the 'aimagerat' field has been set, false otherwise.
      */
    public boolean hasAimagerat() {
      return fieldSetFlags()[36];
    }


    /**
      * Clears the value of the 'aimagerat' field.
      * Ratio: aimage / fwhm
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearAimagerat() {
      aimagerat = null;
      fieldSetFlags()[36] = false;
      return this;
    }

    /**
      * Gets the value of the 'bimagerat' field.
      * Ratio: bimage / fwhm
      * @return The value.
      */
    public java.lang.Float getBimagerat() {
      return bimagerat;
    }

    /**
      * Sets the value of the 'bimagerat' field.
      * Ratio: bimage / fwhm
      * @param value The value of 'bimagerat'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setBimagerat(java.lang.Float value) {
      validate(fields()[37], value);
      this.bimagerat = value;
      fieldSetFlags()[37] = true;
      return this;
    }

    /**
      * Checks whether the 'bimagerat' field has been set.
      * Ratio: bimage / fwhm
      * @return True if the 'bimagerat' field has been set, false otherwise.
      */
    public boolean hasBimagerat() {
      return fieldSetFlags()[37];
    }


    /**
      * Clears the value of the 'bimagerat' field.
      * Ratio: bimage / fwhm
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearBimagerat() {
      bimagerat = null;
      fieldSetFlags()[37] = false;
      return this;
    }

    /**
      * Gets the value of the 'elong' field.
      * Ratio: aimage / bimage
      * @return The value.
      */
    public java.lang.Float getElong() {
      return elong;
    }

    /**
      * Sets the value of the 'elong' field.
      * Ratio: aimage / bimage
      * @param value The value of 'elong'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setElong(java.lang.Float value) {
      validate(fields()[38], value);
      this.elong = value;
      fieldSetFlags()[38] = true;
      return this;
    }

    /**
      * Checks whether the 'elong' field has been set.
      * Ratio: aimage / bimage
      * @return True if the 'elong' field has been set, false otherwise.
      */
    public boolean hasElong() {
      return fieldSetFlags()[38];
    }


    /**
      * Clears the value of the 'elong' field.
      * Ratio: aimage / bimage
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearElong() {
      elong = null;
      fieldSetFlags()[38] = false;
      return this;
    }

    /**
      * Gets the value of the 'nneg' field.
      * number of negative pixels in a 5 x 5 pixel stamp
      * @return The value.
      */
    public java.lang.Integer getNneg() {
      return nneg;
    }

    /**
      * Sets the value of the 'nneg' field.
      * number of negative pixels in a 5 x 5 pixel stamp
      * @param value The value of 'nneg'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setNneg(java.lang.Integer value) {
      validate(fields()[39], value);
      this.nneg = value;
      fieldSetFlags()[39] = true;
      return this;
    }

    /**
      * Checks whether the 'nneg' field has been set.
      * number of negative pixels in a 5 x 5 pixel stamp
      * @return True if the 'nneg' field has been set, false otherwise.
      */
    public boolean hasNneg() {
      return fieldSetFlags()[39];
    }


    /**
      * Clears the value of the 'nneg' field.
      * number of negative pixels in a 5 x 5 pixel stamp
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearNneg() {
      nneg = null;
      fieldSetFlags()[39] = false;
      return this;
    }

    /**
      * Gets the value of the 'nbad' field.
      * number of prior-tagged bad pixels in a 5 x 5 pixel stamp
      * @return The value.
      */
    public java.lang.Integer getNbad() {
      return nbad;
    }

    /**
      * Sets the value of the 'nbad' field.
      * number of prior-tagged bad pixels in a 5 x 5 pixel stamp
      * @param value The value of 'nbad'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setNbad(java.lang.Integer value) {
      validate(fields()[40], value);
      this.nbad = value;
      fieldSetFlags()[40] = true;
      return this;
    }

    /**
      * Checks whether the 'nbad' field has been set.
      * number of prior-tagged bad pixels in a 5 x 5 pixel stamp
      * @return True if the 'nbad' field has been set, false otherwise.
      */
    public boolean hasNbad() {
      return fieldSetFlags()[40];
    }


    /**
      * Clears the value of the 'nbad' field.
      * number of prior-tagged bad pixels in a 5 x 5 pixel stamp
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearNbad() {
      nbad = null;
      fieldSetFlags()[40] = false;
      return this;
    }

    /**
      * Gets the value of the 'rb' field.
      * RealBogus quality score; range is 0 to 1 where closer to 1 is more reliable
      * @return The value.
      */
    public java.lang.Float getRb() {
      return rb;
    }

    /**
      * Sets the value of the 'rb' field.
      * RealBogus quality score; range is 0 to 1 where closer to 1 is more reliable
      * @param value The value of 'rb'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setRb(java.lang.Float value) {
      validate(fields()[41], value);
      this.rb = value;
      fieldSetFlags()[41] = true;
      return this;
    }

    /**
      * Checks whether the 'rb' field has been set.
      * RealBogus quality score; range is 0 to 1 where closer to 1 is more reliable
      * @return True if the 'rb' field has been set, false otherwise.
      */
    public boolean hasRb() {
      return fieldSetFlags()[41];
    }


    /**
      * Clears the value of the 'rb' field.
      * RealBogus quality score; range is 0 to 1 where closer to 1 is more reliable
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearRb() {
      rb = null;
      fieldSetFlags()[41] = false;
      return this;
    }

    /**
      * Gets the value of the 'ssdistnr' field.
      * distance to nearest known solar system object if exists within 30 arcsec [arcsec]
      * @return The value.
      */
    public java.lang.Float getSsdistnr() {
      return ssdistnr;
    }

    /**
      * Sets the value of the 'ssdistnr' field.
      * distance to nearest known solar system object if exists within 30 arcsec [arcsec]
      * @param value The value of 'ssdistnr'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSsdistnr(java.lang.Float value) {
      validate(fields()[42], value);
      this.ssdistnr = value;
      fieldSetFlags()[42] = true;
      return this;
    }

    /**
      * Checks whether the 'ssdistnr' field has been set.
      * distance to nearest known solar system object if exists within 30 arcsec [arcsec]
      * @return True if the 'ssdistnr' field has been set, false otherwise.
      */
    public boolean hasSsdistnr() {
      return fieldSetFlags()[42];
    }


    /**
      * Clears the value of the 'ssdistnr' field.
      * distance to nearest known solar system object if exists within 30 arcsec [arcsec]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSsdistnr() {
      ssdistnr = null;
      fieldSetFlags()[42] = false;
      return this;
    }

    /**
      * Gets the value of the 'ssmagnr' field.
      * magnitude of nearest known solar system object if exists within 30 arcsec (usually V-band from MPC archive) [mag]
      * @return The value.
      */
    public java.lang.Float getSsmagnr() {
      return ssmagnr;
    }

    /**
      * Sets the value of the 'ssmagnr' field.
      * magnitude of nearest known solar system object if exists within 30 arcsec (usually V-band from MPC archive) [mag]
      * @param value The value of 'ssmagnr'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSsmagnr(java.lang.Float value) {
      validate(fields()[43], value);
      this.ssmagnr = value;
      fieldSetFlags()[43] = true;
      return this;
    }

    /**
      * Checks whether the 'ssmagnr' field has been set.
      * magnitude of nearest known solar system object if exists within 30 arcsec (usually V-band from MPC archive) [mag]
      * @return True if the 'ssmagnr' field has been set, false otherwise.
      */
    public boolean hasSsmagnr() {
      return fieldSetFlags()[43];
    }


    /**
      * Clears the value of the 'ssmagnr' field.
      * magnitude of nearest known solar system object if exists within 30 arcsec (usually V-band from MPC archive) [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSsmagnr() {
      ssmagnr = null;
      fieldSetFlags()[43] = false;
      return this;
    }

    /**
      * Gets the value of the 'ssnamenr' field.
      * name of nearest known solar system object if exists within 30 arcsec (from MPC archive)
      * @return The value.
      */
    public java.lang.CharSequence getSsnamenr() {
      return ssnamenr;
    }

    /**
      * Sets the value of the 'ssnamenr' field.
      * name of nearest known solar system object if exists within 30 arcsec (from MPC archive)
      * @param value The value of 'ssnamenr'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSsnamenr(java.lang.CharSequence value) {
      validate(fields()[44], value);
      this.ssnamenr = value;
      fieldSetFlags()[44] = true;
      return this;
    }

    /**
      * Checks whether the 'ssnamenr' field has been set.
      * name of nearest known solar system object if exists within 30 arcsec (from MPC archive)
      * @return True if the 'ssnamenr' field has been set, false otherwise.
      */
    public boolean hasSsnamenr() {
      return fieldSetFlags()[44];
    }


    /**
      * Clears the value of the 'ssnamenr' field.
      * name of nearest known solar system object if exists within 30 arcsec (from MPC archive)
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSsnamenr() {
      ssnamenr = null;
      fieldSetFlags()[44] = false;
      return this;
    }

    /**
      * Gets the value of the 'sumrat' field.
      * Ratio: sum(pixels) / sum(|pixels|) in a 5 x 5 pixel stamp where stamp is first median-filtered to mitigate outliers
      * @return The value.
      */
    public java.lang.Float getSumrat() {
      return sumrat;
    }

    /**
      * Sets the value of the 'sumrat' field.
      * Ratio: sum(pixels) / sum(|pixels|) in a 5 x 5 pixel stamp where stamp is first median-filtered to mitigate outliers
      * @param value The value of 'sumrat'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSumrat(java.lang.Float value) {
      validate(fields()[45], value);
      this.sumrat = value;
      fieldSetFlags()[45] = true;
      return this;
    }

    /**
      * Checks whether the 'sumrat' field has been set.
      * Ratio: sum(pixels) / sum(|pixels|) in a 5 x 5 pixel stamp where stamp is first median-filtered to mitigate outliers
      * @return True if the 'sumrat' field has been set, false otherwise.
      */
    public boolean hasSumrat() {
      return fieldSetFlags()[45];
    }


    /**
      * Clears the value of the 'sumrat' field.
      * Ratio: sum(pixels) / sum(|pixels|) in a 5 x 5 pixel stamp where stamp is first median-filtered to mitigate outliers
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSumrat() {
      sumrat = null;
      fieldSetFlags()[45] = false;
      return this;
    }

    /**
      * Gets the value of the 'magapbig' field.
      * Aperture mag using 18 pixel diameter aperture [mag]
      * @return The value.
      */
    public java.lang.Float getMagapbig() {
      return magapbig;
    }

    /**
      * Sets the value of the 'magapbig' field.
      * Aperture mag using 18 pixel diameter aperture [mag]
      * @param value The value of 'magapbig'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setMagapbig(java.lang.Float value) {
      validate(fields()[46], value);
      this.magapbig = value;
      fieldSetFlags()[46] = true;
      return this;
    }

    /**
      * Checks whether the 'magapbig' field has been set.
      * Aperture mag using 18 pixel diameter aperture [mag]
      * @return True if the 'magapbig' field has been set, false otherwise.
      */
    public boolean hasMagapbig() {
      return fieldSetFlags()[46];
    }


    /**
      * Clears the value of the 'magapbig' field.
      * Aperture mag using 18 pixel diameter aperture [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearMagapbig() {
      magapbig = null;
      fieldSetFlags()[46] = false;
      return this;
    }

    /**
      * Gets the value of the 'sigmagapbig' field.
      * 1-sigma uncertainty in magapbig [mag]
      * @return The value.
      */
    public java.lang.Float getSigmagapbig() {
      return sigmagapbig;
    }

    /**
      * Sets the value of the 'sigmagapbig' field.
      * 1-sigma uncertainty in magapbig [mag]
      * @param value The value of 'sigmagapbig'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSigmagapbig(java.lang.Float value) {
      validate(fields()[47], value);
      this.sigmagapbig = value;
      fieldSetFlags()[47] = true;
      return this;
    }

    /**
      * Checks whether the 'sigmagapbig' field has been set.
      * 1-sigma uncertainty in magapbig [mag]
      * @return True if the 'sigmagapbig' field has been set, false otherwise.
      */
    public boolean hasSigmagapbig() {
      return fieldSetFlags()[47];
    }


    /**
      * Clears the value of the 'sigmagapbig' field.
      * 1-sigma uncertainty in magapbig [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSigmagapbig() {
      sigmagapbig = null;
      fieldSetFlags()[47] = false;
      return this;
    }

    /**
      * Gets the value of the 'ranr' field.
      * Right Ascension of nearest source in reference image PSF-catalog; J2000 [deg]
      * @return The value.
      */
    public java.lang.Double getRanr() {
      return ranr;
    }

    /**
      * Sets the value of the 'ranr' field.
      * Right Ascension of nearest source in reference image PSF-catalog; J2000 [deg]
      * @param value The value of 'ranr'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setRanr(double value) {
      validate(fields()[48], value);
      this.ranr = value;
      fieldSetFlags()[48] = true;
      return this;
    }

    /**
      * Checks whether the 'ranr' field has been set.
      * Right Ascension of nearest source in reference image PSF-catalog; J2000 [deg]
      * @return True if the 'ranr' field has been set, false otherwise.
      */
    public boolean hasRanr() {
      return fieldSetFlags()[48];
    }


    /**
      * Clears the value of the 'ranr' field.
      * Right Ascension of nearest source in reference image PSF-catalog; J2000 [deg]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearRanr() {
      fieldSetFlags()[48] = false;
      return this;
    }

    /**
      * Gets the value of the 'decnr' field.
      * Declination of nearest source in reference image PSF-catalog; J2000 [deg]
      * @return The value.
      */
    public java.lang.Double getDecnr() {
      return decnr;
    }

    /**
      * Sets the value of the 'decnr' field.
      * Declination of nearest source in reference image PSF-catalog; J2000 [deg]
      * @param value The value of 'decnr'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setDecnr(double value) {
      validate(fields()[49], value);
      this.decnr = value;
      fieldSetFlags()[49] = true;
      return this;
    }

    /**
      * Checks whether the 'decnr' field has been set.
      * Declination of nearest source in reference image PSF-catalog; J2000 [deg]
      * @return True if the 'decnr' field has been set, false otherwise.
      */
    public boolean hasDecnr() {
      return fieldSetFlags()[49];
    }


    /**
      * Clears the value of the 'decnr' field.
      * Declination of nearest source in reference image PSF-catalog; J2000 [deg]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearDecnr() {
      fieldSetFlags()[49] = false;
      return this;
    }

    /**
      * Gets the value of the 'sgmag1' field.
      * g-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return The value.
      */
    public java.lang.Float getSgmag1() {
      return sgmag1;
    }

    /**
      * Sets the value of the 'sgmag1' field.
      * g-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @param value The value of 'sgmag1'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSgmag1(java.lang.Float value) {
      validate(fields()[50], value);
      this.sgmag1 = value;
      fieldSetFlags()[50] = true;
      return this;
    }

    /**
      * Checks whether the 'sgmag1' field has been set.
      * g-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return True if the 'sgmag1' field has been set, false otherwise.
      */
    public boolean hasSgmag1() {
      return fieldSetFlags()[50];
    }


    /**
      * Clears the value of the 'sgmag1' field.
      * g-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSgmag1() {
      sgmag1 = null;
      fieldSetFlags()[50] = false;
      return this;
    }

    /**
      * Gets the value of the 'srmag1' field.
      * r-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return The value.
      */
    public java.lang.Float getSrmag1() {
      return srmag1;
    }

    /**
      * Sets the value of the 'srmag1' field.
      * r-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @param value The value of 'srmag1'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSrmag1(java.lang.Float value) {
      validate(fields()[51], value);
      this.srmag1 = value;
      fieldSetFlags()[51] = true;
      return this;
    }

    /**
      * Checks whether the 'srmag1' field has been set.
      * r-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return True if the 'srmag1' field has been set, false otherwise.
      */
    public boolean hasSrmag1() {
      return fieldSetFlags()[51];
    }


    /**
      * Clears the value of the 'srmag1' field.
      * r-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSrmag1() {
      srmag1 = null;
      fieldSetFlags()[51] = false;
      return this;
    }

    /**
      * Gets the value of the 'simag1' field.
      * i-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return The value.
      */
    public java.lang.Float getSimag1() {
      return simag1;
    }

    /**
      * Sets the value of the 'simag1' field.
      * i-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @param value The value of 'simag1'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSimag1(java.lang.Float value) {
      validate(fields()[52], value);
      this.simag1 = value;
      fieldSetFlags()[52] = true;
      return this;
    }

    /**
      * Checks whether the 'simag1' field has been set.
      * i-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return True if the 'simag1' field has been set, false otherwise.
      */
    public boolean hasSimag1() {
      return fieldSetFlags()[52];
    }


    /**
      * Clears the value of the 'simag1' field.
      * i-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSimag1() {
      simag1 = null;
      fieldSetFlags()[52] = false;
      return this;
    }

    /**
      * Gets the value of the 'szmag1' field.
      * z-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return The value.
      */
    public java.lang.Float getSzmag1() {
      return szmag1;
    }

    /**
      * Sets the value of the 'szmag1' field.
      * z-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @param value The value of 'szmag1'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSzmag1(java.lang.Float value) {
      validate(fields()[53], value);
      this.szmag1 = value;
      fieldSetFlags()[53] = true;
      return this;
    }

    /**
      * Checks whether the 'szmag1' field has been set.
      * z-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return True if the 'szmag1' field has been set, false otherwise.
      */
    public boolean hasSzmag1() {
      return fieldSetFlags()[53];
    }


    /**
      * Clears the value of the 'szmag1' field.
      * z-band PSF-fit magnitude of closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSzmag1() {
      szmag1 = null;
      fieldSetFlags()[53] = false;
      return this;
    }

    /**
      * Gets the value of the 'sgscore1' field.
      * Star/Galaxy score of closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
      * @return The value.
      */
    public java.lang.Float getSgscore1() {
      return sgscore1;
    }

    /**
      * Sets the value of the 'sgscore1' field.
      * Star/Galaxy score of closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
      * @param value The value of 'sgscore1'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSgscore1(java.lang.Float value) {
      validate(fields()[54], value);
      this.sgscore1 = value;
      fieldSetFlags()[54] = true;
      return this;
    }

    /**
      * Checks whether the 'sgscore1' field has been set.
      * Star/Galaxy score of closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
      * @return True if the 'sgscore1' field has been set, false otherwise.
      */
    public boolean hasSgscore1() {
      return fieldSetFlags()[54];
    }


    /**
      * Clears the value of the 'sgscore1' field.
      * Star/Galaxy score of closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSgscore1() {
      sgscore1 = null;
      fieldSetFlags()[54] = false;
      return this;
    }

    /**
      * Gets the value of the 'distpsnr1' field.
      * Distance to closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
      * @return The value.
      */
    public java.lang.Float getDistpsnr1() {
      return distpsnr1;
    }

    /**
      * Sets the value of the 'distpsnr1' field.
      * Distance to closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
      * @param value The value of 'distpsnr1'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setDistpsnr1(java.lang.Float value) {
      validate(fields()[55], value);
      this.distpsnr1 = value;
      fieldSetFlags()[55] = true;
      return this;
    }

    /**
      * Checks whether the 'distpsnr1' field has been set.
      * Distance to closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
      * @return True if the 'distpsnr1' field has been set, false otherwise.
      */
    public boolean hasDistpsnr1() {
      return fieldSetFlags()[55];
    }


    /**
      * Clears the value of the 'distpsnr1' field.
      * Distance to closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearDistpsnr1() {
      distpsnr1 = null;
      fieldSetFlags()[55] = false;
      return this;
    }

    /**
      * Gets the value of the 'ndethist' field.
      * Number of spatially-coincident detections falling within 1.5 arcsec going back to beginning of survey; only detections that fell on the same field and readout-channel ID where the input candidate was observed are counted
      * @return The value.
      */
    public java.lang.Integer getNdethist() {
      return ndethist;
    }

    /**
      * Sets the value of the 'ndethist' field.
      * Number of spatially-coincident detections falling within 1.5 arcsec going back to beginning of survey; only detections that fell on the same field and readout-channel ID where the input candidate was observed are counted
      * @param value The value of 'ndethist'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setNdethist(int value) {
      validate(fields()[56], value);
      this.ndethist = value;
      fieldSetFlags()[56] = true;
      return this;
    }

    /**
      * Checks whether the 'ndethist' field has been set.
      * Number of spatially-coincident detections falling within 1.5 arcsec going back to beginning of survey; only detections that fell on the same field and readout-channel ID where the input candidate was observed are counted
      * @return True if the 'ndethist' field has been set, false otherwise.
      */
    public boolean hasNdethist() {
      return fieldSetFlags()[56];
    }


    /**
      * Clears the value of the 'ndethist' field.
      * Number of spatially-coincident detections falling within 1.5 arcsec going back to beginning of survey; only detections that fell on the same field and readout-channel ID where the input candidate was observed are counted
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearNdethist() {
      fieldSetFlags()[56] = false;
      return this;
    }

    /**
      * Gets the value of the 'ncovhist' field.
      * Number of times input candidate position fell on any field and readout-channel going back to beginning of survey
      * @return The value.
      */
    public java.lang.Integer getNcovhist() {
      return ncovhist;
    }

    /**
      * Sets the value of the 'ncovhist' field.
      * Number of times input candidate position fell on any field and readout-channel going back to beginning of survey
      * @param value The value of 'ncovhist'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setNcovhist(int value) {
      validate(fields()[57], value);
      this.ncovhist = value;
      fieldSetFlags()[57] = true;
      return this;
    }

    /**
      * Checks whether the 'ncovhist' field has been set.
      * Number of times input candidate position fell on any field and readout-channel going back to beginning of survey
      * @return True if the 'ncovhist' field has been set, false otherwise.
      */
    public boolean hasNcovhist() {
      return fieldSetFlags()[57];
    }


    /**
      * Clears the value of the 'ncovhist' field.
      * Number of times input candidate position fell on any field and readout-channel going back to beginning of survey
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearNcovhist() {
      fieldSetFlags()[57] = false;
      return this;
    }

    /**
      * Gets the value of the 'jdstarthist' field.
      * Earliest Julian date of epoch corresponding to ndethist [days]
      * @return The value.
      */
    public java.lang.Double getJdstarthist() {
      return jdstarthist;
    }

    /**
      * Sets the value of the 'jdstarthist' field.
      * Earliest Julian date of epoch corresponding to ndethist [days]
      * @param value The value of 'jdstarthist'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setJdstarthist(java.lang.Double value) {
      validate(fields()[58], value);
      this.jdstarthist = value;
      fieldSetFlags()[58] = true;
      return this;
    }

    /**
      * Checks whether the 'jdstarthist' field has been set.
      * Earliest Julian date of epoch corresponding to ndethist [days]
      * @return True if the 'jdstarthist' field has been set, false otherwise.
      */
    public boolean hasJdstarthist() {
      return fieldSetFlags()[58];
    }


    /**
      * Clears the value of the 'jdstarthist' field.
      * Earliest Julian date of epoch corresponding to ndethist [days]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearJdstarthist() {
      jdstarthist = null;
      fieldSetFlags()[58] = false;
      return this;
    }

    /**
      * Gets the value of the 'jdendhist' field.
      * Latest Julian date of epoch corresponding to ndethist [days]
      * @return The value.
      */
    public java.lang.Double getJdendhist() {
      return jdendhist;
    }

    /**
      * Sets the value of the 'jdendhist' field.
      * Latest Julian date of epoch corresponding to ndethist [days]
      * @param value The value of 'jdendhist'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setJdendhist(java.lang.Double value) {
      validate(fields()[59], value);
      this.jdendhist = value;
      fieldSetFlags()[59] = true;
      return this;
    }

    /**
      * Checks whether the 'jdendhist' field has been set.
      * Latest Julian date of epoch corresponding to ndethist [days]
      * @return True if the 'jdendhist' field has been set, false otherwise.
      */
    public boolean hasJdendhist() {
      return fieldSetFlags()[59];
    }


    /**
      * Clears the value of the 'jdendhist' field.
      * Latest Julian date of epoch corresponding to ndethist [days]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearJdendhist() {
      jdendhist = null;
      fieldSetFlags()[59] = false;
      return this;
    }

    /**
      * Gets the value of the 'scorr' field.
      * Peak-pixel signal-to-noise ratio in point source matched-filtered detection image
      * @return The value.
      */
    public java.lang.Double getScorr() {
      return scorr;
    }

    /**
      * Sets the value of the 'scorr' field.
      * Peak-pixel signal-to-noise ratio in point source matched-filtered detection image
      * @param value The value of 'scorr'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setScorr(java.lang.Double value) {
      validate(fields()[60], value);
      this.scorr = value;
      fieldSetFlags()[60] = true;
      return this;
    }

    /**
      * Checks whether the 'scorr' field has been set.
      * Peak-pixel signal-to-noise ratio in point source matched-filtered detection image
      * @return True if the 'scorr' field has been set, false otherwise.
      */
    public boolean hasScorr() {
      return fieldSetFlags()[60];
    }


    /**
      * Clears the value of the 'scorr' field.
      * Peak-pixel signal-to-noise ratio in point source matched-filtered detection image
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearScorr() {
      scorr = null;
      fieldSetFlags()[60] = false;
      return this;
    }

    /**
      * Gets the value of the 'tooflag' field.
      * 1 => candidate is from a Target-of-Opportunity (ToO) exposure; 0 => candidate is from a non-ToO exposure
      * @return The value.
      */
    public java.lang.Integer getTooflag() {
      return tooflag;
    }

    /**
      * Sets the value of the 'tooflag' field.
      * 1 => candidate is from a Target-of-Opportunity (ToO) exposure; 0 => candidate is from a non-ToO exposure
      * @param value The value of 'tooflag'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setTooflag(java.lang.Integer value) {
      validate(fields()[61], value);
      this.tooflag = value;
      fieldSetFlags()[61] = true;
      return this;
    }

    /**
      * Checks whether the 'tooflag' field has been set.
      * 1 => candidate is from a Target-of-Opportunity (ToO) exposure; 0 => candidate is from a non-ToO exposure
      * @return True if the 'tooflag' field has been set, false otherwise.
      */
    public boolean hasTooflag() {
      return fieldSetFlags()[61];
    }


    /**
      * Clears the value of the 'tooflag' field.
      * 1 => candidate is from a Target-of-Opportunity (ToO) exposure; 0 => candidate is from a non-ToO exposure
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearTooflag() {
      tooflag = null;
      fieldSetFlags()[61] = false;
      return this;
    }

    /**
      * Gets the value of the 'objectidps1' field.
      * Object ID of closest source from PS1 catalog; if exists within 30 arcsec
      * @return The value.
      */
    public java.lang.Long getObjectidps1() {
      return objectidps1;
    }

    /**
      * Sets the value of the 'objectidps1' field.
      * Object ID of closest source from PS1 catalog; if exists within 30 arcsec
      * @param value The value of 'objectidps1'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setObjectidps1(java.lang.Long value) {
      validate(fields()[62], value);
      this.objectidps1 = value;
      fieldSetFlags()[62] = true;
      return this;
    }

    /**
      * Checks whether the 'objectidps1' field has been set.
      * Object ID of closest source from PS1 catalog; if exists within 30 arcsec
      * @return True if the 'objectidps1' field has been set, false otherwise.
      */
    public boolean hasObjectidps1() {
      return fieldSetFlags()[62];
    }


    /**
      * Clears the value of the 'objectidps1' field.
      * Object ID of closest source from PS1 catalog; if exists within 30 arcsec
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearObjectidps1() {
      objectidps1 = null;
      fieldSetFlags()[62] = false;
      return this;
    }

    /**
      * Gets the value of the 'objectidps2' field.
      * Object ID of second closest source from PS1 catalog; if exists within 30 arcsec
      * @return The value.
      */
    public java.lang.Long getObjectidps2() {
      return objectidps2;
    }

    /**
      * Sets the value of the 'objectidps2' field.
      * Object ID of second closest source from PS1 catalog; if exists within 30 arcsec
      * @param value The value of 'objectidps2'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setObjectidps2(java.lang.Long value) {
      validate(fields()[63], value);
      this.objectidps2 = value;
      fieldSetFlags()[63] = true;
      return this;
    }

    /**
      * Checks whether the 'objectidps2' field has been set.
      * Object ID of second closest source from PS1 catalog; if exists within 30 arcsec
      * @return True if the 'objectidps2' field has been set, false otherwise.
      */
    public boolean hasObjectidps2() {
      return fieldSetFlags()[63];
    }


    /**
      * Clears the value of the 'objectidps2' field.
      * Object ID of second closest source from PS1 catalog; if exists within 30 arcsec
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearObjectidps2() {
      objectidps2 = null;
      fieldSetFlags()[63] = false;
      return this;
    }

    /**
      * Gets the value of the 'sgmag2' field.
      * g-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return The value.
      */
    public java.lang.Float getSgmag2() {
      return sgmag2;
    }

    /**
      * Sets the value of the 'sgmag2' field.
      * g-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @param value The value of 'sgmag2'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSgmag2(java.lang.Float value) {
      validate(fields()[64], value);
      this.sgmag2 = value;
      fieldSetFlags()[64] = true;
      return this;
    }

    /**
      * Checks whether the 'sgmag2' field has been set.
      * g-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return True if the 'sgmag2' field has been set, false otherwise.
      */
    public boolean hasSgmag2() {
      return fieldSetFlags()[64];
    }


    /**
      * Clears the value of the 'sgmag2' field.
      * g-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSgmag2() {
      sgmag2 = null;
      fieldSetFlags()[64] = false;
      return this;
    }

    /**
      * Gets the value of the 'srmag2' field.
      * r-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return The value.
      */
    public java.lang.Float getSrmag2() {
      return srmag2;
    }

    /**
      * Sets the value of the 'srmag2' field.
      * r-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @param value The value of 'srmag2'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSrmag2(java.lang.Float value) {
      validate(fields()[65], value);
      this.srmag2 = value;
      fieldSetFlags()[65] = true;
      return this;
    }

    /**
      * Checks whether the 'srmag2' field has been set.
      * r-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return True if the 'srmag2' field has been set, false otherwise.
      */
    public boolean hasSrmag2() {
      return fieldSetFlags()[65];
    }


    /**
      * Clears the value of the 'srmag2' field.
      * r-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSrmag2() {
      srmag2 = null;
      fieldSetFlags()[65] = false;
      return this;
    }

    /**
      * Gets the value of the 'simag2' field.
      * i-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return The value.
      */
    public java.lang.Float getSimag2() {
      return simag2;
    }

    /**
      * Sets the value of the 'simag2' field.
      * i-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @param value The value of 'simag2'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSimag2(java.lang.Float value) {
      validate(fields()[66], value);
      this.simag2 = value;
      fieldSetFlags()[66] = true;
      return this;
    }

    /**
      * Checks whether the 'simag2' field has been set.
      * i-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return True if the 'simag2' field has been set, false otherwise.
      */
    public boolean hasSimag2() {
      return fieldSetFlags()[66];
    }


    /**
      * Clears the value of the 'simag2' field.
      * i-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSimag2() {
      simag2 = null;
      fieldSetFlags()[66] = false;
      return this;
    }

    /**
      * Gets the value of the 'szmag2' field.
      * z-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return The value.
      */
    public java.lang.Float getSzmag2() {
      return szmag2;
    }

    /**
      * Sets the value of the 'szmag2' field.
      * z-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @param value The value of 'szmag2'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSzmag2(java.lang.Float value) {
      validate(fields()[67], value);
      this.szmag2 = value;
      fieldSetFlags()[67] = true;
      return this;
    }

    /**
      * Checks whether the 'szmag2' field has been set.
      * z-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return True if the 'szmag2' field has been set, false otherwise.
      */
    public boolean hasSzmag2() {
      return fieldSetFlags()[67];
    }


    /**
      * Clears the value of the 'szmag2' field.
      * z-band PSF-fit magnitude of second closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSzmag2() {
      szmag2 = null;
      fieldSetFlags()[67] = false;
      return this;
    }

    /**
      * Gets the value of the 'sgscore2' field.
      * Star/Galaxy score of second closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
      * @return The value.
      */
    public java.lang.Float getSgscore2() {
      return sgscore2;
    }

    /**
      * Sets the value of the 'sgscore2' field.
      * Star/Galaxy score of second closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
      * @param value The value of 'sgscore2'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSgscore2(java.lang.Float value) {
      validate(fields()[68], value);
      this.sgscore2 = value;
      fieldSetFlags()[68] = true;
      return this;
    }

    /**
      * Checks whether the 'sgscore2' field has been set.
      * Star/Galaxy score of second closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
      * @return True if the 'sgscore2' field has been set, false otherwise.
      */
    public boolean hasSgscore2() {
      return fieldSetFlags()[68];
    }


    /**
      * Clears the value of the 'sgscore2' field.
      * Star/Galaxy score of second closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSgscore2() {
      sgscore2 = null;
      fieldSetFlags()[68] = false;
      return this;
    }

    /**
      * Gets the value of the 'distpsnr2' field.
      * Distance to second closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
      * @return The value.
      */
    public java.lang.Float getDistpsnr2() {
      return distpsnr2;
    }

    /**
      * Sets the value of the 'distpsnr2' field.
      * Distance to second closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
      * @param value The value of 'distpsnr2'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setDistpsnr2(java.lang.Float value) {
      validate(fields()[69], value);
      this.distpsnr2 = value;
      fieldSetFlags()[69] = true;
      return this;
    }

    /**
      * Checks whether the 'distpsnr2' field has been set.
      * Distance to second closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
      * @return True if the 'distpsnr2' field has been set, false otherwise.
      */
    public boolean hasDistpsnr2() {
      return fieldSetFlags()[69];
    }


    /**
      * Clears the value of the 'distpsnr2' field.
      * Distance to second closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearDistpsnr2() {
      distpsnr2 = null;
      fieldSetFlags()[69] = false;
      return this;
    }

    /**
      * Gets the value of the 'objectidps3' field.
      * Object ID of third closest source from PS1 catalog; if exists within 30 arcsec
      * @return The value.
      */
    public java.lang.Long getObjectidps3() {
      return objectidps3;
    }

    /**
      * Sets the value of the 'objectidps3' field.
      * Object ID of third closest source from PS1 catalog; if exists within 30 arcsec
      * @param value The value of 'objectidps3'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setObjectidps3(java.lang.Long value) {
      validate(fields()[70], value);
      this.objectidps3 = value;
      fieldSetFlags()[70] = true;
      return this;
    }

    /**
      * Checks whether the 'objectidps3' field has been set.
      * Object ID of third closest source from PS1 catalog; if exists within 30 arcsec
      * @return True if the 'objectidps3' field has been set, false otherwise.
      */
    public boolean hasObjectidps3() {
      return fieldSetFlags()[70];
    }


    /**
      * Clears the value of the 'objectidps3' field.
      * Object ID of third closest source from PS1 catalog; if exists within 30 arcsec
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearObjectidps3() {
      objectidps3 = null;
      fieldSetFlags()[70] = false;
      return this;
    }

    /**
      * Gets the value of the 'sgmag3' field.
      * g-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return The value.
      */
    public java.lang.Float getSgmag3() {
      return sgmag3;
    }

    /**
      * Sets the value of the 'sgmag3' field.
      * g-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @param value The value of 'sgmag3'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSgmag3(java.lang.Float value) {
      validate(fields()[71], value);
      this.sgmag3 = value;
      fieldSetFlags()[71] = true;
      return this;
    }

    /**
      * Checks whether the 'sgmag3' field has been set.
      * g-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return True if the 'sgmag3' field has been set, false otherwise.
      */
    public boolean hasSgmag3() {
      return fieldSetFlags()[71];
    }


    /**
      * Clears the value of the 'sgmag3' field.
      * g-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSgmag3() {
      sgmag3 = null;
      fieldSetFlags()[71] = false;
      return this;
    }

    /**
      * Gets the value of the 'srmag3' field.
      * r-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return The value.
      */
    public java.lang.Float getSrmag3() {
      return srmag3;
    }

    /**
      * Sets the value of the 'srmag3' field.
      * r-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @param value The value of 'srmag3'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSrmag3(java.lang.Float value) {
      validate(fields()[72], value);
      this.srmag3 = value;
      fieldSetFlags()[72] = true;
      return this;
    }

    /**
      * Checks whether the 'srmag3' field has been set.
      * r-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return True if the 'srmag3' field has been set, false otherwise.
      */
    public boolean hasSrmag3() {
      return fieldSetFlags()[72];
    }


    /**
      * Clears the value of the 'srmag3' field.
      * r-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSrmag3() {
      srmag3 = null;
      fieldSetFlags()[72] = false;
      return this;
    }

    /**
      * Gets the value of the 'simag3' field.
      * i-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return The value.
      */
    public java.lang.Float getSimag3() {
      return simag3;
    }

    /**
      * Sets the value of the 'simag3' field.
      * i-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @param value The value of 'simag3'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSimag3(java.lang.Float value) {
      validate(fields()[73], value);
      this.simag3 = value;
      fieldSetFlags()[73] = true;
      return this;
    }

    /**
      * Checks whether the 'simag3' field has been set.
      * i-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return True if the 'simag3' field has been set, false otherwise.
      */
    public boolean hasSimag3() {
      return fieldSetFlags()[73];
    }


    /**
      * Clears the value of the 'simag3' field.
      * i-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSimag3() {
      simag3 = null;
      fieldSetFlags()[73] = false;
      return this;
    }

    /**
      * Gets the value of the 'szmag3' field.
      * z-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return The value.
      */
    public java.lang.Float getSzmag3() {
      return szmag3;
    }

    /**
      * Sets the value of the 'szmag3' field.
      * z-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @param value The value of 'szmag3'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSzmag3(java.lang.Float value) {
      validate(fields()[74], value);
      this.szmag3 = value;
      fieldSetFlags()[74] = true;
      return this;
    }

    /**
      * Checks whether the 'szmag3' field has been set.
      * z-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return True if the 'szmag3' field has been set, false otherwise.
      */
    public boolean hasSzmag3() {
      return fieldSetFlags()[74];
    }


    /**
      * Clears the value of the 'szmag3' field.
      * z-band PSF-fit magnitude of third closest source from PS1 catalog; if exists within 30 arcsec [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSzmag3() {
      szmag3 = null;
      fieldSetFlags()[74] = false;
      return this;
    }

    /**
      * Gets the value of the 'sgscore3' field.
      * Star/Galaxy score of third closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
      * @return The value.
      */
    public java.lang.Float getSgscore3() {
      return sgscore3;
    }

    /**
      * Sets the value of the 'sgscore3' field.
      * Star/Galaxy score of third closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
      * @param value The value of 'sgscore3'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSgscore3(java.lang.Float value) {
      validate(fields()[75], value);
      this.sgscore3 = value;
      fieldSetFlags()[75] = true;
      return this;
    }

    /**
      * Checks whether the 'sgscore3' field has been set.
      * Star/Galaxy score of third closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
      * @return True if the 'sgscore3' field has been set, false otherwise.
      */
    public boolean hasSgscore3() {
      return fieldSetFlags()[75];
    }


    /**
      * Clears the value of the 'sgscore3' field.
      * Star/Galaxy score of third closest source from PS1 catalog; if exists within 30 arcsec: 0 <= sgscore <= 1 where closer to 1 implies higher likelihood of being a star
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSgscore3() {
      sgscore3 = null;
      fieldSetFlags()[75] = false;
      return this;
    }

    /**
      * Gets the value of the 'distpsnr3' field.
      * Distance to third closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
      * @return The value.
      */
    public java.lang.Float getDistpsnr3() {
      return distpsnr3;
    }

    /**
      * Sets the value of the 'distpsnr3' field.
      * Distance to third closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
      * @param value The value of 'distpsnr3'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setDistpsnr3(java.lang.Float value) {
      validate(fields()[76], value);
      this.distpsnr3 = value;
      fieldSetFlags()[76] = true;
      return this;
    }

    /**
      * Checks whether the 'distpsnr3' field has been set.
      * Distance to third closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
      * @return True if the 'distpsnr3' field has been set, false otherwise.
      */
    public boolean hasDistpsnr3() {
      return fieldSetFlags()[76];
    }


    /**
      * Clears the value of the 'distpsnr3' field.
      * Distance to third closest source from PS1 catalog; if exists within 30 arcsec [arcsec]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearDistpsnr3() {
      distpsnr3 = null;
      fieldSetFlags()[76] = false;
      return this;
    }

    /**
      * Gets the value of the 'nmtchps' field.
      * Number of source matches from PS1 catalog falling within 30 arcsec
      * @return The value.
      */
    public java.lang.Integer getNmtchps() {
      return nmtchps;
    }

    /**
      * Sets the value of the 'nmtchps' field.
      * Number of source matches from PS1 catalog falling within 30 arcsec
      * @param value The value of 'nmtchps'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setNmtchps(int value) {
      validate(fields()[77], value);
      this.nmtchps = value;
      fieldSetFlags()[77] = true;
      return this;
    }

    /**
      * Checks whether the 'nmtchps' field has been set.
      * Number of source matches from PS1 catalog falling within 30 arcsec
      * @return True if the 'nmtchps' field has been set, false otherwise.
      */
    public boolean hasNmtchps() {
      return fieldSetFlags()[77];
    }


    /**
      * Clears the value of the 'nmtchps' field.
      * Number of source matches from PS1 catalog falling within 30 arcsec
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearNmtchps() {
      fieldSetFlags()[77] = false;
      return this;
    }

    /**
      * Gets the value of the 'rfid' field.
      * Processing ID for reference image to facilitate archive retrieval
      * @return The value.
      */
    public java.lang.Long getRfid() {
      return rfid;
    }

    /**
      * Sets the value of the 'rfid' field.
      * Processing ID for reference image to facilitate archive retrieval
      * @param value The value of 'rfid'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setRfid(long value) {
      validate(fields()[78], value);
      this.rfid = value;
      fieldSetFlags()[78] = true;
      return this;
    }

    /**
      * Checks whether the 'rfid' field has been set.
      * Processing ID for reference image to facilitate archive retrieval
      * @return True if the 'rfid' field has been set, false otherwise.
      */
    public boolean hasRfid() {
      return fieldSetFlags()[78];
    }


    /**
      * Clears the value of the 'rfid' field.
      * Processing ID for reference image to facilitate archive retrieval
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearRfid() {
      fieldSetFlags()[78] = false;
      return this;
    }

    /**
      * Gets the value of the 'jdstartref' field.
      * Observation Julian date of earliest exposure used to generate reference image [days]
      * @return The value.
      */
    public java.lang.Double getJdstartref() {
      return jdstartref;
    }

    /**
      * Sets the value of the 'jdstartref' field.
      * Observation Julian date of earliest exposure used to generate reference image [days]
      * @param value The value of 'jdstartref'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setJdstartref(double value) {
      validate(fields()[79], value);
      this.jdstartref = value;
      fieldSetFlags()[79] = true;
      return this;
    }

    /**
      * Checks whether the 'jdstartref' field has been set.
      * Observation Julian date of earliest exposure used to generate reference image [days]
      * @return True if the 'jdstartref' field has been set, false otherwise.
      */
    public boolean hasJdstartref() {
      return fieldSetFlags()[79];
    }


    /**
      * Clears the value of the 'jdstartref' field.
      * Observation Julian date of earliest exposure used to generate reference image [days]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearJdstartref() {
      fieldSetFlags()[79] = false;
      return this;
    }

    /**
      * Gets the value of the 'jdendref' field.
      * Observation Julian date of latest exposure used to generate reference image [days]
      * @return The value.
      */
    public java.lang.Double getJdendref() {
      return jdendref;
    }

    /**
      * Sets the value of the 'jdendref' field.
      * Observation Julian date of latest exposure used to generate reference image [days]
      * @param value The value of 'jdendref'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setJdendref(double value) {
      validate(fields()[80], value);
      this.jdendref = value;
      fieldSetFlags()[80] = true;
      return this;
    }

    /**
      * Checks whether the 'jdendref' field has been set.
      * Observation Julian date of latest exposure used to generate reference image [days]
      * @return True if the 'jdendref' field has been set, false otherwise.
      */
    public boolean hasJdendref() {
      return fieldSetFlags()[80];
    }


    /**
      * Clears the value of the 'jdendref' field.
      * Observation Julian date of latest exposure used to generate reference image [days]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearJdendref() {
      fieldSetFlags()[80] = false;
      return this;
    }

    /**
      * Gets the value of the 'nframesref' field.
      * Number of frames (epochal images) used to generate reference image
      * @return The value.
      */
    public java.lang.Integer getNframesref() {
      return nframesref;
    }

    /**
      * Sets the value of the 'nframesref' field.
      * Number of frames (epochal images) used to generate reference image
      * @param value The value of 'nframesref'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setNframesref(int value) {
      validate(fields()[81], value);
      this.nframesref = value;
      fieldSetFlags()[81] = true;
      return this;
    }

    /**
      * Checks whether the 'nframesref' field has been set.
      * Number of frames (epochal images) used to generate reference image
      * @return True if the 'nframesref' field has been set, false otherwise.
      */
    public boolean hasNframesref() {
      return fieldSetFlags()[81];
    }


    /**
      * Clears the value of the 'nframesref' field.
      * Number of frames (epochal images) used to generate reference image
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearNframesref() {
      fieldSetFlags()[81] = false;
      return this;
    }

    /**
      * Gets the value of the 'rbversion' field.
      * version of RealBogus model/classifier used to assign rb quality score
      * @return The value.
      */
    public java.lang.CharSequence getRbversion() {
      return rbversion;
    }

    /**
      * Sets the value of the 'rbversion' field.
      * version of RealBogus model/classifier used to assign rb quality score
      * @param value The value of 'rbversion'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setRbversion(java.lang.CharSequence value) {
      validate(fields()[82], value);
      this.rbversion = value;
      fieldSetFlags()[82] = true;
      return this;
    }

    /**
      * Checks whether the 'rbversion' field has been set.
      * version of RealBogus model/classifier used to assign rb quality score
      * @return True if the 'rbversion' field has been set, false otherwise.
      */
    public boolean hasRbversion() {
      return fieldSetFlags()[82];
    }


    /**
      * Clears the value of the 'rbversion' field.
      * version of RealBogus model/classifier used to assign rb quality score
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearRbversion() {
      rbversion = null;
      fieldSetFlags()[82] = false;
      return this;
    }

    /**
      * Gets the value of the 'dsnrms' field.
      * Ratio: D/stddev(D) on event position where D = difference image
      * @return The value.
      */
    public java.lang.Float getDsnrms() {
      return dsnrms;
    }

    /**
      * Sets the value of the 'dsnrms' field.
      * Ratio: D/stddev(D) on event position where D = difference image
      * @param value The value of 'dsnrms'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setDsnrms(java.lang.Float value) {
      validate(fields()[83], value);
      this.dsnrms = value;
      fieldSetFlags()[83] = true;
      return this;
    }

    /**
      * Checks whether the 'dsnrms' field has been set.
      * Ratio: D/stddev(D) on event position where D = difference image
      * @return True if the 'dsnrms' field has been set, false otherwise.
      */
    public boolean hasDsnrms() {
      return fieldSetFlags()[83];
    }


    /**
      * Clears the value of the 'dsnrms' field.
      * Ratio: D/stddev(D) on event position where D = difference image
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearDsnrms() {
      dsnrms = null;
      fieldSetFlags()[83] = false;
      return this;
    }

    /**
      * Gets the value of the 'ssnrms' field.
      * Ratio: S/stddev(S) on event position where S = image of convolution: D (x) PSF(D)
      * @return The value.
      */
    public java.lang.Float getSsnrms() {
      return ssnrms;
    }

    /**
      * Sets the value of the 'ssnrms' field.
      * Ratio: S/stddev(S) on event position where S = image of convolution: D (x) PSF(D)
      * @param value The value of 'ssnrms'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setSsnrms(java.lang.Float value) {
      validate(fields()[84], value);
      this.ssnrms = value;
      fieldSetFlags()[84] = true;
      return this;
    }

    /**
      * Checks whether the 'ssnrms' field has been set.
      * Ratio: S/stddev(S) on event position where S = image of convolution: D (x) PSF(D)
      * @return True if the 'ssnrms' field has been set, false otherwise.
      */
    public boolean hasSsnrms() {
      return fieldSetFlags()[84];
    }


    /**
      * Clears the value of the 'ssnrms' field.
      * Ratio: S/stddev(S) on event position where S = image of convolution: D (x) PSF(D)
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearSsnrms() {
      ssnrms = null;
      fieldSetFlags()[84] = false;
      return this;
    }

    /**
      * Gets the value of the 'dsdiff' field.
      * Difference of statistics: dsnrms - ssnrms
      * @return The value.
      */
    public java.lang.Float getDsdiff() {
      return dsdiff;
    }

    /**
      * Sets the value of the 'dsdiff' field.
      * Difference of statistics: dsnrms - ssnrms
      * @param value The value of 'dsdiff'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setDsdiff(java.lang.Float value) {
      validate(fields()[85], value);
      this.dsdiff = value;
      fieldSetFlags()[85] = true;
      return this;
    }

    /**
      * Checks whether the 'dsdiff' field has been set.
      * Difference of statistics: dsnrms - ssnrms
      * @return True if the 'dsdiff' field has been set, false otherwise.
      */
    public boolean hasDsdiff() {
      return fieldSetFlags()[85];
    }


    /**
      * Clears the value of the 'dsdiff' field.
      * Difference of statistics: dsnrms - ssnrms
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearDsdiff() {
      dsdiff = null;
      fieldSetFlags()[85] = false;
      return this;
    }

    /**
      * Gets the value of the 'magzpsci' field.
      * Magnitude zero point for photometry estimates [mag]
      * @return The value.
      */
    public java.lang.Float getMagzpsci() {
      return magzpsci;
    }

    /**
      * Sets the value of the 'magzpsci' field.
      * Magnitude zero point for photometry estimates [mag]
      * @param value The value of 'magzpsci'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setMagzpsci(java.lang.Float value) {
      validate(fields()[86], value);
      this.magzpsci = value;
      fieldSetFlags()[86] = true;
      return this;
    }

    /**
      * Checks whether the 'magzpsci' field has been set.
      * Magnitude zero point for photometry estimates [mag]
      * @return True if the 'magzpsci' field has been set, false otherwise.
      */
    public boolean hasMagzpsci() {
      return fieldSetFlags()[86];
    }


    /**
      * Clears the value of the 'magzpsci' field.
      * Magnitude zero point for photometry estimates [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearMagzpsci() {
      magzpsci = null;
      fieldSetFlags()[86] = false;
      return this;
    }

    /**
      * Gets the value of the 'magzpsciunc' field.
      * Magnitude zero point uncertainty (in magzpsci) [mag]
      * @return The value.
      */
    public java.lang.Float getMagzpsciunc() {
      return magzpsciunc;
    }

    /**
      * Sets the value of the 'magzpsciunc' field.
      * Magnitude zero point uncertainty (in magzpsci) [mag]
      * @param value The value of 'magzpsciunc'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setMagzpsciunc(java.lang.Float value) {
      validate(fields()[87], value);
      this.magzpsciunc = value;
      fieldSetFlags()[87] = true;
      return this;
    }

    /**
      * Checks whether the 'magzpsciunc' field has been set.
      * Magnitude zero point uncertainty (in magzpsci) [mag]
      * @return True if the 'magzpsciunc' field has been set, false otherwise.
      */
    public boolean hasMagzpsciunc() {
      return fieldSetFlags()[87];
    }


    /**
      * Clears the value of the 'magzpsciunc' field.
      * Magnitude zero point uncertainty (in magzpsci) [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearMagzpsciunc() {
      magzpsciunc = null;
      fieldSetFlags()[87] = false;
      return this;
    }

    /**
      * Gets the value of the 'magzpscirms' field.
      * RMS (deviation from average) in all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]
      * @return The value.
      */
    public java.lang.Float getMagzpscirms() {
      return magzpscirms;
    }

    /**
      * Sets the value of the 'magzpscirms' field.
      * RMS (deviation from average) in all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]
      * @param value The value of 'magzpscirms'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setMagzpscirms(java.lang.Float value) {
      validate(fields()[88], value);
      this.magzpscirms = value;
      fieldSetFlags()[88] = true;
      return this;
    }

    /**
      * Checks whether the 'magzpscirms' field has been set.
      * RMS (deviation from average) in all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]
      * @return True if the 'magzpscirms' field has been set, false otherwise.
      */
    public boolean hasMagzpscirms() {
      return fieldSetFlags()[88];
    }


    /**
      * Clears the value of the 'magzpscirms' field.
      * RMS (deviation from average) in all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearMagzpscirms() {
      magzpscirms = null;
      fieldSetFlags()[88] = false;
      return this;
    }

    /**
      * Gets the value of the 'nmatches' field.
      * Number of PS1 photometric calibrators used to calibrate science image from science image processing
      * @return The value.
      */
    public java.lang.Integer getNmatches() {
      return nmatches;
    }

    /**
      * Sets the value of the 'nmatches' field.
      * Number of PS1 photometric calibrators used to calibrate science image from science image processing
      * @param value The value of 'nmatches'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setNmatches(int value) {
      validate(fields()[89], value);
      this.nmatches = value;
      fieldSetFlags()[89] = true;
      return this;
    }

    /**
      * Checks whether the 'nmatches' field has been set.
      * Number of PS1 photometric calibrators used to calibrate science image from science image processing
      * @return True if the 'nmatches' field has been set, false otherwise.
      */
    public boolean hasNmatches() {
      return fieldSetFlags()[89];
    }


    /**
      * Clears the value of the 'nmatches' field.
      * Number of PS1 photometric calibrators used to calibrate science image from science image processing
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearNmatches() {
      fieldSetFlags()[89] = false;
      return this;
    }

    /**
      * Gets the value of the 'clrcoeff' field.
      * Color coefficient from linear fit from photometric calibration of science image
      * @return The value.
      */
    public java.lang.Float getClrcoeff() {
      return clrcoeff;
    }

    /**
      * Sets the value of the 'clrcoeff' field.
      * Color coefficient from linear fit from photometric calibration of science image
      * @param value The value of 'clrcoeff'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setClrcoeff(java.lang.Float value) {
      validate(fields()[90], value);
      this.clrcoeff = value;
      fieldSetFlags()[90] = true;
      return this;
    }

    /**
      * Checks whether the 'clrcoeff' field has been set.
      * Color coefficient from linear fit from photometric calibration of science image
      * @return True if the 'clrcoeff' field has been set, false otherwise.
      */
    public boolean hasClrcoeff() {
      return fieldSetFlags()[90];
    }


    /**
      * Clears the value of the 'clrcoeff' field.
      * Color coefficient from linear fit from photometric calibration of science image
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearClrcoeff() {
      clrcoeff = null;
      fieldSetFlags()[90] = false;
      return this;
    }

    /**
      * Gets the value of the 'clrcounc' field.
      * Color coefficient uncertainty from linear fit (corresponding to clrcoeff)
      * @return The value.
      */
    public java.lang.Float getClrcounc() {
      return clrcounc;
    }

    /**
      * Sets the value of the 'clrcounc' field.
      * Color coefficient uncertainty from linear fit (corresponding to clrcoeff)
      * @param value The value of 'clrcounc'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setClrcounc(java.lang.Float value) {
      validate(fields()[91], value);
      this.clrcounc = value;
      fieldSetFlags()[91] = true;
      return this;
    }

    /**
      * Checks whether the 'clrcounc' field has been set.
      * Color coefficient uncertainty from linear fit (corresponding to clrcoeff)
      * @return True if the 'clrcounc' field has been set, false otherwise.
      */
    public boolean hasClrcounc() {
      return fieldSetFlags()[91];
    }


    /**
      * Clears the value of the 'clrcounc' field.
      * Color coefficient uncertainty from linear fit (corresponding to clrcoeff)
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearClrcounc() {
      clrcounc = null;
      fieldSetFlags()[91] = false;
      return this;
    }

    /**
      * Gets the value of the 'zpclrcov' field.
      * Covariance in magzpsci and clrcoeff from science image processing [mag^2]
      * @return The value.
      */
    public java.lang.Float getZpclrcov() {
      return zpclrcov;
    }

    /**
      * Sets the value of the 'zpclrcov' field.
      * Covariance in magzpsci and clrcoeff from science image processing [mag^2]
      * @param value The value of 'zpclrcov'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setZpclrcov(java.lang.Float value) {
      validate(fields()[92], value);
      this.zpclrcov = value;
      fieldSetFlags()[92] = true;
      return this;
    }

    /**
      * Checks whether the 'zpclrcov' field has been set.
      * Covariance in magzpsci and clrcoeff from science image processing [mag^2]
      * @return True if the 'zpclrcov' field has been set, false otherwise.
      */
    public boolean hasZpclrcov() {
      return fieldSetFlags()[92];
    }


    /**
      * Clears the value of the 'zpclrcov' field.
      * Covariance in magzpsci and clrcoeff from science image processing [mag^2]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearZpclrcov() {
      zpclrcov = null;
      fieldSetFlags()[92] = false;
      return this;
    }

    /**
      * Gets the value of the 'zpmed' field.
      * Magnitude zero point from median of all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]
      * @return The value.
      */
    public java.lang.Float getZpmed() {
      return zpmed;
    }

    /**
      * Sets the value of the 'zpmed' field.
      * Magnitude zero point from median of all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]
      * @param value The value of 'zpmed'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setZpmed(java.lang.Float value) {
      validate(fields()[93], value);
      this.zpmed = value;
      fieldSetFlags()[93] = true;
      return this;
    }

    /**
      * Checks whether the 'zpmed' field has been set.
      * Magnitude zero point from median of all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]
      * @return True if the 'zpmed' field has been set, false otherwise.
      */
    public boolean hasZpmed() {
      return fieldSetFlags()[93];
    }


    /**
      * Clears the value of the 'zpmed' field.
      * Magnitude zero point from median of all differences between instrumental photometry and matched photometric calibrators from science image processing [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearZpmed() {
      zpmed = null;
      fieldSetFlags()[93] = false;
      return this;
    }

    /**
      * Gets the value of the 'clrmed' field.
      * Median color of all PS1 photometric calibrators used from science image processing [mag]: for filter (fid) = 1, 2, 3, PS1 color used = g-r, g-r, r-i respectively
      * @return The value.
      */
    public java.lang.Float getClrmed() {
      return clrmed;
    }

    /**
      * Sets the value of the 'clrmed' field.
      * Median color of all PS1 photometric calibrators used from science image processing [mag]: for filter (fid) = 1, 2, 3, PS1 color used = g-r, g-r, r-i respectively
      * @param value The value of 'clrmed'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setClrmed(java.lang.Float value) {
      validate(fields()[94], value);
      this.clrmed = value;
      fieldSetFlags()[94] = true;
      return this;
    }

    /**
      * Checks whether the 'clrmed' field has been set.
      * Median color of all PS1 photometric calibrators used from science image processing [mag]: for filter (fid) = 1, 2, 3, PS1 color used = g-r, g-r, r-i respectively
      * @return True if the 'clrmed' field has been set, false otherwise.
      */
    public boolean hasClrmed() {
      return fieldSetFlags()[94];
    }


    /**
      * Clears the value of the 'clrmed' field.
      * Median color of all PS1 photometric calibrators used from science image processing [mag]: for filter (fid) = 1, 2, 3, PS1 color used = g-r, g-r, r-i respectively
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearClrmed() {
      clrmed = null;
      fieldSetFlags()[94] = false;
      return this;
    }

    /**
      * Gets the value of the 'clrrms' field.
      * RMS color (deviation from average) of all PS1 photometric calibrators used from science image processing [mag]
      * @return The value.
      */
    public java.lang.Float getClrrms() {
      return clrrms;
    }

    /**
      * Sets the value of the 'clrrms' field.
      * RMS color (deviation from average) of all PS1 photometric calibrators used from science image processing [mag]
      * @param value The value of 'clrrms'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setClrrms(java.lang.Float value) {
      validate(fields()[95], value);
      this.clrrms = value;
      fieldSetFlags()[95] = true;
      return this;
    }

    /**
      * Checks whether the 'clrrms' field has been set.
      * RMS color (deviation from average) of all PS1 photometric calibrators used from science image processing [mag]
      * @return True if the 'clrrms' field has been set, false otherwise.
      */
    public boolean hasClrrms() {
      return fieldSetFlags()[95];
    }


    /**
      * Clears the value of the 'clrrms' field.
      * RMS color (deviation from average) of all PS1 photometric calibrators used from science image processing [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearClrrms() {
      clrrms = null;
      fieldSetFlags()[95] = false;
      return this;
    }

    /**
      * Gets the value of the 'neargaia' field.
      * Distance to closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [arcsec]
      * @return The value.
      */
    public java.lang.Float getNeargaia() {
      return neargaia;
    }

    /**
      * Sets the value of the 'neargaia' field.
      * Distance to closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [arcsec]
      * @param value The value of 'neargaia'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setNeargaia(java.lang.Float value) {
      validate(fields()[96], value);
      this.neargaia = value;
      fieldSetFlags()[96] = true;
      return this;
    }

    /**
      * Checks whether the 'neargaia' field has been set.
      * Distance to closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [arcsec]
      * @return True if the 'neargaia' field has been set, false otherwise.
      */
    public boolean hasNeargaia() {
      return fieldSetFlags()[96];
    }


    /**
      * Clears the value of the 'neargaia' field.
      * Distance to closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [arcsec]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearNeargaia() {
      neargaia = null;
      fieldSetFlags()[96] = false;
      return this;
    }

    /**
      * Gets the value of the 'neargaiabright' field.
      * Distance to closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [arcsec]
      * @return The value.
      */
    public java.lang.Float getNeargaiabright() {
      return neargaiabright;
    }

    /**
      * Sets the value of the 'neargaiabright' field.
      * Distance to closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [arcsec]
      * @param value The value of 'neargaiabright'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setNeargaiabright(java.lang.Float value) {
      validate(fields()[97], value);
      this.neargaiabright = value;
      fieldSetFlags()[97] = true;
      return this;
    }

    /**
      * Checks whether the 'neargaiabright' field has been set.
      * Distance to closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [arcsec]
      * @return True if the 'neargaiabright' field has been set, false otherwise.
      */
    public boolean hasNeargaiabright() {
      return fieldSetFlags()[97];
    }


    /**
      * Clears the value of the 'neargaiabright' field.
      * Distance to closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [arcsec]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearNeargaiabright() {
      neargaiabright = null;
      fieldSetFlags()[97] = false;
      return this;
    }

    /**
      * Gets the value of the 'maggaia' field.
      * Gaia (G-band) magnitude of closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [mag]
      * @return The value.
      */
    public java.lang.Float getMaggaia() {
      return maggaia;
    }

    /**
      * Sets the value of the 'maggaia' field.
      * Gaia (G-band) magnitude of closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [mag]
      * @param value The value of 'maggaia'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setMaggaia(java.lang.Float value) {
      validate(fields()[98], value);
      this.maggaia = value;
      fieldSetFlags()[98] = true;
      return this;
    }

    /**
      * Checks whether the 'maggaia' field has been set.
      * Gaia (G-band) magnitude of closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [mag]
      * @return True if the 'maggaia' field has been set, false otherwise.
      */
    public boolean hasMaggaia() {
      return fieldSetFlags()[98];
    }


    /**
      * Clears the value of the 'maggaia' field.
      * Gaia (G-band) magnitude of closest source from Gaia DR1 catalog irrespective of magnitude; if exists within 90 arcsec [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearMaggaia() {
      maggaia = null;
      fieldSetFlags()[98] = false;
      return this;
    }

    /**
      * Gets the value of the 'maggaiabright' field.
      * Gaia (G-band) magnitude of closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [mag]
      * @return The value.
      */
    public java.lang.Float getMaggaiabright() {
      return maggaiabright;
    }

    /**
      * Sets the value of the 'maggaiabright' field.
      * Gaia (G-band) magnitude of closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [mag]
      * @param value The value of 'maggaiabright'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setMaggaiabright(java.lang.Float value) {
      validate(fields()[99], value);
      this.maggaiabright = value;
      fieldSetFlags()[99] = true;
      return this;
    }

    /**
      * Checks whether the 'maggaiabright' field has been set.
      * Gaia (G-band) magnitude of closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [mag]
      * @return True if the 'maggaiabright' field has been set, false otherwise.
      */
    public boolean hasMaggaiabright() {
      return fieldSetFlags()[99];
    }


    /**
      * Clears the value of the 'maggaiabright' field.
      * Gaia (G-band) magnitude of closest source from Gaia DR1 catalog brighter than magnitude 14; if exists within 90 arcsec [mag]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearMaggaiabright() {
      maggaiabright = null;
      fieldSetFlags()[99] = false;
      return this;
    }

    /**
      * Gets the value of the 'exptime' field.
      * Integration time of camera exposure [sec]
      * @return The value.
      */
    public java.lang.Float getExptime() {
      return exptime;
    }

    /**
      * Sets the value of the 'exptime' field.
      * Integration time of camera exposure [sec]
      * @param value The value of 'exptime'.
      * @return This builder.
      */
    public ztf.alert.candidate.Builder setExptime(java.lang.Float value) {
      validate(fields()[100], value);
      this.exptime = value;
      fieldSetFlags()[100] = true;
      return this;
    }

    /**
      * Checks whether the 'exptime' field has been set.
      * Integration time of camera exposure [sec]
      * @return True if the 'exptime' field has been set, false otherwise.
      */
    public boolean hasExptime() {
      return fieldSetFlags()[100];
    }


    /**
      * Clears the value of the 'exptime' field.
      * Integration time of camera exposure [sec]
      * @return This builder.
      */
    public ztf.alert.candidate.Builder clearExptime() {
      exptime = null;
      fieldSetFlags()[100] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public candidate build() {
      try {
        candidate record = new candidate();
        record.jd = fieldSetFlags()[0] ? this.jd : (java.lang.Double) defaultValue(fields()[0]);
        record.fid = fieldSetFlags()[1] ? this.fid : (java.lang.Integer) defaultValue(fields()[1]);
        record.pid = fieldSetFlags()[2] ? this.pid : (java.lang.Long) defaultValue(fields()[2]);
        record.diffmaglim = fieldSetFlags()[3] ? this.diffmaglim : (java.lang.Float) defaultValue(fields()[3]);
        record.pdiffimfilename = fieldSetFlags()[4] ? this.pdiffimfilename : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.programpi = fieldSetFlags()[5] ? this.programpi : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.programid = fieldSetFlags()[6] ? this.programid : (java.lang.Integer) defaultValue(fields()[6]);
        record.candid = fieldSetFlags()[7] ? this.candid : (java.lang.Long) defaultValue(fields()[7]);
        record.isdiffpos = fieldSetFlags()[8] ? this.isdiffpos : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.tblid = fieldSetFlags()[9] ? this.tblid : (java.lang.Long) defaultValue(fields()[9]);
        record.nid = fieldSetFlags()[10] ? this.nid : (java.lang.Integer) defaultValue(fields()[10]);
        record.rcid = fieldSetFlags()[11] ? this.rcid : (java.lang.Integer) defaultValue(fields()[11]);
        record.field = fieldSetFlags()[12] ? this.field : (java.lang.Integer) defaultValue(fields()[12]);
        record.xpos = fieldSetFlags()[13] ? this.xpos : (java.lang.Float) defaultValue(fields()[13]);
        record.ypos = fieldSetFlags()[14] ? this.ypos : (java.lang.Float) defaultValue(fields()[14]);
        record.ra = fieldSetFlags()[15] ? this.ra : (java.lang.Double) defaultValue(fields()[15]);
        record.dec = fieldSetFlags()[16] ? this.dec : (java.lang.Double) defaultValue(fields()[16]);
        record.magpsf = fieldSetFlags()[17] ? this.magpsf : (java.lang.Float) defaultValue(fields()[17]);
        record.sigmapsf = fieldSetFlags()[18] ? this.sigmapsf : (java.lang.Float) defaultValue(fields()[18]);
        record.chipsf = fieldSetFlags()[19] ? this.chipsf : (java.lang.Float) defaultValue(fields()[19]);
        record.magap = fieldSetFlags()[20] ? this.magap : (java.lang.Float) defaultValue(fields()[20]);
        record.sigmagap = fieldSetFlags()[21] ? this.sigmagap : (java.lang.Float) defaultValue(fields()[21]);
        record.distnr = fieldSetFlags()[22] ? this.distnr : (java.lang.Float) defaultValue(fields()[22]);
        record.magnr = fieldSetFlags()[23] ? this.magnr : (java.lang.Float) defaultValue(fields()[23]);
        record.sigmagnr = fieldSetFlags()[24] ? this.sigmagnr : (java.lang.Float) defaultValue(fields()[24]);
        record.chinr = fieldSetFlags()[25] ? this.chinr : (java.lang.Float) defaultValue(fields()[25]);
        record.sharpnr = fieldSetFlags()[26] ? this.sharpnr : (java.lang.Float) defaultValue(fields()[26]);
        record.sky = fieldSetFlags()[27] ? this.sky : (java.lang.Float) defaultValue(fields()[27]);
        record.magdiff = fieldSetFlags()[28] ? this.magdiff : (java.lang.Float) defaultValue(fields()[28]);
        record.fwhm = fieldSetFlags()[29] ? this.fwhm : (java.lang.Float) defaultValue(fields()[29]);
        record.classtar = fieldSetFlags()[30] ? this.classtar : (java.lang.Float) defaultValue(fields()[30]);
        record.mindtoedge = fieldSetFlags()[31] ? this.mindtoedge : (java.lang.Float) defaultValue(fields()[31]);
        record.magfromlim = fieldSetFlags()[32] ? this.magfromlim : (java.lang.Float) defaultValue(fields()[32]);
        record.seeratio = fieldSetFlags()[33] ? this.seeratio : (java.lang.Float) defaultValue(fields()[33]);
        record.aimage = fieldSetFlags()[34] ? this.aimage : (java.lang.Float) defaultValue(fields()[34]);
        record.bimage = fieldSetFlags()[35] ? this.bimage : (java.lang.Float) defaultValue(fields()[35]);
        record.aimagerat = fieldSetFlags()[36] ? this.aimagerat : (java.lang.Float) defaultValue(fields()[36]);
        record.bimagerat = fieldSetFlags()[37] ? this.bimagerat : (java.lang.Float) defaultValue(fields()[37]);
        record.elong = fieldSetFlags()[38] ? this.elong : (java.lang.Float) defaultValue(fields()[38]);
        record.nneg = fieldSetFlags()[39] ? this.nneg : (java.lang.Integer) defaultValue(fields()[39]);
        record.nbad = fieldSetFlags()[40] ? this.nbad : (java.lang.Integer) defaultValue(fields()[40]);
        record.rb = fieldSetFlags()[41] ? this.rb : (java.lang.Float) defaultValue(fields()[41]);
        record.ssdistnr = fieldSetFlags()[42] ? this.ssdistnr : (java.lang.Float) defaultValue(fields()[42]);
        record.ssmagnr = fieldSetFlags()[43] ? this.ssmagnr : (java.lang.Float) defaultValue(fields()[43]);
        record.ssnamenr = fieldSetFlags()[44] ? this.ssnamenr : (java.lang.CharSequence) defaultValue(fields()[44]);
        record.sumrat = fieldSetFlags()[45] ? this.sumrat : (java.lang.Float) defaultValue(fields()[45]);
        record.magapbig = fieldSetFlags()[46] ? this.magapbig : (java.lang.Float) defaultValue(fields()[46]);
        record.sigmagapbig = fieldSetFlags()[47] ? this.sigmagapbig : (java.lang.Float) defaultValue(fields()[47]);
        record.ranr = fieldSetFlags()[48] ? this.ranr : (java.lang.Double) defaultValue(fields()[48]);
        record.decnr = fieldSetFlags()[49] ? this.decnr : (java.lang.Double) defaultValue(fields()[49]);
        record.sgmag1 = fieldSetFlags()[50] ? this.sgmag1 : (java.lang.Float) defaultValue(fields()[50]);
        record.srmag1 = fieldSetFlags()[51] ? this.srmag1 : (java.lang.Float) defaultValue(fields()[51]);
        record.simag1 = fieldSetFlags()[52] ? this.simag1 : (java.lang.Float) defaultValue(fields()[52]);
        record.szmag1 = fieldSetFlags()[53] ? this.szmag1 : (java.lang.Float) defaultValue(fields()[53]);
        record.sgscore1 = fieldSetFlags()[54] ? this.sgscore1 : (java.lang.Float) defaultValue(fields()[54]);
        record.distpsnr1 = fieldSetFlags()[55] ? this.distpsnr1 : (java.lang.Float) defaultValue(fields()[55]);
        record.ndethist = fieldSetFlags()[56] ? this.ndethist : (java.lang.Integer) defaultValue(fields()[56]);
        record.ncovhist = fieldSetFlags()[57] ? this.ncovhist : (java.lang.Integer) defaultValue(fields()[57]);
        record.jdstarthist = fieldSetFlags()[58] ? this.jdstarthist : (java.lang.Double) defaultValue(fields()[58]);
        record.jdendhist = fieldSetFlags()[59] ? this.jdendhist : (java.lang.Double) defaultValue(fields()[59]);
        record.scorr = fieldSetFlags()[60] ? this.scorr : (java.lang.Double) defaultValue(fields()[60]);
        record.tooflag = fieldSetFlags()[61] ? this.tooflag : (java.lang.Integer) defaultValue(fields()[61]);
        record.objectidps1 = fieldSetFlags()[62] ? this.objectidps1 : (java.lang.Long) defaultValue(fields()[62]);
        record.objectidps2 = fieldSetFlags()[63] ? this.objectidps2 : (java.lang.Long) defaultValue(fields()[63]);
        record.sgmag2 = fieldSetFlags()[64] ? this.sgmag2 : (java.lang.Float) defaultValue(fields()[64]);
        record.srmag2 = fieldSetFlags()[65] ? this.srmag2 : (java.lang.Float) defaultValue(fields()[65]);
        record.simag2 = fieldSetFlags()[66] ? this.simag2 : (java.lang.Float) defaultValue(fields()[66]);
        record.szmag2 = fieldSetFlags()[67] ? this.szmag2 : (java.lang.Float) defaultValue(fields()[67]);
        record.sgscore2 = fieldSetFlags()[68] ? this.sgscore2 : (java.lang.Float) defaultValue(fields()[68]);
        record.distpsnr2 = fieldSetFlags()[69] ? this.distpsnr2 : (java.lang.Float) defaultValue(fields()[69]);
        record.objectidps3 = fieldSetFlags()[70] ? this.objectidps3 : (java.lang.Long) defaultValue(fields()[70]);
        record.sgmag3 = fieldSetFlags()[71] ? this.sgmag3 : (java.lang.Float) defaultValue(fields()[71]);
        record.srmag3 = fieldSetFlags()[72] ? this.srmag3 : (java.lang.Float) defaultValue(fields()[72]);
        record.simag3 = fieldSetFlags()[73] ? this.simag3 : (java.lang.Float) defaultValue(fields()[73]);
        record.szmag3 = fieldSetFlags()[74] ? this.szmag3 : (java.lang.Float) defaultValue(fields()[74]);
        record.sgscore3 = fieldSetFlags()[75] ? this.sgscore3 : (java.lang.Float) defaultValue(fields()[75]);
        record.distpsnr3 = fieldSetFlags()[76] ? this.distpsnr3 : (java.lang.Float) defaultValue(fields()[76]);
        record.nmtchps = fieldSetFlags()[77] ? this.nmtchps : (java.lang.Integer) defaultValue(fields()[77]);
        record.rfid = fieldSetFlags()[78] ? this.rfid : (java.lang.Long) defaultValue(fields()[78]);
        record.jdstartref = fieldSetFlags()[79] ? this.jdstartref : (java.lang.Double) defaultValue(fields()[79]);
        record.jdendref = fieldSetFlags()[80] ? this.jdendref : (java.lang.Double) defaultValue(fields()[80]);
        record.nframesref = fieldSetFlags()[81] ? this.nframesref : (java.lang.Integer) defaultValue(fields()[81]);
        record.rbversion = fieldSetFlags()[82] ? this.rbversion : (java.lang.CharSequence) defaultValue(fields()[82]);
        record.dsnrms = fieldSetFlags()[83] ? this.dsnrms : (java.lang.Float) defaultValue(fields()[83]);
        record.ssnrms = fieldSetFlags()[84] ? this.ssnrms : (java.lang.Float) defaultValue(fields()[84]);
        record.dsdiff = fieldSetFlags()[85] ? this.dsdiff : (java.lang.Float) defaultValue(fields()[85]);
        record.magzpsci = fieldSetFlags()[86] ? this.magzpsci : (java.lang.Float) defaultValue(fields()[86]);
        record.magzpsciunc = fieldSetFlags()[87] ? this.magzpsciunc : (java.lang.Float) defaultValue(fields()[87]);
        record.magzpscirms = fieldSetFlags()[88] ? this.magzpscirms : (java.lang.Float) defaultValue(fields()[88]);
        record.nmatches = fieldSetFlags()[89] ? this.nmatches : (java.lang.Integer) defaultValue(fields()[89]);
        record.clrcoeff = fieldSetFlags()[90] ? this.clrcoeff : (java.lang.Float) defaultValue(fields()[90]);
        record.clrcounc = fieldSetFlags()[91] ? this.clrcounc : (java.lang.Float) defaultValue(fields()[91]);
        record.zpclrcov = fieldSetFlags()[92] ? this.zpclrcov : (java.lang.Float) defaultValue(fields()[92]);
        record.zpmed = fieldSetFlags()[93] ? this.zpmed : (java.lang.Float) defaultValue(fields()[93]);
        record.clrmed = fieldSetFlags()[94] ? this.clrmed : (java.lang.Float) defaultValue(fields()[94]);
        record.clrrms = fieldSetFlags()[95] ? this.clrrms : (java.lang.Float) defaultValue(fields()[95]);
        record.neargaia = fieldSetFlags()[96] ? this.neargaia : (java.lang.Float) defaultValue(fields()[96]);
        record.neargaiabright = fieldSetFlags()[97] ? this.neargaiabright : (java.lang.Float) defaultValue(fields()[97]);
        record.maggaia = fieldSetFlags()[98] ? this.maggaia : (java.lang.Float) defaultValue(fields()[98]);
        record.maggaiabright = fieldSetFlags()[99] ? this.maggaiabright : (java.lang.Float) defaultValue(fields()[99]);
        record.exptime = fieldSetFlags()[100] ? this.exptime : (java.lang.Float) defaultValue(fields()[100]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<candidate>
    WRITER$ = (org.apache.avro.io.DatumWriter<candidate>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<candidate>
    READER$ = (org.apache.avro.io.DatumReader<candidate>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
